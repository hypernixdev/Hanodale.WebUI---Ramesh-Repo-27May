//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Hanodale.Entity.Core
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class HanodaleEntities : DbContext
    {
        public HanodaleEntities()
            : base("name=HanodaleEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<AdhocReport> AdhocReports { get; set; }
        public DbSet<AssignedBusiness> AssignedBusinesses { get; set; }
        public DbSet<AssignedOrganization> AssignedOrganizations { get; set; }
        public DbSet<Budget> Budgets { get; set; }
        public DbSet<Bulletin> Bulletins { get; set; }
        public DbSet<Business> Businesses { get; set; }
        public DbSet<BusinessAddress> BusinessAddresses { get; set; }
        public DbSet<BusinessClassification> BusinessClassifications { get; set; }
        public DbSet<BusinessFile> BusinessFiles { get; set; }
        public DbSet<BusinessOrganization> BusinessOrganizations { get; set; }
        public DbSet<BusinessOther> BusinessOthers { get; set; }
        public DbSet<BusinessWorkCategory> BusinessWorkCategories { get; set; }
        public DbSet<CalendarEvent> CalendarEvents { get; set; }
        public DbSet<CalendarSetting> CalendarSettings { get; set; }
        public DbSet<CompanyProfile> CompanyProfiles { get; set; }
        public DbSet<DashboardCategory> DashboardCategories { get; set; }
        public DbSet<EmailScheduled> EmailScheduleds { get; set; }
        public DbSet<FileUploadHistory> FileUploadHistories { get; set; }
        public DbSet<HelpDesk> HelpDesks { get; set; }
        public DbSet<HelpDeskLog> HelpDeskLogs { get; set; }
        public DbSet<Language_Profile> Language_Profile { get; set; }
        public DbSet<LocalizationLanguage> LocalizationLanguages { get; set; }
        public DbSet<LocalizationLanguageResource> LocalizationLanguageResources { get; set; }
        public DbSet<LocalizationResource> LocalizationResources { get; set; }
        public DbSet<LocalizationSection> LocalizationSections { get; set; }
        public DbSet<MenuItem> MenuItems { get; set; }
        public DbSet<ModuleCode> ModuleCodes { get; set; }
        public DbSet<ModuleItem> ModuleItems { get; set; }
        public DbSet<ModuleType> ModuleTypes { get; set; }
        public DbSet<News> News { get; set; }
        public DbSet<Notification> Notifications { get; set; }
        public DbSet<Organization> Organizations { get; set; }
        public DbSet<OrganizationCategory> OrganizationCategories { get; set; }
        public DbSet<OrganizationCategoryConfig> OrganizationCategoryConfigs { get; set; }
        public DbSet<OrganizationEmail> OrganizationEmails { get; set; }
        public DbSet<ReportCategory> ReportCategories { get; set; }
        public DbSet<ReportSetting> ReportSettings { get; set; }
        public DbSet<RunningCode> RunningCodes { get; set; }
        public DbSet<TableProfile> TableProfiles { get; set; }
        public DbSet<TableProfileMetadata> TableProfileMetadatas { get; set; }
        public DbSet<TableProfileMetadataBool> TableProfileMetadataBools { get; set; }
        public DbSet<TableProfileMetadataDateTime> TableProfileMetadataDateTimes { get; set; }
        public DbSet<TableProfileMetadataDecimal> TableProfileMetadataDecimals { get; set; }
        public DbSet<TableProfileMetadataInteger> TableProfileMetadataIntegers { get; set; }
        public DbSet<TableProfileMetadataList> TableProfileMetadataLists { get; set; }
        public DbSet<TableProfileMetadataListValue> TableProfileMetadataListValues { get; set; }
        public DbSet<TableProfileMetadataMultiFileUpload> TableProfileMetadataMultiFileUploads { get; set; }
        public DbSet<TableProfileMetadataSingleFileUpload> TableProfileMetadataSingleFileUploads { get; set; }
        public DbSet<TableProfileMetadataText> TableProfileMetadataTexts { get; set; }
        public DbSet<UserProfile> UserProfiles { get; set; }
        public DbSet<UserRight> UserRights { get; set; }
        public DbSet<UserRole> UserRoles { get; set; }
        public DbSet<UserType> UserTypes { get; set; }
        public DbSet<WorkCategory> WorkCategories { get; set; }
        public DbSet<UserLocation> UserLocations { get; set; }
        public DbSet<Plant> Plant { get; set; }
        public DbSet<Address_City> Address_City { get; set; }
        public DbSet<Address_Country> Address_Country { get; set; }
        public DbSet<Address_State> Address_State { get; set; }
        public DbSet<ShipTo> ShipTo { get; set; }
        public DbSet<Store> Store { get; set; }
        public DbSet<OrderUOM> OrderUOM { get; set; }
        public DbSet<Leave_Carry_Forward> Leave_Carry_Forward { get; set; }
        public DbSet<Leave_Sequence> Leave_Sequence { get; set; }
        public DbSet<Leave_View_Apply> Leave_View_Apply { get; set; }
        public DbSet<ProductCarton> ProductCarton { get; set; }
        public DbSet<ShipToAddress> ShipToAddress { get; set; }
        public DbSet<OrderPayment> OrderPayment { get; set; }
        public DbSet<UomConv> UomConv { get; set; }
        public DbSet<CustomerGroupPriceList> CustomerGroupPriceList { get; set; }
        public DbSet<CustomerPriceList> CustomerPriceList { get; set; }
        public DbSet<PriceList> PriceList { get; set; }
        public DbSet<PriceListPart> PriceListPart { get; set; }
        public DbSet<IntegrationLog> IntegrationLog { get; set; }
        public DbSet<IntegrationLogDetail> IntegrationLogDetail { get; set; }
        public DbSet<ProductWeightBarcode> ProductWeightBarcode { get; set; }
        public DbSet<StockBalance> StockBalance { get; set; }
        public DbSet<OrderUpdate> OrderUpdate { get; set; }
        public DbSet<User> Users { get; set; }
        public DbSet<Brand> Brand { get; set; }
        public DbSet<LooseConversion> LooseConversion { get; set; }
        public DbSet<LooseConversionItem> LooseConversionItem { get; set; }
        public DbSet<POSOrderNumber> POSOrderNumber { get; set; }
        public DbSet<LooseBarcodeSetting> LooseBarcodeSetting { get; set; }
        public DbSet<Customer> Customer { get; set; }
        public DbSet<District> District { get; set; }
        public DbSet<Order> Order { get; set; }
        public DbSet<OrderApproval> OrderApproval { get; set; }
        public DbSet<OrderItemDeleted> OrderItemDeleted { get; set; }
        public DbSet<OrderItemDiscountApproval> OrderItemDiscountApproval { get; set; }
        public DbSet<OrderItems> OrderItems { get; set; }
        public DbSet<SchedulerLog> SchedulerLog { get; set; }
        public DbSet<SchedulerSetting> SchedulerSetting { get; set; }
        public DbSet<PaymentReport> PaymentReport { get; set; }
        public DbSet<Product> Product { get; set; }
        public DbSet<OrderItemScanned> OrderItemScanned { get; set; }
        public DbSet<StockBalanceView> StockBalanceView { get; set; }
    
        public virtual int GetReportFiles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetReportFiles");
        }
    
        public virtual ObjectResult<DB_Ticket_Datatable_Details_Result> DB_Ticket_Datatable_Details(string type, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> organizationId, string search, string sortColumn, string sortType, Nullable<int> displayStart, Nullable<int> isplayLength, ObjectParameter totalRecordNo)
        {
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var organizationIdParameter = organizationId.HasValue ?
                new ObjectParameter("organizationId", organizationId) :
                new ObjectParameter("organizationId", typeof(int));
    
            var searchParameter = search != null ?
                new ObjectParameter("search", search) :
                new ObjectParameter("search", typeof(string));
    
            var sortColumnParameter = sortColumn != null ?
                new ObjectParameter("sortColumn", sortColumn) :
                new ObjectParameter("sortColumn", typeof(string));
    
            var sortTypeParameter = sortType != null ?
                new ObjectParameter("sortType", sortType) :
                new ObjectParameter("sortType", typeof(string));
    
            var displayStartParameter = displayStart.HasValue ?
                new ObjectParameter("displayStart", displayStart) :
                new ObjectParameter("displayStart", typeof(int));
    
            var isplayLengthParameter = isplayLength.HasValue ?
                new ObjectParameter("isplayLength", isplayLength) :
                new ObjectParameter("isplayLength", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DB_Ticket_Datatable_Details_Result>("DB_Ticket_Datatable_Details", typeParameter, fromDateParameter, toDateParameter, organizationIdParameter, searchParameter, sortColumnParameter, sortTypeParameter, displayStartParameter, isplayLengthParameter, totalRecordNo);
        }
    
        public virtual ObjectResult<DB_Ticket_Statistic_Result> DB_Ticket_Statistic(string statisticType, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> organizationId)
        {
            var statisticTypeParameter = statisticType != null ?
                new ObjectParameter("statisticType", statisticType) :
                new ObjectParameter("statisticType", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var organizationIdParameter = organizationId.HasValue ?
                new ObjectParameter("organizationId", organizationId) :
                new ObjectParameter("organizationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DB_Ticket_Statistic_Result>("DB_Ticket_Statistic", statisticTypeParameter, fromDateParameter, toDateParameter, organizationIdParameter);
        }
    
        public virtual ObjectResult<DB_Ticket_Statistic_Bar_Result> DB_Ticket_Statistic_Bar(string statisticType, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> organizationId)
        {
            var statisticTypeParameter = statisticType != null ?
                new ObjectParameter("statisticType", statisticType) :
                new ObjectParameter("statisticType", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            var organizationIdParameter = organizationId.HasValue ?
                new ObjectParameter("organizationId", organizationId) :
                new ObjectParameter("organizationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DB_Ticket_Statistic_Bar_Result>("DB_Ticket_Statistic_Bar", statisticTypeParameter, fromDateParameter, toDateParameter, organizationIdParameter);
        }
    
        public virtual ObjectResult<DB_User_Dashboard_Items_Result> DB_User_Dashboard_Items(Nullable<int> userId, Nullable<int> organizationId, ObjectParameter ticketCount)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var organizationIdParameter = organizationId.HasValue ?
                new ObjectParameter("organizationId", organizationId) :
                new ObjectParameter("organizationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DB_User_Dashboard_Items_Result>("DB_User_Dashboard_Items", userIdParameter, organizationIdParameter, ticketCount);
        }
    }
}
