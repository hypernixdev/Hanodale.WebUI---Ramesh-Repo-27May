// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments
#pragma warning disable 1591
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace Hanodale.WebUI.Controllers
{
    public partial class PickupController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected PickupController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult BindPickup()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.BindPickup);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.JsonResult RenderAction()
        {
            return new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.RenderAction);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.JsonResult AcceptOrder()
        {
            return new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.AcceptOrder);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.JsonResult Edit()
        {
            return new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.Edit);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.JsonResult OrderPicking()
        {
            return new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.OrderPicking);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.JsonResult VerifyOrder()
        {
            return new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.VerifyOrder);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.JsonResult Scan()
        {
            return new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.Scan);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public PickupController Actions { get { return MVC.Pickup; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Pickup";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Pickup";

        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
            public readonly string BindPickup = "BindPickup";
            public readonly string RenderAction = "RenderAction";
            public readonly string AcceptOrder = "AcceptOrder";
            public readonly string Edit = "Edit";
            public readonly string OrderPicking = "OrderPicking";
            public readonly string VerifyOrder = "VerifyOrder";
            public readonly string Scan = "Scan";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
            public const string BindPickup = "BindPickup";
            public const string RenderAction = "RenderAction";
            public const string AcceptOrder = "AcceptOrder";
            public const string Edit = "Edit";
            public const string OrderPicking = "OrderPicking";
            public const string VerifyOrder = "VerifyOrder";
            public const string Scan = "Scan";
        }


        static readonly ActionParamsClass_Index s_params_Index = new ActionParamsClass_Index();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Index IndexParams { get { return s_params_Index; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Index
        {
            public readonly string id = "id";
            public readonly string readOnly = "readOnly";
        }
        static readonly ActionParamsClass_BindPickup s_params_BindPickup = new ActionParamsClass_BindPickup();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_BindPickup BindPickupParams { get { return s_params_BindPickup; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_BindPickup
        {
            public readonly string param = "param";
            public readonly string myKey = "myKey";
        }
        static readonly ActionParamsClass_RenderAction s_params_RenderAction = new ActionParamsClass_RenderAction();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_RenderAction RenderActionParams { get { return s_params_RenderAction; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_RenderAction
        {
            public readonly string readOnly = "readOnly";
        }
        static readonly ActionParamsClass_AcceptOrder s_params_AcceptOrder = new ActionParamsClass_AcceptOrder();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AcceptOrder AcceptOrderParams { get { return s_params_AcceptOrder; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AcceptOrder
        {
            public readonly string id = "id";
        }
        static readonly ActionParamsClass_Edit s_params_Edit = new ActionParamsClass_Edit();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Edit EditParams { get { return s_params_Edit; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Edit
        {
            public readonly string id = "id";
            public readonly string readOnly = "readOnly";
        }
        static readonly ActionParamsClass_OrderPicking s_params_OrderPicking = new ActionParamsClass_OrderPicking();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_OrderPicking OrderPickingParams { get { return s_params_OrderPicking; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_OrderPicking
        {
            public readonly string id = "id";
            public readonly string readOnly = "readOnly";
        }
        static readonly ActionParamsClass_VerifyOrder s_params_VerifyOrder = new ActionParamsClass_VerifyOrder();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_VerifyOrder VerifyOrderParams { get { return s_params_VerifyOrder; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_VerifyOrder
        {
            public readonly string id = "id";
            public readonly string readOnly = "readOnly";
        }
        static readonly ActionParamsClass_Scan s_params_Scan = new ActionParamsClass_Scan();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Scan ScanParams { get { return s_params_Scan; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Scan
        {
            public readonly string orderId = "orderId";
            public readonly string serial = "serial";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string _SearchPanel = "_SearchPanel";
                public readonly string Index = "Index";
                public readonly string OrderPicking = "OrderPicking";
                public readonly string RenderAction = "RenderAction";
                public readonly string VerifyOrder = "VerifyOrder";
                public readonly string ViewOrder = "ViewOrder";
            }
            public readonly string _SearchPanel = "~/Views/Pickup/_SearchPanel.cshtml";
            public readonly string Index = "~/Views/Pickup/Index.cshtml";
            public readonly string OrderPicking = "~/Views/Pickup/OrderPicking.cshtml";
            public readonly string RenderAction = "~/Views/Pickup/RenderAction.cshtml";
            public readonly string VerifyOrder = "~/Views/Pickup/VerifyOrder.cshtml";
            public readonly string ViewOrder = "~/Views/Pickup/ViewOrder.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_PickupController : Hanodale.WebUI.Controllers.PickupController
    {
        public T4MVC_PickupController() : base(Dummy.Instance) { }

        [NonAction]
        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string id, bool readOnly);

        [NonAction]
        public override System.Web.Mvc.ActionResult Index(string id, bool readOnly)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "readOnly", readOnly);
            IndexOverride(callInfo, id, readOnly);
            return callInfo;
        }

        [NonAction]
        partial void BindPickupOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, Hanodale.WebUI.Models.DataTableModel param, string myKey);

        [NonAction]
        public override System.Web.Mvc.ActionResult BindPickup(Hanodale.WebUI.Models.DataTableModel param, string myKey)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.BindPickup);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "param", param);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "myKey", myKey);
            BindPickupOverride(callInfo, param, myKey);
            return callInfo;
        }

        [NonAction]
        partial void RenderActionOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, bool readOnly);

        [NonAction]
        public override System.Web.Mvc.JsonResult RenderAction(bool readOnly)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.RenderAction);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "readOnly", readOnly);
            RenderActionOverride(callInfo, readOnly);
            return callInfo;
        }

        [NonAction]
        partial void AcceptOrderOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, string id);

        [NonAction]
        public override System.Web.Mvc.JsonResult AcceptOrder(string id)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.AcceptOrder);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            AcceptOrderOverride(callInfo, id);
            return callInfo;
        }

        [NonAction]
        partial void EditOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, string id, bool readOnly);

        [NonAction]
        public override System.Web.Mvc.JsonResult Edit(string id, bool readOnly)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.Edit);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "readOnly", readOnly);
            EditOverride(callInfo, id, readOnly);
            return callInfo;
        }

        [NonAction]
        partial void OrderPickingOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, string id, bool readOnly);

        [NonAction]
        public override System.Web.Mvc.JsonResult OrderPicking(string id, bool readOnly)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.OrderPicking);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "readOnly", readOnly);
            OrderPickingOverride(callInfo, id, readOnly);
            return callInfo;
        }

        [NonAction]
        partial void VerifyOrderOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, string id, bool readOnly);

        [NonAction]
        public override System.Web.Mvc.JsonResult VerifyOrder(string id, bool readOnly)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.VerifyOrder);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "id", id);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "readOnly", readOnly);
            VerifyOrderOverride(callInfo, id, readOnly);
            return callInfo;
        }

        [NonAction]
        partial void ScanOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, int orderId, string serial);

        [NonAction]
        public override System.Web.Mvc.JsonResult Scan(int orderId, string serial)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.Scan);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "orderId", orderId);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "serial", serial);
            ScanOverride(callInfo, orderId, serial);
            return callInfo;
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591
