@model Hanodale.WebUI.Models.ProductWeightBarcodeModel
@using Hanodale.Utility.Globalize
@using Hanodale.WebUI
@using System.Web.Optimization
@{
    ViewBag.Title = "Create";
    Layout = null;
}

<!-- Hidden Variable -->
<input type="hidden" id="MSG_CONFIRM_SAVE" value="@Html.GetGlobalResource("MSG_CONFIRM_SAVE")">
<input type="hidden" id="MSG_CONFIRM_UPDATE" value="@Html.GetGlobalResource("MSG_CONFIRM_UPDATE")">
<input type="hidden" id="form-congif" value="productweightbarcode" data-readOnly="@Model.readOnly">
<!-- Hidden Variable -->

<div class="widget-body">
</div>

<div id="content" style="opacity: 1; border: none">
    <div class="row-flex">
        <div class="col-xs-12 col-sm-7 col-md-7 col-lg-4">
            <h1 class="page-title txt-color-blueDark">
                <i class="fa fa-edit fa-fw "></i>

                @if (Model.isEdit && !Model.readOnly)
                {
                    @Html.GetGlobalResource("PAGE_HEADER_EDIT_PRODUCTWEIGHTBARCODE")
                }
                else if (!Model.isEdit && !Model.readOnly)
                {
                    @Html.GetGlobalResource("PAGE_HEADER_CREATE_PRODUCTWEIGHTBARCODE")
                }
                else if (Model.readOnly)
                {
                    @Html.GetGlobalResource("PAGE_HEADER_VIEW_PRODUCTWEIGHTBARCODE")
                }
            </h1>
        </div>
    </div>


    <div class="formSpliter"></div>
    <!-- widget grid -->
    <section id="widget-grid" class="">

        <div class="row">
            <div id="message" class="alert alert-success" style="display: none"></div>
            @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "validation-form", @class = "form-horizontal" }))
            {  @Html.AntiForgeryToken()
                @Html.ValidationSummary(true)
                @Html.HiddenFor(model => model.id)

                <article class="col-sm-12 col-md-12 col-lg-12 sortable-grid ui-sortable">

                    <!-- Widget ID (each widget will need unique ID)-->
                    <!-- end widget -->

                    <div class="jarviswidget jarviswidget-sortable" id="wid-id-1" data-widget-colorbutton="false" data-widget-editbutton="false" data-widget-custombutton="false" style="" role="widget">

                        <header role="heading">
                            <div class="jarviswidget-ctrls" role="menu"><a href="javascript:void(0);" class="button-icon jarviswidget-fullscreen-btn" rel="tooltip" title="" data-placement="bottom" data-original-title="Fullscreen"><i class="fa fa-expand "></i></a></div>

                            <span class="widget-icon"><i class="fa fa-edit"></i></span>
                            <h2>@Html.GetGlobalResource("PRODUCTWEIGHTBARCODE_INFO")</h2>
                            <span class="jarviswidget-loader"><i class="fa fa-refresh fa-spin"></i></span>
                        </header>

                        <!-- widget div-->
                        <div role="content">

                            <!-- widget edit box -->
                            <div class="jarviswidget-editbox">
                                <!-- This area used as dropdown edit box -->

                            </div>
                            <!-- end widget edit box -->
                            <!-- widget content -->
                            <div class="widget-body no-padding">


                                <fieldset>
                                    <div class="smart-form">

                                        @if (Model.epicorePartNo_Metadata.visibilityInCreate)
                                        {

                                            <div class="form-group">
                                                @Html.LabelFor(model => model.epicorePartNo, new { @class = "col-xs-12 col-sm-3 col-md-3 col-lg-2 control-label", })
                                                <div class="col-xs-12 col-sm-6 col-md-6 col-lg-5">
                                                    <div class="clearfix">
                                                        <label class="select">
                                                            @Html.EditorFor(model => model.epicorePartNo, new { @class = "form-control multipleSelect" + Model.epicorePartNo_Metadata.mandatoryClass, dataValue = Model.lstProduct })
                                                            @Html.ValidationMessageFor(m => m.epicorePartNo)
                                                        </label>
                                                    </div>

                                                </div>
                                            </div>
                                        }

                                        @if (Model.description_Metadata.visibilityInCreate)
                                        {
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.description, new { @class = "col-xs-12 col-sm-3 col-md-3 col-lg-2 control-label", })

                                                <div class="col-xs-12 col-sm-6 col-md-6 col-lg-5">
                                                    <div class="clearfix">
                                                        <label class="input">
                                                            <i class="icon-append fa fa-pencil"></i>
                                                            @Html.EditorFor(model => model.description, new { @class = "form-control" + Model.description_Metadata.mandatoryClass, @placeholder = @Html.DisplayNameFor(m => m.description) })
                                                            @Html.ValidationMessageFor(m => m.description)
                                                        </label>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                        @if (Model.fullBarcode_Metadata.visibilityInCreate)
                                        {
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.fullBarcode, new { @class = "col-xs-12 col-sm-3 col-md-3 col-lg-2 control-label", })
                                                <div class="col-xs-12 col-sm-6 col-md-6 col-lg-5">
                                                    <div class="clearfix">
                                                        <label class="input">
                                                            <i class="icon-append fa fa-pencil"></i>
                                                            @Html.EditorFor(model => model.fullBarcode, new { id = "fullBarcode", @class = "form-control" + Model.fullBarcode_Metadata.mandatoryClass, @placeholder = @Html.DisplayNameFor(m => m.fullBarcode) })
                                                            @Html.ValidationMessageFor(m => m.fullBarcode)
                                                        </label>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                        @if (Model.barcodeLength_Metadata.visibilityInCreate)
                                        {
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.barcodeLength, new { @class = "col-xs-12 col-sm-3 col-md-3 col-lg-2 control-label", })
                                                <div class="col-xs-12 col-sm-6 col-md-6 col-lg-5">
                                                    <div class="clearfix">
                                                        <label class="input">
                                                            <i class="icon-append fa fa-pencil"></i>
                                                            @Html.EditorFor(model => model.barcodeLength, new { @class = "form-control" + Model.barcodeLength_Metadata.mandatoryClass, @placeholder = @Html.DisplayNameFor(m => m.barcodeLength) })
                                                            @Html.ValidationMessageFor(m => m.barcodeLength)
                                                        </label>
                                                    </div>
                                                </div>
                                            </div>
                                        }

                                        @if (Model.barcodeFromPos_Metadata.visibilityInCreate)
                                        {
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.barcodeFromPos, new { @class = "col-xs-12 col-sm-3 col-md-3 col-lg-2 control-label", })
                                                <div class="col-xs-12 col-sm-6 col-md-6 col-lg-5">
                                                    <div class="clearfix">
                                                        <label class="input">
                                                            <i class="icon-append fa fa-pencil"></i>
                                                            @Html.EditorFor(model => model.barcodeFromPos, new { @class = "form-control" + Model.barcodeFromPos_Metadata.mandatoryClass, @placeholder = @Html.DisplayNameFor(m => m.barcodeFromPos) })
                                                            @Html.ValidationMessageFor(m => m.barcodeFromPos)
                                                        </label>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                        @if (Model.barcodeToPos_Metadata.visibilityInCreate)
                                        {
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.barcodeToPos, new { @class = "col-xs-12 col-sm-3 col-md-3 col-lg-2 control-label", })
                                                <div class="col-xs-12 col-sm-6 col-md-6 col-lg-5">
                                                    <div class="clearfix">
                                                        <label class="input">
                                                            <i class="icon-append fa fa-pencil"></i>
                                                            @Html.EditorFor(model => model.barcodeToPos, new { @class = "form-control" + Model.barcodeToPos_Metadata.mandatoryClass, @placeholder = @Html.DisplayNameFor(m => m.barcodeToPos) })
                                                            @Html.ValidationMessageFor(m => m.barcodeToPos)
                                                        </label>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                        @if (Model.barcode_Metadata.visibilityInCreate)
                                        {
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.barcode, new { @class = "col-xs-12 col-sm-3 col-md-3 col-lg-2 control-label", })
                                                <div class="col-xs-12 col-sm-6 col-md-6 col-lg-5">
                                                    <div class="clearfix">
                                                        <label class="input">
                                                            <i class="icon-append fa fa-pencil"></i>
                                                            @Html.HiddenFor(model => model.barcode1, new {id= "barcode1", @class = "form-control", @placeholder = @Html.DisplayNameFor(m => m.barcode) })

                                                            @Html.EditorFor(model => model.barcode, new { id = "barcode", @class = "form-control" + Model.barcode_Metadata.mandatoryClass, @placeholder = @Html.DisplayNameFor(m => m.barcode) })
                                                            @Html.ValidationMessageFor(m => m.barcode)
                                                        </label>
                                                    </div>
                                                </div>
                                            </div>
                                        }

                                        @if (Model.weightFromPos_Metadata.visibilityInCreate)
                                        {
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.weightFromPos, new { @class = "col-xs-12 col-sm-3 col-md-3 col-lg-2 control-label", })
                                                <div class="col-xs-12 col-sm-6 col-md-6 col-lg-5">
                                                    <div class="clearfix">
                                                        <label class="input">
                                                            <i class="icon-append fa fa-pencil"></i>
                                                            @Html.EditorFor(model => model.weightFromPos, new { id= "weightFromPos", @class = "form-control" + Model.weightFromPos_Metadata.mandatoryClass, @placeholder = @Html.DisplayNameFor(m => m.weightFromPos) })
                                                            @Html.ValidationMessageFor(m => m.weightFromPos)
                                                        </label>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                        @if (Model.weightToPos_Metadata.visibilityInCreate)
                                        {
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.weightToPos, new { @class = "col-xs-12 col-sm-3 col-md-3 col-lg-2 control-label", })
                                                <div class="col-xs-12 col-sm-6 col-md-6 col-lg-5">
                                                    <div class="clearfix">
                                                        <label class="input">
                                                            <i class="icon-append fa fa-pencil"></i>
                                                            @Html.EditorFor(model => model.weightToPos, new { id= "weightToPos", @class = "form-control" + Model.weightToPos_Metadata.mandatoryClass, @placeholder = @Html.DisplayNameFor(m => m.weightToPos) })
                                                            @Html.ValidationMessageFor(m => m.weightToPos)
                                                        </label>
                                                    </div>
                                                </div>
                                            </div>
                                        }


                                        @if (Model.weightMultiply_Metadata.visibilityInCreate)
                                        {
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.weightMultiply, new { @class = "col-xs-12 col-sm-3 col-md-3 col-lg-2 control-label", })
                                                <div class="col-xs-12 col-sm-6 col-md-6 col-lg-5">
                                                    <div class="clearfix">
                                                        <label class="input">
                                                            <i class="icon-append fa fa-pencil"></i>
                                                            @Html.EditorFor(model => model.weightMultiply, new { id= "weightMultiply", @class = "form-control" + Model.weightMultiply_Metadata.mandatoryClass, @placeholder = @Html.DisplayNameFor(m => m.weightMultiply) })
                                                            @Html.ValidationMessageFor(m => m.weightMultiply)
                                                        </label>
                                                    </div>
                                                </div>
                                            </div>
                                        }

                                        @if (Model.offSet1_Metadata.visibilityInCreate)
                                        {
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.offSet1, new { @class = "col-xs-12 col-sm-3 col-md-3 col-lg-2 control-label", })
                                                <div class="col-xs-12 col-sm-6 col-md-6 col-lg-5">
                                                    <div class="clearfix">
                                                        <label class="input">
                                                            <i class="icon-append fa fa-pencil"></i>
                                                            @Html.EditorFor(model => model.offSet1, new { @class = "form-control" + Model.offSet1_Metadata.mandatoryClass, @placeholder = @Html.DisplayNameFor(m => m.offSet1) })
                                                            @Html.ValidationMessageFor(m => m.offSet1)
                                                        </label>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                        @if (Model.offSet2_Metadata.visibilityInCreate)
                                        {
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.offSet2, new { @class = "col-xs-12 col-sm-3 col-md-3 col-lg-2 control-label", })
                                                <div class="col-xs-12 col-sm-6 col-md-6 col-lg-5">
                                                    <div class="clearfix">
                                                        <label class="input">
                                                            <i class="icon-append fa fa-pencil"></i>
                                                            @Html.EditorFor(model => model.offSet2, new { @class = "form-control" + Model.offSet2_Metadata.mandatoryClass, @placeholder = @Html.DisplayNameFor(m => m.offSet2) })
                                                            @Html.ValidationMessageFor(m => m.offSet2)
                                                        </label>
                                                    </div>
                                                </div>
                                            </div>
                                        }

                                        @if (Model.weightValue_Metadata.visibilityInCreate)
                                        {
                                            <div class="form-group">
                                                @Html.LabelFor(model => model.weightValue, new { @class = "col-xs-12 col-sm-3 col-md-3 col-lg-2 control-label", })
                                                <div class="col-xs-12 col-sm-6 col-md-6 col-lg-5">
                                                    <div class="clearfix">
                                                        <label class="input">
                                                            <i class="icon-append fa fa-pencil"></i>
                                                            @Html.EditorFor(model => model.weightValue1, new { @class = "form-control", @placeholder = @Html.DisplayNameFor(m => m.weightValue) })

                                                            @Html.HiddenFor(model => model.weightValue, new { @class = "form-control" + Model.weightValue_Metadata.mandatoryClass, @placeholder = @Html.DisplayNameFor(m => m.weightValue) })
                                                            @Html.ValidationMessageFor(m => m.weightValue)
                                                            <span id="error-message" style="color: red;"></span>

                                                        </label>
                                                    </div>
                                                </div>
                                            </div>
                                        }

                                    </div>
                                </fieldset>

                            </div>
                            <!-- end widget content -->

                        </div>
                        <!-- end widget div -->

                    </div>
                </article>


                <article class="col-sm-12 col-md-12 col-lg-12 sortable-grid ui-sortable">

                    <!-- Widget ID (each widget will need unique ID)-->
                    <!-- end widget -->

                    <div class="jarviswidget jarviswidget-color-blueDark jarviswidget-sortable" id="wid-id-5" data-widget-colorbutton="false" data-widget-editbutton="false" data-widget-custombutton="false" style="" role="widget">


                        <!-- widget div-->
                        <div role="content">

                            <!-- widget edit box -->
                            <div class="jarviswidget-editbox">
                                <!-- This area used as dropdown edit box -->

                            </div>
                            <!-- end widget edit box -->
                            <!-- widget content -->
                            <div class="widget-body no-padding">
                                <footer id="btnSection">
                                    <div class="form-group">

                                        <div class="col-md-2"></div>
                                        <div class="col-xs-12 col-sm-10 col-md-10 col-lg-10">

                                            @if (!@Model.readOnly)
                                            {
                                                <button id="update-productweightbarcode" class="btn btn-sm btn-primary" data-value="update" type="button" style="@(Model.isEdit ? "" : "display: none")">
                                                    <i class="fa fa-pencil"></i>
                                                    @Html.GetGlobalResource("BTN_UPDATE")
                                                </button>
                                                if (!Model.isEdit)
                                                {
                                                    <button id="save-productweightbarcode" class="btn btn-sm btn-primary" data-value="save" type="button">
                                                        <i class="fa fa-save"></i>
                                                        @Html.GetGlobalResource("BTN_SAVE")
                                                    </button>
                                                }
                                                <button class="btn btn-sm btn-primary" type="reset">
                                                    <i class="fa fa-refresh"></i>
                                                    @Html.GetGlobalResource("BTN_RESET")
                                                </button>
                                            }
                                            <button id="back-productweightbarcode" class="btn btn-sm btn-primary" type="button" data-url="ProductWeightBarcode/Index">
                                                <i class="fa fa-mail-reply"></i>
                                                @Html.GetGlobalResource("BTN_BACK")
                                            </button>
                                        </div>
                                    </div>
                                </footer>
                            </div>
                            <!-- end widget content -->

                        </div>
                        <!-- end widget div -->

                    </div>
                </article>

            }




        </div>

        <!-- END ROW -->
        <!-- NEW ROW -->
        <!-- END ROW-->

    </section>



</div>
<script>
    $(document).ready(function () {
        @if (!Model.isEdit && !Model.readOnly)
        {
            <text>
                $('#weightMultiply').val('0.00');
            </text>
        }

        // Function to extract and log the substring
        function extractWeightFromBarcode() {
            var text = $('#fullBarcode').val();

            // Check if the value is not undefined or empty
            if (text) {
                // Convert input values to integers for proper substring usage
                var startPos = parseInt($('#barcodeFromPos').val(), 10);
                var endPos = parseInt($('#barcodeToPos').val(), 10);

                // Check if startPos and endPos are valid numbers
                if (!isNaN(startPos) && !isNaN(endPos)) {
                    // Extracting the substring
                    var extractedText = text.substring(startPos, endPos);

                    $('#barcode').val(extractedText);
                    $('#barcode1').val(extractedText);
                    $('#barcode1').prop('disabled', true);

                } else {
                    $('#barcode').val('');
                    $('#barcode1').val('');
                }
            } else {
                console.log("Barcode value is undefined or empty");
            }
        }

        // Call the function on change of the Barcode, WeightFromPosition, or WeightToPosition fields
        $('#barcode, #barcodeFromPos, #barcodeToPos').on('change', function () {
            extractWeightFromBarcode();
        });

        $("#barcodeToPos").on('change', function () {
            var barcodeToPos = parseInt($('#barcodeToPos').val()); // Convert to integer
            var fullBarcode = parseInt($("#fullBarcode").val()); // Convert to integer

            // Check if the entered code is greater than or equal to the barcode length
            if (barcodeToPos >= fullBarcode.lenght) {
                $('#barcodeToPos').val(""); // Clear the input field
                $("#error-message").text("Barcode To Pos cannot be longer than Barcode length.");
            } else {
                $("#error-message").text(""); // Clear error message if valid
            }
        });
        $('#barcode, #weightFromPos, #weightToPos , #weightMultiply').on('change', function () {

            calculateWeightValue();
        });
        function calculateWeightValue() {
            var weightMultiply = parseFloat($("#weightMultiply").val()); // Get Weight Multiplier
            var barcode = $("#barcode").val(); // Get the barcode
            var weightFromPos = parseInt($("#weightFromPos").val()); // Get Weight From position
            var weightToPos = parseInt($("#weightToPos").val()); // Get Weight To position
            var weightValue = 0;

            // Check for valid input values
            if (isNaN(weightMultiply) || isNaN(weightFromPos) || isNaN(weightToPos) || barcode === '') {
                $("#error-message").text("Please fill out all fields correctly.");
                return;
            }

            // Extract substring from the barcode based on Weight From and To positions
            var extractedWeightStr = barcode.substring(weightFromPos, weightToPos);
            // Convert the extracted part to a number
            var extractedWeight = parseFloat(extractedWeightStr);

            // Validate that the extracted weight is a number
            if (isNaN(extractedWeight)) {
                $("#error-message").text("Invalid barcode segment extracted for weight.");
                return;
            }

            // Calculate the weight value by multiplying the extracted weight with the multiplier
            weightValue = extractedWeight * weightMultiply;
           // alert(weightValue);
            // Display the calculated weight value in the disabled textbox
            $("#weightValue1").val(weightValue.toFixed(2)); // Fix the result to 2 decimal places
            $("#weightValue").val(weightValue.toFixed(2)); // Fix the result to 2 decimal places
            $('#weightValue1').prop('disabled', true);
            // Clear any error message
            $("#error-message").text("");
        }


        $('#save-productcarton').on('click', function (e) {

        });

    });


</script>

<!-- Protected Script -->
@Scripts.Render(bundles.scripts.common_add_edit)
@Scripts.Render("~/bundles/jqueryval")
<!-- /.page-content -->
