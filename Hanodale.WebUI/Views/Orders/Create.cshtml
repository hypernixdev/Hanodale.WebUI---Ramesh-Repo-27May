@model Hanodale.WebUI.Models.EditOrderModel
@using Newtonsoft.Json
@using Hanodale.Utility.Globalize
@using Hanodale.WebUI
@using System.Web.Optimization

@{
    ViewBag.Title = "Index";
    Layout = null;
    var creditHold = Model.creditHold;
    bool showDiscountButton = Model.OrderItems.Any() == true && Model.OrderItems.Sum(item => item.discountAmt) > 0;
}
<style>
    .button-common {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        border-radius: 5px;
        min-width: 110px;
        height: 30px;
        color: white;
        border: none;
    }

    .i-common {
        margin-right: 5px; /* Adjusts spacing between icon and text */
    }

    .span-common {
        display: inline-block;
        vertical-align: middle;
    }
</style>

<style>
    .table thead tr th, tbody tr td {
        word-break: normal;
    }
</style>
@if (Model.creditHold == true)
{
    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 nPadding" style="background-color:red;color:white;font-weight:bold">
        <h5 class="page-title">
            Credit On Hold
        </h5>
    </div>
}
<div class="container-fluid" id="orders-create">
    <div class="col-xs-12 col-sm-7 col-md-7 col-lg-4 nPadding">
        <h1 class="page-title txt-color-blueDark">
            <i class="fa fa-table fa-fw "></i>
            @(Model.isEdit ? "Manage Order" : "Create Order")
        </h1>
    </div>
    @if (Model.isEdit)
    {
        <div class="row mb-3">
            <div class="col-md-4">
                <label for="orderNo">Order No</label>
                <div class="input-group">
                    <input type="text" class="form-control" id="orderNo" value="@Html.Raw(Model.orderNum)" disabled>
                </div>
            </div>
        </div>

        <!-- New row for Submitted by and Submitted Date -->
        <div class="row mb-3">
            <div class="col-md-4">
                <label for="submittedBy">Submitted By</label>
                <span class="form-control" id="submittedBy" @(Model.orderStatus == "Completed" || Model.orderStatus == "Cancelled" || Model.IsCashierLogin ? "disabled" : "")>@Model.entryPerson</span>
            </div>
            <div class="col-md-4">
                <label for="submittedDate">Submitted Date</label>
                <span class="form-control" id="submittedDate" @(Model.orderStatus == "Completed" || Model.orderStatus == "Cancelled" || Model.IsCashierLogin ? "disabled" : "")>@Model.orderDate</span>
            </div>
            <div class="col-md-4">
                <label for="submittedDate">Current Status</label>
                <span class="form-control" id="orderStatus" @(Model.orderStatus == "Completed" || Model.orderStatus == "Cancelled" || Model.IsCashierLogin ? "disabled" : "")>@Model.orderStatus</span>
            </div>
        </div>
    }

    <div class="row mb-3">
        @*<div class="col-md-4">
                <label for="orderNo">Order No</label>
                <div class="input-group">
                    <input type="text" class="form-control" id="orderNo" autocomplete="off" readonly>
                </div>
            </div>*@
        <div class="col-md-4">
            <label for="customer">Customer</label>
            <div class="input-group selectCustomerContainer">
                @*<select class="form-control selectCustomer" id="customer" @(Model.orderStatus == "Completed" ? "disabled" : "")>
                    </select>
                    <input type="hidden" class="selectCustomer" @(Model.orderStatus == "Completed" || Model.orderStatus == "Cancelled" ||Model.IsCashierLogin ? "disabled" : "")  />*@
                <input type="text" class="form-control" readonly id="customerName" value="@Model.customerName" />
                <input type="hidden" name="customer" id="customer" value="@Model.customer_Id" />
                <span class="input-group-append">
                    @* <button style="margin:0px; padding: 0px 12px;" class="btn btn-success" id="btnCustomerPicker" type="button">Browse</button>*@

                    <button id="btnCustomerPicker" style="margin:0px; padding: 0px 12px;" class="btn btn-success button-common" type="button" @(Model.orderStatus == "Completed" || Model.orderStatus == "Cancelled" || Model.IsCashierLogin ? "disabled" : "")>

                        Browse
                    </button>
                </span>
            </div>
        </div>

        <div class="col-md-4">
            <label for="shipTo">Ship To</label>
            <select class="form-control selectShipTo" id="shipTo" @(Model.orderStatus == "Completed" || Model.orderStatus == "Cancelled" || Model.IsCashierLogin ? "disabled" : "")>
                <option>Select Ship To</option>
            </select>
        </div>
        @if (Model.isEdit)
        {
            <div class="col-md-4">
                <label for="orderDate">Order Date</label>
                <input type="text" class="form-control" id="orderDate" placeholder="dd/MM/yyyy" autocomplete="off" @(Model.orderStatus == "Completed" || Model.orderStatus == "Cancelled" || Model.IsCashierLogin ? "readonly" : "")>
            </div>
        }
        else
        {
            <div class="col-md-4">
                <label for="orderDate">Order Date</label>
                <input type="text" class="form-control" id="orderDate" placeholder="dd/MM/yyyy" autocomplete="off">
            </div>
        }
    </div>

    <!-- Customer search starts -->
    <article class="col-sm-12 col-md-12 col-lg-12 sortable-grid ui-sortable nPadding customerPicker" style="display:none;">

        <div class="jarviswidget jarviswidget-sortable" id="wid-id-110" data-widget-colorbutton="false" data-widget-editbutton="false" data-widget-custombutton="false" style="" role="widget">
            <header role="heading">
                <div class="jarviswidget-ctrls" role="menu">
                    <a href="#" class="button-icon closecustomerPicker" rel="tooltip" title="" data-placement="bottom" data-original-title="Collapse"><i class="fa fa-times "></i></a>
                </div>
                <h2>Search Panel </h2>
                <span class="jarviswidget-loader"><i class="fa fa-refresh fa-spin"></i></span>
            </header>

            <!-- widget div-->
            <div role="content">
                <div class="card">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-4 mb-2">
                                <label for="searchName">Name</label>
                                <input type="text" class="form-control" id="searchName" placeholder="Enter Name">
                            </div>
                            <div class="col-md-4 mb-2">
                                <label for="searchCustomerCode">CustId</label>
                                <input type="text" class="form-control" id="searchCustomerCode" placeholder="Enter CustId">
                            </div>
                            <div class="col-md-4 mb-2">
                                <label for="searchCity">City</label>
                                <input type="text" class="form-control" id="searchCity" placeholder="Enter City">
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-4 mb-2">
                                <label for="searchState">State</label>
                                <input type="text" class="form-control" id="searchState" placeholder="Enter State">
                            </div>
                        </div>

                        <div class="row mt-2">
                            <div class="col-12">
                                <button class="btn btn-primary" id="btnSearchCustomer">Search</button>
                                <button class="btn btn-secondary" id="btnResetCustomer">Reset</button>
                            </div>
                        </div>
                    </div>

                    <table id="dt_customer_picker" class="table table-striped table-bordered" style="width: 100%">
                        <thead class="bg-light">
                            <tr>
                                <th>Action</th>
                                <th hidden>Id</th>
                                <th>CustId</th>
                                <th>Name</th>
                                <th>Address1</th>
                                <th>Address2</th>
                                <th>City</th>
                                <th>State</th>
                            </tr>
                        </thead>
                        <tbody>

                            <!-- More rows as needed -->
                        </tbody>
                    </table>
                </div>

            </div> <!-- content end -->
        </div>
    </article>

    <!-- end Customer search -->

    <div class="row mb-3">
        <div class="col-md-4">
            <div class="form-check">
                <input name="oneTimeCustomer" class="form-check-input" type="checkbox" id="oneTimeCustomer" @(Model.orderStatus == "Completed" || Model.orderStatus == "Cancelled" || Model.IsCashierLogin ? "disabled" : "") @(Model.oneTimeCustomer ? "checked" : "")>
                <label class="form-check-label" for="oneTimeCustomer">One Time Customer</label>
            </div>
        </div>
    </div>

    <!-- Hidden Fields for Contact, Name, and Phone -->
    <div class="row mb-3" id="oneTimeCustomerFields" style="@(Model.oneTimeCustomer ? "" : "display: none;")">
        <div class="col-md-4">
            <label for="orderContact">Contact</label>
            <input @(Model.orderStatus == "Completed" || Model.orderStatus == "Cancelled" || Model.IsCashierLogin ? "disabled" : "") type="text" class="form-control" id="orderContact" placeholder="Enter Contact" value="@Model.orderContact">
        </div>
        <div class="col-md-4">
            <label for="orderContactName">Name</label>
            <input @(Model.orderStatus == "Completed" || Model.orderStatus == "Cancelled" || Model.IsCashierLogin ? "disabled" : "") type="text" class="form-control" id="orderContactName" placeholder="Enter Name" value="@Model.orderContactName">
        </div>
        <div class="col-md-4">
            <label for="orderContactPhone">Phone</label>
            <input @(Model.orderStatus == "Completed" || Model.orderStatus == "Cancelled" || Model.IsCashierLogin ? "disabled" : "") type="text" class="form-control" id="orderContactPhone" placeholder="Enter Phone Number" value="@Model.orderContactPhone">
        </div>
    </div>


    <div class="row mb-3">
        <div class="col-md-4">
            <label for="District">District</label>
            <select class="form-control selectDistrict" id="District" @(Model.orderStatus == "Completed" || Model.orderStatus == "Cancelled" || Model.IsCashierLogin ? "disabled" : "")>
                <option>Select District</option>
            </select>
        </div>

        <div class="col-md-4">
            <label for="remarks">Remarks</label>
            <textarea @(Model.orderStatus == "Completed" || Model.orderStatus == "Cancelled" || Model.IsCashierLogin ? "disabled" : "") class="form-control" id="remarks" rows="3" placeholder="Enter remarks here">@Model.orderComment</textarea>
        </div>

    </div>


    @if (Model.verifiedStatus == "Pass" && Model.isEdit)
    {
        <div class="row mb-3">
            <div class="col-md-4">
                <label for="submittedBy">Verified By</label>
                <span class="form-control" id="submittedBy" @(Model.orderStatus == "Completed" || Model.orderStatus == "Cancelled" || Model.IsCashierLogin ? "disabled" : "")>@Model.verifiedBy</span>
            </div>
            <div class="col-md-4">
                <label for="submittedDate">Verified Date</label>
                <span class="form-control" id="submittedDate" @(Model.orderStatus == "Completed" || Model.orderStatus == "Cancelled" || Model.IsCashierLogin ? "disabled" : "")>@Model.verifiedDate</span>
            </div>
            <div class="col-md-4">
                <label for="submittedDate">Verified Status</label>
                <span class="form-control" id="submittedDate" @(Model.orderStatus == "Completed" || Model.orderStatus == "Cancelled" || Model.IsCashierLogin ? "disabled" : "")>@Model.verifiedStatus</span>
            </div>
        </div>
    }

    <div class="row mb-3">
        @*<div class="col-md-4">
                <label for="priceTier">Price Tier</label>
                <select class="form-control" id="priceTier">
                    <option>Select Price Tier</option>
                </select>
            </div>*@

    </div>

    <div class="row mb-3 align-items-end" id="AfterSubmitVisible">
        <div class="col-md-6">
            <h4>Product List</h4>
        </div>
        @if (Model.orderStatus != "Cancelled" && Model.orderStatus != "Completed" && !Model.IsCashierLogin)
        {
            <div class="col-md-6">
                <div class="input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text">Scan</span>
                    </div>
                    <input type="text" class="form-control" id="productSearch" autocomplete="off">
                    <div class="input-group-append2">
                        <button class="btn btn-success button-common" type="button" id="btnAddProduct">Add</button>
                        <button class="btn btn-primary button-common" type="button" id="btnAdd">Browse</button>
                    </div>
                </div>
            </div>
        }

    </div>
    @if (Model.orderStatus != "Cancelled" && Model.orderStatus != "Completed" && !Model.IsCashierLogin)
    {
        <div class="row mb-3 align-items-end">
            <div class="col-md-6">

            </div>
            <div class="col-md-6">
                <div class="input-group">

                    <span style="font-size:x-small">Please Click Enter or Add button to Proceed..</span>

                </div>
            </div>

        </div>
    }

    <!-- Product search starts -->
    <article class="col-sm-12 col-md-12 col-lg-12 sortable-grid ui-sortable nPadding productPicker" style="display:none;">

        <div class="jarviswidget jarviswidget-sortable" id="wid-id-110" data-widget-colorbutton="false" data-widget-editbutton="false" data-widget-custombutton="false" style="" role="widget">
            <header role="heading">
                <div class="jarviswidget-ctrls" role="menu">
                    <a href="javascript:void(0);" class="button-icon closeProductPicker" rel="tooltip" title="" data-placement="bottom" data-original-title="Collapse"><i class="fa fa-times "></i></a>
                </div>
                <h2>Search Panel </h2>
                <span class="jarviswidget-loader"><i class="fa fa-refresh fa-spin"></i></span>
            </header>

            <!-- widget div-->
            <div role="content">
                <div class="card">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-4 mb-2">
                                <label for="searchPartNo">Part No</label>
                                <input type="text" class="form-control" id="searchPartNo" placeholder="Enter Part No">
                            </div>
                            <div class="col-md-4 mb-2">
                                <label for="searchCode">Code</label>
                                <input type="text" class="form-control" id="searchCode" placeholder="Enter Code">
                            </div>
                            <div class="col-md-4 mb-2">
                                <label for="searchDesc">Part Name</label>
                                <input type="text" class="form-control" id="searchDesc" placeholder="Enter Part Name">
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-4 mb-2">
                                <label for="searchBrand">Brand</label>
                                <input type="text" class="form-control" id="searchBrand" placeholder="Enter Brand">
                            </div>
                            <div class="col-md-4 mb-2">
                                <label for="searchOrigin">Origin</label>
                                <input type="text" class="form-control" id="searchOrigin" placeholder="Enter Origin">
                            </div>
                            <div class="col-md-4 mb-2">
                                <label for="searchTemperature">Temperature</label>
                                <input type="text" class="form-control" id="searchTemperature" placeholder="Enter Temperature">
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-4 mb-2">
                                <label for="searchPartGroup">Part Group</label>
                                <input type="text" class="form-control" id="searchPartGroup" placeholder="Enter Part Group">
                            </div>
                            <div class="col-md-4 mb-2">
                                <label for="searchPartClass">Part Class</label>
                                <input type="text" class="form-control" id="searchPartClass" placeholder="Enter Part Class">
                            </div>
                        </div>

                        <div class="row mt-2">
                            <div class="col-12">
                                <button class="btn btn-primary" id="btnSearch">Search</button>
                                <button class="btn btn-secondary" id="btnReset">Reset</button>
                            </div>
                        </div>
                    </div>

                    <table id="dt_product_picker" class="table table-striped table-bordered" style="width: 100%">
                        <thead class="bg-light">
                            <tr>
                                @*<th>Action</th>*@
                                <th><input type="checkbox" id="selectAll"></th>
                                <th hidden>Id</th>
                                <th>Part No</th>
                                <th>Part Name</th>
                                <th hidden>Code</th>
                                <th>Group</th>
                                <th>UOM</th>
                                <th>Price</th>
                                <th>Avl Qty</th>
                                <th>Qty</th>
                            </tr>
                        </thead>
                        <tbody>

                            <!-- More rows as needed -->
                        </tbody>
                    </table>
                    <div class="row mt-2 mb-2 ml-2">
                        <div class="col-12">
                            <button class="btn btn-primary" id="btnAddToOrders">Add to order</button>
                        </div>
                    </div>
                </div>

            </div> <!-- content end -->
        </div>
    </article>

    <!-- end product search -->

    <div class="table-responsive">
        <!--  d-none d-md-block -->
        <table id="dt2_product" class="table table-striped table-bordered">
            <thead class="bg-light">
                <tr>
                    <th style="width: 68px;">Action</th>
                    <th hidden>Id</th>
                    <th>LineNo</th>
                    <th>Part No</th>
                    <th>Part Name</th>
                    <th hidden>Code</th>
                    <th>AVW</th>
                    <th>Cutng Type</th>
                    <th>Cutng Cost</th>
                    <th>Created By</th>
                    <th>Unit Price</th>
                    <th>Sub Total</th>
                    <th>Discount(%)</th>
                    <th>UOM</th>
                    <th>Avl Qty</th>
                    <th>Order Qty</th>
                    @if (Model.orderStatus == "Completed")
                    {
                        <th>Return Status</th>
                    }
                    @if (Model.isEdit)
                    {
                        <th>Scanned Qty</th>
                    }
                    <th>Total</th>
                    <th hidden>QtyType_ModuleItem_Id</th>
                    <th hidden>OrderUOM_Id</th>
                    <th hidden>operationStyle_ModuleItem_Id</th>
                    <th hidden>operationCost</th>
                    <th hidden>complimentary_ModuleItem_Id</th>
                    <th hidden>orderItemId</th>
                    <th hidden>Freezer</th>
                </tr>
            </thead>
            <tbody>
                @{
                    int index = 1;  // Initialize the counter variable
                }
                @foreach (var item in Model.OrderItems)
                {
                    <tr>
                        <td>
                            <button data-dbid="@item.itemDbId" class="btn btn-danger btn-sm btn-remove delete-save-history" @(Model.orderStatus == "Completed" || Model.orderStatus == "Cancelled" || Model.IsCashierLogin ? "disabled" : "")><i class="fa fa-times"></i></button>
                            <button class="btn btn-sm btn-success btn-edit" @(Model.orderStatus == "Completed" || Model.orderStatus == "Cancelled" || Model.IsCashierLogin ? "disabled" : "")><i class="fa fa-edit"></i></button>
                        </td>
                        <td hidden>@item.product_Id</td>
                        @*<td class="product-s-no">@index</td>*@
                        <td class="product-orderLine">@item.orderLine</td>
                        <td class="product-id-field" data-id="@item.product_Id">@item.partNum</td>
                        <td class="product-desc-field">@item.lineDesc</td>
                        <td class="product-code" hidden>@item.product_Id</td>
                        <td class="product-allowvaryweight">@item.allowVaryWeight</td>
                        <td class="product-cuttingtype">@item.operationName</td>
                        <td class="product-cuttongcost">@item.operationCost</td>
                        <td class="product-complimentary">@item.createdBy</td>
                        @if (Model.orderStatus == "Completed")
                        {
                            <td>
                                @item.originalUnitPrice
                                <input type="hidden" class="form-control originalUnitPriceInput" value="@item.originalUnitPrice" />
                            </td>
                        }
                        else
                        {
                            <td>
                                <input type="number" class="form-control originalUnitPriceInput" value="@item.originalUnitPrice" @(Model.orderStatus == "Completed" || Model.orderStatus == "Cancelled" || Model.IsCashierLogin ? "readonly" : "") />
                            </td>
                        }

                        <td>
                            <span data-oldunitcost="@item.originalUnitPrice" data-field="price">@item.unitPrice</span>
                            <input type="hidden" name="originalUnitPrice" class="originalUnitPrice" value="@item.originalUnitPrice">
                            <input type="hidden" name="realOriginalUnitPrice" class="realOriginalUnitPrice" value="@item.realOriginalUnitPrice">
                        </td>
                        <td class="product-discountField">
                            <input type="number" class="form-control discountInput" min="0" max="100" step="0.01" value="@item.discountPer" />
                            <input type="hidden" class="discountAmt" value="@item.discountAmt" />
                        </td>

                        <td class="product-orderUOM">@item.salesUm</td>
                        <td class="product-avlQty">@item.avlQty</td>

                        @if (Model.orderStatus == "Completed")
                        {
                            <td>
                                @(item.orderQty.ToString("F2"))
                                <input type="hidden" class="form-control orderQtyInput" data-field="orderQty" value="@item.orderQty.ToString("F2")" />
                            </td>
                            <td class="product-IsReturned">@(item.retQty.ToString("F2"))</td>
                        }
                        else if (!string.IsNullOrEmpty(item.scannedLabel))
                        {
                            @*!string.IsNullOrEmpty(item.scannedLabel) This means Scanned Label Qty should not edit*@
                            <td><input type="number" class="form-control orderQtyInput" data-originalqty="@(item.allowVaryWeight == "Yes" ? item.orderQty.ToString("F2") : item.orderQty.ToString("F0"))" data-field="orderQty" step="@(item.allowVaryWeight == "Yes" ? "0.01" : "1")" value="@(item.allowVaryWeight == "Yes" ? item.orderQty.ToString("F2") : item.orderQty.ToString("F0"))" readonly /></td>
                        }
                        else
                        {


                            <td><input type="number" class="form-control orderQtyInput" data-originalqty="@(item.allowVaryWeight == "Yes" ? item.orderQty.ToString("F2") : item.orderQty.ToString("F0"))" data-field="orderQty" step="@(item.allowVaryWeight == "Yes" ? "0.01" : "1")" value="@(item.allowVaryWeight == "Yes" ? item.orderQty.ToString("F2") : item.orderQty.ToString("F0"))" @(Model.orderStatus == "Completed" || Model.orderStatus == "Cancelled" || Model.IsCashierLogin ? "readonly" : "") /></td>
                        }
                        @if (Model.isEdit)
                        {
                            <td class="product-scannedQty">@item.scannedQty</td>
                        }
                        <td class="product-lineTotal">
                            @(((item.unitPrice * ((item.scannedQty != 0 ? item.scannedQty : item.orderQty) - item.retQty)) + item.operationCost).ToString("F2"))
                        </td>

                        <td class="product-QtyType_ModuleItem_Id" hidden>@item.QtyType_ModuleItem_Id</td>
                        <td class="product-OrderUOM_Id" hidden>@item.OrderUOM_Id</td>
                        <td class="product-operationStyle_ModuleItem_Id" hidden>@item.operationStyle_ModuleItem_Id</td>
                        <td class="product-operationCost" hidden data-actualoperationcost="@item.actualOperationCost" data-conversionFactor="@item.conversionFactor">@item.operationCost</td>
                        <td class="product-complimentary_ModuleItem_Id" hidden>@item.complimentary_ModuleItem_Id</td>
                        <td hidden>
                            <span class="product-orderItemId">@item.orderItemId</span>
                            <span class="product-scannedlabel"> @item.scannedLabel</span>
                            <span class="product-scannedlocation"> @item.scannedLocation</span>

                            <span class="product-comment">@item.comments</span>
                            <span class="product-createdby">@item.createdById</span>
                            <span class="product-createdat">@(item.createdAt.HasValue ? item.createdAt.Value.ToString("yyyy-MM-ddTHH:mm:ss") : "")</span>
                            <span class="product-prodGroup">@item.prodGroup</span>
                            <span class="product-returnTotal">@item.returnTotal</span>
                        </td>
                        <td class="product-freezer" hidden>@item.complimentary_ModuleItem_Id</td>
                        @{
                            index++;
                        }
                    </tr>

                }

            </tbody>

        </table>
    </div>

    @if (Model.OrderItemDeleted != null && Model.OrderItemDeleted.Any())
    {
        <div class="table-responsive">
            <!--  d-none d-md-block -->
            <div class="col-md-6">
                <h4>Deleted Items</h4>
            </div>

            @*<table id="dt2_deleted_product" class="table table-striped table-bordered">
                    <thead class="bg-light">
                        <tr>
                            <th style="width: 68px;">Action</th>
                            <th hidden>Id</th>
                            <th>S.No</th>
                            <th>Part No</th>
                            <th>Part Name</th>
                            <th hidden>Code</th>
                            <th>AVW</th>
                            <th>Cutng Type</th>
                            <th>Cutng Cost</th>
                            <th>Created By</th>
                            <th>Unit Price</th>
                            <th>Sub Total</th>
                            <th>Group</th>
                            <th>UOM</th>
                            <th>Avl Qty</th>
                            <th>Order Qty</th>
                            @if (Model.orderStatus == "Completed")
                            {
                                <th>Return Status</th>
                            }
                            @if (Model.isEdit)
                            {
                                <th>Scanned Qty</th>
                            }
                            <th>Total</th>
                            <th hidden>QtyType_ModuleItem_Id</th>
                            <th hidden>OrderUOM_Id</th>
                            <th hidden>operationStyle_ModuleItem_Id</th>
                            <th hidden>operationCost</th>
                            <th hidden>complimentary_ModuleItem_Id</th>
                            <th hidden>orderItemId</th>
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                </table>*@

            <table id="dt2_product_deleted" class="table table-striped table-bordered">
                <thead class="bg-light">
                    <tr>
                        @*<th style="width: 68px;">Action</th>*@
                        <th hidden>Id</th>
                        <th>S.No</th>
                        <th>Part No</th>
                        <th>Part Name</th>
                        <th>AVW</th>
                        <th>Cutng Type</th>
                        <th>Cutng Cost</th>
                        @*<th>Comp</th>*@
                        <th>Unit Price</th>
                        @*<th>Sub Total</th>*@
                        <th>Deleted By</th>
                        <th>Deleted At</th>
                        <th>UOM</th>
                        <th>Order Qty</th>
                        <th>Scanned Qty</th>
                        <th>Discount(%)</th>
                        <th>Total</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        int index2 = 1;  // Initialize the counter variable
                    }
                    @foreach (var item in Model.OrderItemDeleted)
                    {
                        <tr>
                            @*<td>
                                    <button data-dbid="@item.itemDbId" class="btn btn-danger btn-sm btn-remove delete-save-history" @(Model.orderStatus == "Completed" || Model.orderStatus == "Cancelled" || Model.IsCashierLogin ? "disabled" : "")><i class="fa fa-times"></i></button>
                                    <button class="btn btn-sm btn-success btn-edit" @(Model.orderStatus == "Completed" || Model.orderStatus == "Cancelled" || Model.IsCashierLogin ? "disabled" : "")><i class="fa fa-edit"></i></button>
                                </td>*@
                            <td hidden>@item.product_Id</td>
                            <td class="product-s-no">@index2</td>
                            <td class="product-id-field" data-id="@item.product_Id">@item.partNum</td>
                            <td class="product-desc-field">@item.lineDesc</td>
                            <td class="product-allowvaryweight">@item.allowVaryWeight</td>
                            <td class="product-cuttingtype">@item.operationName</td>
                            <td class="product-cuttongcost">@item.operationCost</td>
                            <td>
                                @item.originalUnitPrice
                                <input type="hidden" class="form-control originalUnitPriceInput" value="@item.originalUnitPrice" />
                            </td>
                            <td>@item.deletedBy</td>
                            <td>@item.deletedAt</td>
                            <td class="product-orderUOM">@item.salesUm</td>
                            <td>@(item.allowVaryWeight == "Yes" ? item.orderQty.ToString("F2") : item.orderQty.ToString("F0"))</td>
                            <td class="product-scannedQty">@item.scannedQty</td>
                            <td class="product-scannedQty">@item.discountPer</td>
                            <td class="product-lineTotal">
                                @(((item.unitPrice * ((item.scannedQty != 0 ? item.scannedQty : item.orderQty) - item.retQty)) + item.operationCost - item.discountAmt).ToString("F2"))
                            </td>
                            @{
                                index2++;
                            }
                        </tr>

                    }

                </tbody>

            </table>
        </div>
    }

    @if (Model.orderStatus == "Completed")
    {
        <div class="row mt-3">
            <div class="col-md-6 offset-md-6 text-right">
                <h4>Order Total: <span id="orderTotal2">@Model.docOrderAmt</span></h4>
            </div>
        </div>
    }
    else
    {
        <div class="row mt-3">
            <div class="col-md-6 offset-md-6 text-right">
                <h4>Order Total: <span id="orderTotal">0.00</span></h4>
            </div>
        </div>
    }

    @if (Model.orderStatus == "Completed")
    {
        <div class="row mt-3 payment-tab">
            <div class="col-md-12">
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <h4>Payment</h4>
                </div>
                <table id="paymentTable" class="table table-bordered">
                    <thead>
                        <tr>
                            <th>Payment Type</th>
                            <th>Bank</th>
                            <th>Reference No</th>
                            <th>Amount</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.OrderPayments != null)
                        {
                            foreach (var payment in Model.OrderPayments.Where(p => p.IsRefund != true))
                            {
                                <tr>
                                    <td>@payment.PaymentType</td>
                                    <td>@payment.Bank</td>
                                    <td>@payment.RefNumber</td>
                                    <td>@payment.Amount</td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
                @if (Model.OrderPayments != null && Model.OrderPayments.Any(p => p.IsRefund))
                {
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <h4>Refunds</h4>
                    </div>
                    <table id="paymentTable" class="table table-bordered">
                        <thead>
                            <tr>
                                <th>Payment Type</th>
                                <th>Bank</th>
                                <th>Reference No</th>
                                <th>Amount</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model.OrderPayments != null)
                            {
                                foreach (var payment in Model.OrderPayments.Where(p => p.IsRefund == true))
                                {
                                    <tr>
                                        <td>@payment.PaymentType</td>
                                        <td>@payment.Bank</td>
                                        <td>@payment.RefNumber</td>
                                        <td>@payment.Amount</td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                }
            </div>
        </div>


        <div class="mt-4">
            <h4>Integration Details</h4>
            <table class="table table-bordered int-table">
                <tbody>
                    <!-- Posting Status and Epicor Response -->
                    <tr>
                        <td>Posting Status</td>
                        <td>
                            @if (!Model.syncStatus && !Model.syncedAt.HasValue)
                            {
                                <span class="text-warning">Not Synced</span>
                            }
                            else
                            {
                                <span class="@(Model.syncStatus ? "text-success" : "text-danger")">
                                    @(Model.syncStatus ? "Success" : "Failed")
                                </span>
                                if (Model.syncedAt.HasValue)
                                {
                                    <span>(@Model.syncedAt.Value.ToString("dd MMM yyyy hh:mm tt"))</span>
                                }
                            }
                        </td>
                        <td>Epicor Response</td>
                        <td>@Model.epicoreResponse</td>
                    </tr>

                    <!-- Epicor Order ID and Ship Pack Number -->
                    <tr>
                        <td>Epicor Order ID</td>
                        <td>@Model.epicoreOrderId</td>
                        <td>Ship Pack Number</td>
                        <td>@Model.shipPackNumber</td>
                    </tr>

                    <!-- Invoice Number and UD16 Key1 -->
                    <tr>
                        <td>Epicor Invoice Number</td>
                        <td>@Model.epicoreInvNumber</td>
                        <td>UD16 Key1</td>
                        <td>@Model.UD16Key1</td>
                    </tr>
                </tbody>
            </table>

            <!-- Post to Epicore Button -->
            @{
                bool enablePostToEpicore = (!Model.syncStatus);
            }
            @if (Model.IsSuperAdminLogin)
            {
                <div class="text-end">
                    <button type="button" data-id="@Model.id" class="btn btn-primary button-common postToEpicore" @(enablePostToEpicore ? "" : "disabled")>
                        Post to Epicore
                    </button>
                </div>
            }
        </div>

    }
    <input type="hidden" class="table-congif" value="orders" data-columncount="11" data-button="true" data-condition="false" data-extended-event-btn="false" data-disall="true" data-auto-hide-column="true" data-export-btn="true" data-filterid="0" data-dest="#d-cp-Order">
    <button class="refreshPage" data-id="@Model.encryptedId" style="display: none;">Reload</button>
    @if (Model.isEdit)
    {
        <div class="row mt-3">
            <div class="col-md-4">
                <button id="btnReceipt" type="button" onclick="loadTableData('receipt',modelData)">Thermal Print</button>
                @if (showDiscountButton)
                {
                    <button onclick="showDiscountModal('@Model.id')">Discount Approval List</button>
                }
                <button id="btnInvoice" hidden type="button" onclick="printReceipt('@Model.id')">Print</button>

            </div>
            <input type="hidden" id="form-congif" value="orders" data-mtc-btn="true" data-readonly="False">
            <div class="col-md-8 text-right">
                @if (!Model.readOnly)
                {
                    if (Model.orderStatus != "Completed" && !Model.IsCashierLogin && Model.orderStatus != "Cancelled")
                    {<select class="form-control d-inline-block w-auto order-action">
                            <option value="SubmitForPicking" @(Model.orderStatus != "Payment" ? "selected" : "")>Submit for Picking</option>
                            <option value="Draft" @(Model.orderStatus == "Draft" ? "selected" : "")>Draft</option>
                            <option value="Payment" @(Model.orderStatus == "Payment" ? "selected" : "")>Submit for Payment</option>
                        </select>
                        <button type="button" class="btn btn-success submit-action button-common" data-id="@Model.id">Submit</button>
                        <button type="button" class="btn btn-success finalsubmit-action button-common" data-id="@Model.id" hidden>Submit</button>
                        <button type="button" class="btn btn-warning update-action button-common" data-id="@Model.id">Update</button>
                    }
                    else
                    {
                        <input type="hidden" class="submit-action" data-id="@Model.id" />
                    }
                    @*if (Model.orderStatus == "Picked" && Model.verifiedStatus != "Pass" && !Model.IsCashierLogin)
            {
                <button type="button" class="btn btn-warning button-common verify-order-action " data-id="@Model.id">Verify Order</button>
            }*@
                }

                @if (Model.syncStatus != true)
                {
                    <button type="button" class="btn btn-danger" id="btnCancelOrder" @(Model.orderStatus == "Cancelled" ? "disabled" : "") data-id="@Model.id">Cancel Order</button>
                }

                @if (Model.syncStatus != true && Model.orderStatus == "Completed")
                {
                    <button type="button" class="btn btn-primary" id="btnEditOrder" data-id="@Model.id">Edit Order</button>
                }

                <button id="back-orders" class="btn btn-sm btn-primary button-common" type="button" data-url="Orders/Index">
                    <i class="fa fa-mail-reply"></i>
                    Back
                </button>
            </div>
        </div>
    }
    else
    {
        <div class="row mt-3">
            @if (Model.readOnly)
            {
                <div class="col-md-6">

                    <button id="btnReceipt" type="button" onclick="loadTableData('receipt',modelData)">Thermal Print</button>
                    @if (showDiscountButton)
                    {
                        <button onclick="showDiscountModal('@Model.id')">Discount Approval List</button>
                    }
                    <button id="btnInvoice" hidden type="button" onclick="openPdfInModal('invoice')">Print</button>

                </div>
            }
            else
            {
                <div class="col-md-6">
                </div>
            }
            <input type="hidden" id="form-congif" value="orders" data-mtc-btn="true" data-readonly="False">
            <div class="col-md-6 text-right">
                @*<select class="form-control d-inline-block w-auto">
                    <option>Action</option>
                    <option>Complete</option>
                    </select>*@
                <select class="form-control d-inline-block w-auto order-action">
                    <option value="SubmitForPicking" selected>Submit for Picking</option>
                    <option value="Draft">Draft</option>
                    <option value="Payment">Submit for Payment</option>
                </select>
                <button type="button" class="btn btn-success button-common submitOrder">Submit</button>
                <button type="button" class="btn btn-success button-common finalsubmitOrder" hidden>Submit</button>
                @*<button type="button" class="btn btn-danger">Cancel Order</button>
                    <button type="button" class="btn btn-warning">Verify Order</button> *@
                <button id="back-orders" class="btn btn-sm btn-primary button-common" type="button" data-url="Orders/Index">
                    <i class="fa fa-mail-reply i-common"></i>
                    Back
                </button>
            </div>
        </div>
    }

    @if (Model.isEdit && Model.orderStatus != "Completed" && Model.orderStatus != "Cancelled")
    {
        if (Model.OrderPayments.Count == 0)
        {
            <div class="row mt-3 payment-tab" style="@(Model.orderStatus != "Payment" ? "display:none;" : "")">
                <div class="col-md-12">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <div class="d-flex align-items-center">
                            <h4 class="mr-3">Payment</h4>
                        </div>
                        <div class="d-flex align-items-center">
                            <strong class="mr-3">Payment Balance: <span id="paymentBalance">0.00</span></strong>
                            <button id="addPaymentBtn" class="btn btn-primary btn-sm">Add Payment Type</button>
                        </div>
                    </div>

                    <table id="paymentTable" class="table table-bordered">
                        <thead>
                            <tr>
                                <th>Payment Type</th>
                                <th>Bank</th>
                                <th>Reference No</th>
                                <th>Amount</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Payment rows will be added here dynamically -->
                            <tr>
                                <td>
                                    <select class="form-control paymentType">
                                        @foreach (var item in Model.lstPaymentTypes)
                                        {
                                            <option value="@item.Value" @(item.Selected ? "selected" : "")>@item.Text</option>
                                        }
                                    </select>
                                    <input type="hidden" name="OrderId" value="@Model.id" class="orderId" />
                                </td>
                                <td><input type="text" class="form-control bank"></td>
                                <td><input type="text" class="form-control referenceNo"></td>
                                <td><input type="number" class="form-control amount" step="0.01"></td>
                                <td><button class="btn btn-danger btn-sm removePayment"><i class="fa fa-times"></i></button></td>
                            </tr>
                        </tbody>
                    </table>
                    <div class="text-right mb-2">
                        <strong>Total (RM): <span id="paymentTotal">0.00</span></strong>
                    </div>
                    <div class="text-right">
                        <button id="savePaymentBtn" class="btn btn-warning">Save Payment</button>
                        <button id="completePaymentBtn" class="btn btn-success">Complete Payment</button>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="row mt-3 payment-tab">
                <div class="col-md-12">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <div class="d-flex align-items-center">
                                <h4 class="mr-3">Payment</h4>
                            </div>
                            <div class="d-flex align-items-center">
                                <strong class="mr-3">Payment Balance: <span id="paymentBalance">0.00</span></strong>
                                <button id="addPaymentBtn" class="btn btn-primary btn-sm">Add Payment Type</button>
                            </div>
                        </div>
                        <table id="paymentTable" class="table table-bordered">
                            <thead>
                                <tr>
                                    <th>Payment Type</th>
                                    <th>Bank</th>
                                    <th>Reference No</th>
                                    <th>Amount</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    decimal totalAmount = 0; // Declare a variable to store the total amount
                                }
                                @foreach (var payment in Model.OrderPayments)
                                {
                                    totalAmount += payment.Amount;
                                    <!-- Payment rows will be added here dynamically -->
                                    <tr>
                                        <td>
                                            <select class="form-control paymentType">
                                                @foreach (var item in Model.lstPaymentTypes)
                                                {
                                                    <option value="@item.Value" @(payment.PaymentType == item.Value ? "selected" : "")>@item.Text</option>
                                                }
                                            </select>
                                            <input type="hidden" name="OrderId" value="@Model.id" class="orderId" />
                                        </td>
                                        <td><input type="text" class="form-control bank" value="@payment.Bank"></td>
                                        <td><input type="text" class="form-control referenceNo" value="@payment.RefNumber"></td>
                                        <td><input type="number" class="form-control amount" step="0.01" value="@payment.Amount"></td>
                                        <td><button class="btn btn-danger btn-sm removePayment"><i class="fa fa-times"></i></button></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        <div class="text-right mb-2">
                            <strong>Total (RM): <span id="paymentTotal">@totalAmount.ToString("F2")</span></strong>
                        </div>
                        <div class="text-right">
                            <button id="savePaymentBtn" class="btn btn-warning">Save Payment</button>
                            <button id="completePaymentBtn" class="btn btn-success">Complete Payment</button>
                        </div>
                    </div>
            </div>
        }
    }


    <input type="hidden" value="@Url.Action("UpdateOrderStatus", "Orders")" id="UpdateOrderStatusUrl" />
    <input type="hidden" value="@Url.Action("SubmitOrder", "Orders")" id="SubmitOrderUrl" />
    <input type="hidden" value="@Url.Action("UpdateOrderPayments", "Orders")" id="UpdateOrderPaymentsUrl" />
    <input type="hidden" value="@Url.Action("PostOrderToApi", "Orders")" id="PostOrderToApiUrl" />
    <input type="hidden" value="@Url.Action("GetProductByPartNum", "Product")" id="GetProductByPartNumUrl" />
    <input type="hidden" value="@Url.Action("SearchCustomers", "Customer")" id="SearchCustomersUrl" />
    <input type="hidden" value="@Url.Action("SearchProducts", "Product")" id="SearchProductsUrl" />
    <input type="hidden" value="@Url.Action("UpdateOrder", "Orders")" id="UpdateOrderUrl" />

</div>
<div class="modal fade" id="creditHoldModal" tabindex="-1" role="dialog" aria-labelledby="creditHoldModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="creditHoldModalLabel">Credit Hold Alert</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                Credit On-Hold! Unable to proceed.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="pdfModal" tabindex="-1" role="dialog" aria-labelledby="pdfModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="pdfModalLabel">Print Preview</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <iframe id="pdfFrame" style="width: 100%; height: 500px;" frameborder="0"></iframe>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="DiscountGridModal" tabindex="-1" role="dialog" aria-labelledby="DiscountGridLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="DiscountGridLabel">Discount Approval</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" style="padding: 0; margin: 0;">
                <div id="discountPrint" class="label-container" style="margin: 0; padding: 0; display: flex; flex-direction: column; justify-content: center; align-items: center;">
                    <div class="label-content" style="display: flex; flex-direction: column; align-items: center; width: 90%;">
                        <br />
                        <table id="discountdata-table" class="table table-striped table-bordered table-hover">
                            <thead>
                                <tr>
                                    <th>Part Number</th>
                                    <th>Description</th>
                                    <th>Approver Name</th>
                                    <th>Approval Date</th>
                                    <th>Discount</th>
                                    <th>Remarks</th>
                                    <th>Requested By</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Dynamic data will be inserted here -->
                            </tbody>
                        </table>
                        <br />
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary hideModal" data-dismiss="modal" aria-hidden="true">Close</button>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="printModal" tabindex="-1" role="dialog" aria-labelledby="pdfModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document" style="width:100mm">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="pdfModalLabel">Print Preview</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" style="padding: 0; margin: 0;">
                <div id="labelPrint" class="label-container" style="margin: 0; padding: 0; display: flex; flex-direction: column; justify-content: center; align-items: center;">
                    <div class="label-content" style="display: flex; flex-direction: column; align-items: center; width: 90%;">
                        <div class="qrCodePrint"></div>
                        <table id="data-table" style="text-align:center;">
                            <!--<thead>
                                <tr>
                                    <th colspan="3" style="width: 98%; text-align: center">Lucky Frozen Sdn Bhd</th>-->
                            <!-- Merging 3 columns into one -->
                            <!--</tr>
                                <tr>
                                    <th style="width: 59%; text-align: left;">Product</th>
                                    <th style="width: 20%; text-align: center">Qty</th>
                                    <th style="width:20%; text-align:right">Price</th>
                                </tr>
                            </thead>-->
                            <tbody>
                                <!-- Dynamic data will be inserted here -->
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary hideModal" data-dismiss="modal" aria-hidden="true">Close</button>
                    <button class="btn btn-primary" onclick="printReceipt('@Model.id', '@Model.orderStatus')">Print</button>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="discountApproval" tabindex="-1" role="dialog" aria-labelledby="discountApprovalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="discountApprovalLabel">Discount Approval</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">

                <label for="username">Username</label>
                <select class="form-control" id="username" required>
                    <option value="">Loading...</option>
                </select>

                <label for="password">Password</label>
                <input type="password" class="form-control" id="password" placeholder="Enter Password" required>

                <label for="remarks">Remarks</label>
                <textarea class="form-control" id="remarksdiscount" rows="4" placeholder="Enter Remarks" required></textarea>

                <input type="hidden" id="orderId" value="@Model.id" />

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" onclick="cancelApproval()">Cancel</button>
                <button type="button" class="btn btn-primary" id="submitApproval">Confirm</button>
            </div>
        </div>
    </div>
</div>

<style>
    .form-control, .input-group-text, .btn {
        border-radius: 0;
    }

    .table thead th {
        background-color: #e9ecef;
    }

    .btn-success {
        background-color: #28a745;
        border-color: #28a745;
    }

    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
    }

    .btn-danger {
        background-color: #dc3545;
        border-color: #dc3545;
    }

    .fade {
        opacity: 1;
    }

    .modal-open #header1 {
        z-index: 1;
    }

    /* Ensures table takes full width inside the modal */
    .modal .table-responsive {
        width: 100%;
    }

    /* Ensures table stretches to fill the available space */
    .modal .table {
        width: 100%;
    }

    .dataTables_filter [type='search'] {
        width: auto !important;
    }

    .product-checkbox {
        margin-left: 7px;
    }

    .selectCustomer, .selectShipTo, .selectDistrict {
        border: 0;
        margin: 0;
        padding: 0;
    }

    .btn-sm {
        padding: 2px 7px;
    }

        .btn-sm:nth-child(2) {
            margin-left: 5px;
        }

    #dt_product_picker td:first-child {
        text-align: center !important;
    }

        #dt_product_picker td:first-child input {
            margin-left: 0px !important;
        }

    .selectCustomerContainer .select2-container {
        width: 80%;
    }

    .originalUnitPriceInput {
        font-size: 12px;
        padding-left: 2px;
        padding-right: 2px;
        min-width: 67px;
    }

    .orderQtyInput {
        font-size: 12px;
        padding-left: 2px;
        padding-right: 2px;
        min-width: 55px;
    }

    .discountInput {
        font-size: 12px;
        padding-left: 2px;
        padding-right: 2px;
        width: 70px;
    }

    td.product-lineTotal {
        min-width: 50px;
    }

    .int-table td {
        font-size: 1rem;
    }

        .int-table td:first-child, .int-table td:nth-child(3) {
            font-weight: bold;
            font-size: 1rem;
        }

        .int-table td:nth-child(1) {
            font-weight: bold;
            font-size: 1rem;
        }

        .int-table td span {
            font-size: 1rem;
        }
</style>
@if (Model.disableComplimentary)
{
    <style>
        .complimentary-input {
            display: none;
        }
    </style>
}
<style>
    @@media print {
        #labelPrint {
            transform: scale(8.0);
            transform-origin: top left;
            margin: 0;
            padding: 0;
            zoom: 80%;
        }

        body {
            background: none;
        }
        /* If you have any specific classes or IDs you want to hide, add them here */
        header, footer, .no-print {
            display: none;
        }
    }
</style>

@Scripts.Render(bundles.scripts.common_add_edit)
@Scripts.Render("~/bundles/jqueryval")

<script>
    var isEdit = "@(Model.isEdit ? "yes" : "no")";
    var defaultCustomerId = "@Model.defaultCustomerId";
    var defaultShipTo = "@Model.defaultShipTo";
    var validateStockBalance = "@Model.ValidateStockBalance";
    var orderStatus = "@Model.orderStatus";
    var removedOrderItemIds = [];

    function parseDate(dateString) {
        var parts = dateString.split(' ');
        var dateParts = parts[0].split('/');
        var timeParts = parts[1].split(':');
        var period = parts[2];  // AM/PM

        var day = parseInt(dateParts[0], 10);
        var month = parseInt(dateParts[1], 10) - 1; // Month is 0-indexed in JS
        var year = parseInt(dateParts[2], 10);
        var hours = parseInt(timeParts[0], 10);
        var minutes = parseInt(timeParts[1], 10);

        // Adjust for AM/PM
        if (period === 'PM' && hours < 12) {
            hours += 12;
        } else if (period === 'AM' && hours === 12) {
            hours = 0;
        }

        // Create the JavaScript Date object
        return new Date(year, month, day, hours, minutes);
    }

    function openPdfInModal(letterName) {

        var url = '@Url.Action("PrintDocument", "Orders")' + '?id=' + encodeURIComponent('@Model.id') + '&letterName=' + encodeURIComponent(letterName);
        // Open the modal
        $('#pdfModal').modal('show');

        // Set the iframe src to the PDF URL
        $('#pdfFrame').attr('src', url);
    }





function formatNumber(number) {
    // Round to two decimal places
    number = Math.round(number * 100) / 100;

    // Split the number into whole and decimal parts
    let parts = number.toString().split(".");
    let wholePart = parts[0];
    let decimalPart = parts.length > 1 ? "." + parts[1].padEnd(2, '0') : ".00"; // Ensure two decimal places

    // Add thousand separator
    wholePart = wholePart.replace(/\B(?=(\d{3})+(?!\d))/g, ",");

    return wholePart + decimalPart;
}


</script>

@if (Model.isEdit)
{
    <script>
      var today = parseDate('@Model.orderDate');
    </script>
}
else
{
    <script>
        var today = new Date();
    </script>
}

<script>
    // var $select = $('.selectCustomer');
    var debounceTimeout;

    @*$(document).ready(function () {
        var customerId = '@Model.customer_Id';
        var customerName = '@Model.customerName';


        // Initialize Select2 with AJAX for dynamic search
        $select.select2({
            placeholder: "Select Customer",
            allowClear: false,
            initSelection: function(element, callback) {
                if (customerId && customerName) {
                    callback({ id: customerId, text: customerName });
                }
            },
            query: function (query) {
                // Clear the previous timeout
                clearTimeout(debounceTimeout);

                // Set a timeout before making the API call
                debounceTimeout = setTimeout(function () {
                    $.ajax({
                        url: '@Url.Action("SearchCustomers", "Customer")',
                        type: 'POST',
                        dataType: 'json',
                        data: {
                            searchParam: query.term // Pass search term to the server
                        },
                        success: function (data) {
                            var results = [];
                            // Assuming 'data.customers' is an array of customer objects
                            $.each(data.customers, function (index, customer) {
                                results.push({
                                    id: customer.id,
                                    text: customer.name
                                });
                            });
                            query.callback({ results: results });
                        }
                    });
                }, 300); // 300 milliseconds delay (you can adjust this as needed)
            }
        });

        // Set the default value if customerId and customerName are available
        if (customerId && customerName) {
            console.log("Setting default value:", customerId, customerName); // Debugging
            $select.select2('data', { id: customerId, text: customerName });
        }

    });*@



function formatNumberWithThousandSeparator(number) {
    return number.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
}
    var $selectShipTo = $('.selectShipTo');
    var $selectDistrict = $('.selectDistrict');
    // Reinitialize Select2 for ShipTo dropdown after updating options
    $selectShipTo.select2({
        placeholder: "Select Ship-To Address",
        allowClear: true
    });
    $selectDistrict.select2({
        placeholder: "Select District",
        allowClear: true
    });
    var shipToId = '@Model.shipToAddress_Id';
    var shipToName = '@Model.shipToName';
    var districtId = '@Model.districtId';
    var isCloneScreen = '@Model.isClone';
    // Check if Model.shipToId and Model.shipToName exist
    if (shipToId && shipToName) {
        // Create a new option element
        var option = $('<option></option>')
            .val(shipToId)      // Set the value as shipToId
            .text(shipToName);  // Set the text as shipToName

        // Add the option to the select element
        $selectShipTo.append(option);

        // Set the newly added option as selected
        $selectShipTo.val(shipToId).trigger('change');
    }

    $(document).off("change", "#customer").on("change", "#customer", function (e) {

    // $(document).off("change", ".selectCustomer").on("change", ".selectCustomer", function (e) {
    // e.preventDefault();
    var customerId = $(this).val();
    // $('#customer').val(customerId); // Update the hidden input if necessary
    if (customerId == defaultCustomerId) {
        $('#oneTimeCustomer').prop('checked', true).trigger("change"); // Check the checkbox
    } else {
        $('#oneTimeCustomer').prop('checked', false).trigger("change"); // Uncheck the checkbox
    }
    if (customerId) {
        // Make an AJAX call to fetch ship-to addresses based on customerId
        $.ajax({
            url: '@Url.Action("GetShipToAddressesByCustomerId", "ShipToAddress")', // Replace with your actual controller action URL
            type: 'POST',
            data: { customerId: customerId },
            success: function (response) {
                if (response.success) {
                    // Clear and populate the ShipTo dropdown with the response data
                    $selectShipTo.empty(); // Clear existing options
                    $selectShipTo.val("").trigger('change');
                    // Add a placeholder option
                    $selectShipTo.append(new Option('', '', true, true));

                    // Loop through the ship-to addresses and append them to the dropdown
                    $.each(response.ShipToAddresses, function (index, item) {
                        $selectShipTo.append(new Option(item.shippingCode + " | " + (item.name != null ? item.name : ""), item.id));
                    });

                    if (shipToId) {
                        $selectShipTo.val(shipToId).trigger('change');
                        shipToId = "";
                    }
                    if (customerId == defaultCustomerId) {
                        $selectShipTo.val(defaultShipTo).trigger("change");
                    }
                } else {
                    $selectShipTo.empty();
                    $selectShipTo.empty().select2({
                        placeholder: "Select Ship-To Address",
                        allowClear: true
                    });
                    // alert('No ship-to addresses found for this customer.');
                }
            },
            error: function (xhr, status, error) {
                $selectShipTo.empty();
                $selectShipTo.empty().select2({
                    placeholder: "Select Ship-To Address",
                    allowClear: true
                });
                console.error('Error fetching ship-to addresses:', error);
                alert('An error occurred while retrieving ship-to addresses.');
            }
        });
            } else {
                // If no customer is selected, clear the ship-to dropdown
                $selectShipTo.empty().select2({
                    placeholder: "Select Ship-To Address",
                    allowClear: true
                });
            }

    });


    function loadDistricts() {
        $.ajax({
            url: '@Url.Action("SearchDistricts", "Customer")', // Replace with your actual controller action URL
            type: 'POST',
            data: {  },
            success: function (response) {
                if (response.success) {
                    // Clear and populate the ShipTo dropdown with the response data
                    $selectDistrict.empty(); // Clear existing options
                    $selectDistrict.val("").trigger('change');
                    // Add a placeholder option
                    $selectDistrict.append(new Option('', '', true, true));

                    // Loop through the ship-to addresses and append them to the dropdown
                    $.each(response.districts, function (index, item) {
                        $selectDistrict.append(new Option(item.districtID + " | " + (item.districtDesc != null ? item.districtDesc : ""), item.id));
                    });

                    if (districtId) {
                        $selectDistrict.val(districtId).trigger('change');
                        // shipToId = "";
                    }
                    //if (customerId == defaultCustomerId) {
                    //    $selectShipTo.val(defaultShipTo).trigger("change");
                    //}
                } else {
                    $selectDistrict.empty();
                    $selectDistrict.empty().select2({
                        placeholder: "Select District",
                        allowClear: true
                    });
                    // alert('No ship-to addresses found for this customer.');
                }
            },
            error: function (xhr, status, error) {
                $selectDistrict.empty();
                $selectDistrict.empty().select2({
                    $selectDistrict: "Select District",
                    allowClear: true
                });
                console.error('Error fetching District list:', error);
                alert('An error occurred while retrieving district list.');
            }
        });
    }
    function cancelApproval() {

        $('#discountApproval').hide();

    }
        // Capture and remove row on button click
        $(document).off('click', '.btn-remove').on('click', '.btn-remove', function () {
            let button = $(this);
            let row = button.closest('tr');
            let orderItemId = button.data("dbid"); // row.find('.product-orderItemId').text();

            // Check if button has 'delete-save-history' class and if orderItemId exists
            if (button.hasClass('delete-save-history') && orderItemId) {
                removedOrderItemIds.push(orderItemId);
            }
            //// Clone the entire row
            //var $clonedRow = row.clone();

            //// Modify the first cell to have an undo button
            //$clonedRow.find('td:first').html(`
            //    <button class="btn btn-sm btn-success btn-undo"><i class="fa fa-undo"></i></button>
            //`);
            //
            //// Add to deleted table
            //deleted_table.row.add($clonedRow[0]).draw();

            // Update totals and serial numbers
            //updateAllTotals();
            // Remove the row
            row.remove();
        });

        function getColumnIndex(table, columnText) {
            var index = -1;
            table.find('th').each(function(i) {
                if ($(this).text().trim() === columnText) {
                    index = i;
                    return false; // break the loop
                }
            });
            return index;
        }

        // First, let's determine if the conditional columns exist
        var returnStatusExists = $('#dt2_product thead th:contains("Return Status")').length > 0;
        var scannedQtyExists = $('#dt2_product thead th:contains("Scanned Qty")').length > 0;

        // Calculate the offset for our column indices
        var offset = 0; // Start with 1 for the control column we're adding
        if (returnStatusExists) offset++;
        if (scannedQtyExists) offset++;

        var priority1 = [0, 2, 3, 10, 11, 12, 14, 15, 16];
        var priority2 = [0, 2, 3, 11, 12, 14, 15, 16];
        var priority3 = [4, 6, 7, 8, 9, 10, 11];
        var hidden = [1, 5, 17, 18, 19, 20, 21, 22];

        if (offset == 2) {
            priority1 = [2, 3, 10, 11, 17, 18];
            priority2 = [0, 2, 3, 11, 15, 18];
            priority3 = [6, 7, 8, 9, 10, 11, 12];
            hidden = [1, 5, 19, 20, 21, 22, 23, 24];
        } else if (offset == 1) {
            priority1 = [2, 3, 11, 13, 15, 16, 17];
            priority2 = [0, 2, 3, 14, 17];
            priority3 = [6, 7, 8, 9, 10, 11, 12];
            hidden = [1, 5, 18, 19, 20, 21, 22];
        }

        var desktop_table = $('#dt2_product').DataTable({
            "paging": false,
            "ordering": false,
            "info": false,
            "searching": false,
            "responsive": true,/*{
                details: {
                    // display: $.fn.dataTable.Responsive.display.childRow,
                    type: 'column',
                    target: 'tr'
                }
            },*/
            columnDefs: [
                { responsivePriority: 1, targets: priority1 }, //Part No, UOM, Order Qty, Total
                { responsivePriority: 2, targets: priority2 }, // Action, Part No, Part Name, UOM, Order Qty, Total
                { responsivePriority: 3, targets: priority3 }, // AVW, Cutng Type, Cutng Cost, Comp, Unit Price, Group
                { visible: true, targets: hidden, className: "hidden" } // Hidden fields
            ],
            "autoWidth": false
        });

        var deleted_table = $('#dt2_deleted_product').DataTable({
            "paging": false,
            "ordering": false,
            "info": false,
            "searching": false,
            "responsive": true,
            columnDefs: [
                { responsivePriority: 1, targets: priority1 }, //Part No, UOM, Order Qty, Total
                { responsivePriority: 2, targets: priority2 }, // Action, Part No, Part Name, UOM, Order Qty, Total
                { responsivePriority: 3, targets: priority3 }, // AVW, Cutng Type, Cutng Cost, Comp, Unit Price, Group
                { visible: true, targets: hidden, className: "hidden" } // Hidden fields
            ],
            "autoWidth": false
        });

        var previousWidth = $(window).width();
        // Redraw DataTable on window resize
        $(window).resize(function () {
            var currentWidth = $(window).width();

            if (Math.abs(currentWidth - previousWidth) > 40) {
                console.log("Horizontal resize event");
                desktop_table.draw();
                previousWidth = currentWidth;
            }
        });

        var mobile_table = $('#dt2_product_mobile').DataTable({
            "paging": false,
            "ordering": false,
            "info": false,
            "searching": false,
            "responsive": true
        });

        function formatDate(date) {
            var day = String(date.getDate()).padStart(2, '0');
            var month = String(date.getMonth() + 1).padStart(2, '0'); // Months are zero-based
            var year = date.getFullYear();

            return day + '/' + month + '/' + year;
        }
        // $("#customer").trigger("change");
        // Set the formatted date as the value of the input field
        // $('#orderDate').val(formatDate(today));
        // $('#orderDate').datepicker('setDate', today);
        // Cart functions begins
        $(document).off('click', '#orders-create #dt2_product .btn-danger, #orders-create #dt2_product_mobile .btn-danger').on('click', '#orders-create #dt2_product .btn-danger, #orders-create #dt2_product_mobile .btn-danger', function () {
            var row = $(this).closest('tr');
            desktop_table.row(row).remove().draw();
            mobile_table.row(row.index()).remove().draw();
            updateOrderTotal();
        });
        // Variable to store previous quantity
        var previousOrderQty = 0;

        // Bind change event to input fields
        $(document).off('focus', 'input[data-field="orderQty"]').on('focus', 'input[data-field="orderQty"]', function () {
            // Store the current value when the input gains focus
            previousOrderQty = parseFloat($(this).val()) || 0;
        });

        // Bind change event to input fields
        $(document).off('focus', '#finalQty').on('focus', '#finalQty', function () {
            // Store the current value when the input gains focus
            previousOrderQty = parseFloat($(this).val()) || 0;
        });

        $(document).off('change', 'input[data-field="orderQty"]').on('change', 'input[data-field="orderQty"]', function () {
            var orderQty = parseFloat($(this).val()) || 0;
            var step = parseFloat($(this).attr('step')) || 1; // Default step to 1 if not set
            debugger
            if (orderQty <= 0) {
                alert("OrderQty must be more than Zero");
                $(this).val(previousOrderQty || 0); // Reset to previous valid value
                $("#finalQty").val(previousOrderQty || 0);
                valid = false;
                return;
            }
            // Derive allowDecimals from step
            var allowDecimals = step < 1;
            if (allowDecimals) {
                var decimalPlaces = (orderQty.toString().split('.')[1] || "").length;
                if (decimalPlaces > 2) {
                    alert("Only up to 2 decimal places are allowed.");
                    $(this).val(orderQty.toFixed(2)); // Round to 2 decimal places
                    $("#finalQty").val(orderQty.toFixed(2));
                    return;
                }
            }
            // Validate decimals if not allowed
            if (!allowDecimals && orderQty % 1 !== 0) {
                alert("Decimal values are not allowed for this product.");
                $(this).val(previousOrderQty || 0); // Reset to previous valid value
                $("#finalQty").val(previousOrderQty || 0);
                valid = false;
                return;
            }

            var $row = $(this).closest('tr');
            var currentIndex = $row.index();
            var existingOrderQty = orderQty;
            $('#dt2_product tbody tr').each(function (index) {
                if (index !== currentIndex && !$(this).hasClass('edit-panel-row')) {
                    var row = $(this);
                    var partNum = row.find('.product-id-field').text();
                    var orderQty = parseFloat(row.find('input[data-field="orderQty"]').val()) || 0;

                    // Accumulate order quantity for matching part numbers
                    if (partNum === $row.find('.product-id-field').text()) {
                        var originalQtyText2 = row.find("input[data-originalqty]").data("originalqty");
                        var originalQty2 = parseFloat(originalQtyText2) || 0;
                        existingOrderQty += orderQty - originalQty2;
                    }
                }
            });
            var qtyType = $row.find(".product-QtyType_ModuleItem_Id").text();
            var remainingQtyText = $row.find(".product-avlQty").text();
            var remainingQty = parseFloat(remainingQtyText) || 0;
            // Check if the $row contains an input with data-originalqty
            var originalQtyText = $row.find("input[data-originalqty]").data("originalqty");
            if (originalQtyText) {
                var originalQty = parseFloat(originalQtyText) || 0;
                remainingQty += originalQty;
            }
            if (existingOrderQty > remainingQty && validateStockBalance == "True") {
                $(this).val(previousOrderQty);
                $row.next("tr").find('input#finalQty').val(previousOrderQty);
                alert(`Insufficient Stock Balance! Order Qty (${existingOrderQty}) is more than Available Qty (${remainingQty}).`);
                return;
            } else {
                if (qtyType == "7705") {
                    $row.find('.product-scannedQty').text(orderQty);
                }                

                updateTotal($(this).closest('tr'));
                $row.next("tr").find('input#finalQty').val(orderQty);

            }
        });

    // Event handler for discount input
    $(document).off('change', '.discountInput').on('change', '.discountInput', function () {
        var value = $(this).val();

        // Remove any non-numeric characters except decimal point
        value = value.replace(/[^\d.]/g, '');

        // Ensure only one decimal point
        if ((value.match(/\./g) || []).length > 1) {
            value = value.replace(/\.+$/, '');
        }

        // Parse the value to number
        var numValue = parseFloat(value);

        // Validate the value
        if (isNaN(numValue)) {
            numValue = 0;
        } else if (numValue > 100) {
            numValue = 100;
        }

        // Format to 2 decimal places
        $(this).val(numValue.toFixed(2));

        // Update the total for this row
        var row = $(this).closest('tr');
        updateTotal(row);
    });

    $(document).on('change', 'input#finalQty', function () {
        var preTr = $(this).closest('tr').prev('tr');
        preTr.find('input[data-field="orderQty"]').val($(this).val()).trigger("change");
        //updateTotal(preTr);
      });
$('#orders-create button.submitOrder').on('click', function () {
    // Extract order data
    const orderData = extractOrderData();

    if (!validateOrderData(orderData)) {
        return; // Exit if validation fails
    }

    // Check if approval is needed
    checkForApprovals().then((approvalResult) => {

        if (approvalResult.needsApproval) {
            showApprovalModal(); // Show modal for approvals
        } else {

            submitOrder(orderData); // Directly submit the order if no approval is needed
        }
    }).catch((error) => {
        console.error("Error during approval check:", error.message);
        alert("An error occurred while checking for approvals.");
    });


// Function to check for approvals
function checkForApprovals() {

    var orderdata = extractOrderData();
    const itemsToCheck = orderdata.OrderItems.filter(item => item.discountAmt > 0).map(item => ({
        orderId: item.orderId === 0 ? model.id : item.orderId,
        orderItemId: item.orderItemId,
        orderItemDiscount: item.discountAmt
    }));

    if (itemsToCheck.length > 0) {
        return new Promise((resolve, reject) => {
            $.ajax({
                url: '@Url.Action("CheckBulkDiscountApproval", "Orders")',
                type: 'POST',
                data: JSON.stringify(itemsToCheck),
                contentType: "application/json; charset=utf-8"
            }).done(response => {
                const itemsRequiringApproval = response.filter(r => r.needsApproval);
                resolve({
                    needsApproval: itemsRequiringApproval.length > 0,
                    approvalItems: itemsRequiringApproval
                });
            }).fail(error => {
                //console.error("Error during approval check:", error);
                reject({
                    needsApproval: false,
                    approvalItems: []
                });
            });
        });
    } else {
        return Promise.resolve({
            needsApproval: false,
            approvalItems: []
        });
    }
    }
    // Submit Approval click event in the modal
    $(document).off("click", "#submitApproval").on("click", "#submitApproval", function () {

        var username = $('#username').val();
        var password = $('#password').val();
        var remarks = $('#remarksdiscount').val();
        var orderData = extractOrderData();

        // Save discount approvals and then enable Final Submit
        saveDiscountApprovals(orderData.OrderItems, username, password, remarks)
            .then(function () {
                $('#discountApproval').modal('hide'); // Hide the modal
                $(".finalsubmit-action").removeAttr("hidden").show(); // Show Final Submit button
                $(".submit-action").hide(); // Hide Submit button
            })
            .catch(function (error) {
                userMessage.show("Error", error);
            });
    });
});

// Function to extract order data
function extractOrderData() {
    const orderData = {
        customer_Id: $('#customer').val(),
        shipToAddress_Id: $('#shipTo').val(),
        districtId: $('.selectDistrict').select2('val'),
        orderDate: $('#orderDate').val(),
        orderComment: $('#remarks').val(),
        OrderItems: [],
        orderStatus: $('.order-action').val(),
        oneTimeCustomer: $('#oneTimeCustomer').is(':checked'),
        orderContact: $('#orderContact').val(),
        orderContactName: $('#orderContactName').val(),
        orderContactPhone: $('#orderContactPhone').val()
    };
    debugger;
    $('#dt2_product tbody tr').each(function () {
        if (!$(this).hasClass('edit-panel-row') && !$(this).hasClass('child')) {
            const row = $(this);
            var item = {
                partNum: row.find('.product-id-field').text(),
                product_Id: row.find(".product-id-field").attr("data-id"),
                lineDesc: row.find('.product-desc-field').text(),
                unitPrice: parseFloat(row.find("input.originalUnitPrice").val()),
                originalUnitPrice: parseFloat(row.find("input.originalUnitPrice").val()),
                realOriginalUnitPrice: parseFloat(row.find("input.realOriginalUnitPrice").val()),
                prodGroup: row.find('.product-prodGroup').text(),
                code: row.find('.product-code').text(),
                ium: row.find('.product-orderUOM').text(),
                orderQty: parseFloat(row.find('input[data-field="orderQty"]').val()),
                scannedQty: parseFloat(row.find('.product-scannedQty').text()),
                discount: 0,
                // listPrice: parseFloat(row.find('span[data-field="price').text()),
                listPrice: row.find('.product-lineTotal').text(),
                returnTotal: parseFloat(row.find('.product-returnTotal').text()) || 0,
                QtyType_ModuleItem_Id: row.find('.product-QtyType_ModuleItem_Id').text(),
                OrderUOM_Id: row.find('.product-OrderUOM_Id').text(),
                operationStyle_ModuleItem_Id: row.find('.product-operationStyle_ModuleItem_Id').text(),
                operationCost: row.find('.product-operationCost').text(),
                actualoperationcost: row.find('.product-operationCost').attr("data-actualoperationcost"),
                complimentary_ModuleItem_Id: row.find('.product-complimentary_ModuleItem_Id').text(),
                allowVaryWeight: row.find('.product-allowvaryweight').text() === "Yes" ? true : false,
                orderItemId: row.find('.product-orderItemId').text(),
                comments: row.find(".product-comment").text(),
                scannedLabel: row.find(".product-scannedlabel").text().trim(),
                scannedLocation: row.find(".product-scannedlocation").text().trim(),
                createdBy: row.find(".product-createdby").text(),
                createdAt: row.find(".product-createdat").text(),
                discountPer: parseFloat(row.find(".discountInput").val()) || 0,
                discountAmt: parseFloat(row.find(".discountAmt").val()) || 0
            };
            orderData.OrderItems.push(item);
        }
    });

    return orderData;



}
    function saveDiscountApprovals(orderData, username, password, remarks) {

            return new Promise(function (resolve, reject) {
                $.ajax({
                    url: '@Url.Action("ApproveDiscounts", "Orders")',
                    type: 'POST',
                    data: JSON.stringify({
                        orderData: orderData,
                        username: username,
                        password: password,
                        remarks: remarks // Assuming all items in the orderData array have the same orderId
                    }),
                    contentType: "application/json; charset=utf-8",  // Proper content type for JSON
                    success: function (response) {
                        if (response.success) {
                            resolve();
                        } else {
                            alert("Invalid Credentials!");
                        }
                    }
                });
            });
        }
    // Cancel Approval click event in the modal
    $('#cancelApproval').on('click', function () {
        $('#discountApproval').modal('hide'); // Hide the modal
        $(".finalsubmit-action").removeAttr("hidden").show();
        $(".submit-action").hide();
    });
// Function to validate order data
function validateOrderData(orderData) {
    if (!orderData.customer_Id) {
        alert("Please select a customer.");
        return false;
    }

    if ($('#oneTimeCustomer').is(':checked')) {
        if (!orderData.orderContactName && !orderData.orderContactPhone) {
            alert("Please enter either a contact name or a phone number for the one-time customer.");
            return false;
        }
    }

    if (orderData.OrderItems.length === 0) {
        alert("No products have been added.");
        return false;
    }

    return true;
}


// Function to show approval modal
function showApprovalModal() {
    $('#discountApproval').modal('show');
    loadUserRoleApprovalUsers();
}

// Function to submit order
function submitOrder(orderData) {
    $.ajax({
        url: '@Url.Action("SubmitOrder", "Orders")',
        type: 'POST',
        data: JSON.stringify(orderData),
        contentType: "application/json; charset=utf-8",
        success: (response) => {
            if (response.success) {
                userMessage.show("Success", "The order submitted successfully!");
                $("#back-orders").trigger("click");
            } else {
                alert('Error submitting order: ' + response.message);
            }
        },
        error: () => {
            alert('An error occurred while submitting the order.');
        }
    });
}

// Function to load approval users
function loadUserRoleApprovalUsers() {
    $.ajax({
        url: '@Url.Action("GetUsersList", "Orders")',
        type: 'GET',
        success: (response) => {
            const dropdown = $('#username');
            dropdown.empty().append('<option value="">Select User</option>');
            response.forEach(user => {
                dropdown.append('<option value="' + user.Value + '">' + user.Text + '</option>');
            });
        },
        error: () => alert('Error loading users.')
    });
}




    $(document).off("click", "#orders-create #btnCancelOrder").on("click", "#orders-create #btnCancelOrder", function () {
        var orderId = $(this).attr("data-id");
        $.SmartMessageBox({
            title: "Alert!",
            content: 'Are you sure to cancel the order?',
            buttons: '[No][Yes]'
        }, function (ButtonPressed) {

            if (ButtonPressed === "Yes") {
                $.ajax({
                    url: "@Url.Action("UpdateOrderStatus", "Orders")", // Update with your controller and action names
                    type: 'POST',
                    data: JSON.stringify({
                        orderId: orderId,
                        newStatus: "Cancelled",
                        actionName: $('.order-action').val()
                    }),
                    contentType: "application/json; charset=utf-8",
                    success: function (response) {
                        if (response.success) {
                            // alert('Order submitted successfully!');
                            userMessage.show("Success", "The order status updated successfully!");
                            if ($('.order-action').val() === "Payment") {
                                // Enable the display of the payment section
                                $('.payment-tab').css('display', 'block');
                            } else {
                                $("#back-orders").trigger("click");
                            }
                            // Optionally, redirect or clear the form
                        } else {
                            userMessage.show("Error", 'Error submitting order: ' + response.message);
                        }
                    },
                    error: function () {
                        userMessage.show("Error", 'An error occurred while submitting the order.');
                    }
                });
            }
        });
    });


    $(document).off("click", "#orders-create #btnEditOrder").on("click", "#orders-create #btnEditOrder", function () {
    var orderId = $(this).attr("data-id");
    $.SmartMessageBox({
        title: "Alert!",
        content: 'Are you sure you want to edit this order? Please note that after editing, any refunds and return quantities will be reset. This action cannot be undone.',
        buttons: '[No][Yes]'
    }, function (ButtonPressed) {

        if (ButtonPressed === "Yes") {
            $.ajax({
                url: "@Url.Action("UpdateOrderStatus", "Orders")", // Update with your controller and action names
                type: 'POST',
                data: JSON.stringify({
                    orderId: orderId,
                    newStatus: "EditPayment",
                    actionName: $('.order-action').val()
                }),
                contentType: "application/json; charset=utf-8",
                success: function (response) {
                    if (response.success) {
                        // alert('Order submitted successfully!');
                        userMessage.show("Success", "The order status updated successfully!");
                        $(".refreshPage").trigger("click");
                        // Optionally, redirect or clear the form
                    } else {
                        userMessage.show("Error", 'Error submitting order: ' + response.message);
                    }
                },
                error: function () {
                    userMessage.show("Error", 'An error occurred while submitting the order.');
                }
            });
        }
        });
    });


    $("#orders-create .submit-action").on("click", function () {
    if (!$('.order-action').val()) {
        alert("Please select action to submit");
        return false;
    }
        var orderId = $(this).attr("data-id");
        //
        updateOrder(orderId, null).then(res => {
            // Start ajax


            // End ajax
        }).catch(err => {
            userMessage.show("Error", err);
        });

})

    $("#orders-create .update-action").on("click", function () {
        var orderId = $(this).attr("data-id");
        $.SmartMessageBox({
            title: "Alert!",
            content:  '@Html.GetGlobalResource("UPDATEORDER_MESSAGE")',
            buttons: '[No][Yes]'
        }, function (ButtonPressed) {

            if (ButtonPressed === "Yes") {
                updateOrder(orderId,null).then(res => {
                    userMessage.show("Success", "The order updated successfully!");
                    $("#back-orders").trigger("click");
                }).catch(err => {
                    userMessage.show("Error", err);
                });
            }
        });
    })



    var isProcessingApproval = false;

    function updateOrder(orderId, paymentData) {

        return new Promise((resolve, reject) => {
            var orderData = {
                id: orderId,
                customer_Id: $('#customer').val(),
                shipToAddress_Id: $('#shipTo').val(),
                districtId: $('.selectDistrict').select2('val'),
                orderDate: $('#orderDate').val(),
                orderComment: $('#remarks').val(),
                OrderItems: [],
                removedOrderItemIds: removedOrderItemIds,
                orderStatus: $('.order-action').val(),
                oneTimeCustomer: $('#oneTimeCustomer').is(':checked'),
                orderContact: $('#orderContact').val(),
                orderContactName: $('#orderContactName').val(),
                orderContactPhone: $('#orderContactPhone').val()
            };

            // Collect order items
            $('#dt2_product tbody tr').each(function () {
                if (!$(this).hasClass('edit-panel-row') && !$(this).hasClass('child')) {
                    var row = $(this);
                    var item = {
                        partNum: row.find('.product-id-field').text(),
                        product_Id: row.find(".product-id-field").attr("data-id"),
                        lineDesc: row.find('.product-desc-field').text(),
                        unitPrice: parseFloat(row.find("input.originalUnitPrice").val()),
                        originalUnitPrice: parseFloat(row.find("input.originalUnitPrice").val()),
                        realOriginalUnitPrice: parseFloat(row.find("input.realOriginalUnitPrice").val()),
                        prodGroup: row.find('.product-prodGroup').text(),
                        code: row.find('.product-code').text(),
                        ium: row.find('.product-orderUOM').text(),
                        orderQty: parseFloat(row.find('input[data-field="orderQty"]').val()),
                        scannedQty: parseFloat(row.find('.product-scannedQty').text()),
                        discount: 0,
                        // listPrice: parseFloat(row.find('span[data-field="price').text()),
                        listPrice: row.find('.product-lineTotal').text(),
                        returnTotal: parseFloat(row.find('.product-returnTotal').text()) || 0,
                        QtyType_ModuleItem_Id: row.find('.product-QtyType_ModuleItem_Id').text(),
                        OrderUOM_Id: row.find('.product-OrderUOM_Id').text(),
                        operationStyle_ModuleItem_Id: row.find('.product-operationStyle_ModuleItem_Id').text(),
                        operationCost: row.find('.product-operationCost').text(),
                        actualoperationcost: row.find('.product-operationCost').attr("data-actualoperationcost"),
                        complimentary_ModuleItem_Id: row.find('.product-complimentary_ModuleItem_Id').text(),
                        allowVaryWeight: row.find('.product-allowvaryweight').text() === "Yes" ? true : false,
                        orderItemId: row.find('.product-orderItemId').text(),
                        comments: row.find(".product-comment").text(),
                        scannedLabel: row.find(".product-scannedlabel").text(),
                        scannedLocation: row.find(".product-scannedlocation").text(),
                        createdBy: row.find(".product-createdby").text(),
                        createdAt: row.find(".product-createdat").text(),
                        discountPer: parseFloat(row.find(".discountInput").val()) || 0,
                        discountAmt: parseFloat(row.find(".discountAmt").val()) || 0,
                        orderId: orderId
                    };
                    orderData.OrderItems.push(item);
                }
            });
            debugger;


            // Check if approval is needed
            checkForApprovals(orderData).then((approvalResult) => {

                if (approvalResult.needsApproval) {
                    showApprovalModal(); // Show modal for approvals
                } else {

                    saveOrder(orderData); // Directly submit the order if no approval is needed
                }
            }).catch((error) => {
                console.error("Error during approval check:", error.message);
                alert("An error occurred while checking for approvals.");
            });



            // Cancel Approval click event in the modal
            $('#cancelApproval').on('click', function () {
                $('#discountApproval').modal('hide'); // Hide the modal
                $(".finalsubmit-action").removeAttr("hidden").show();
                $(".submit-action").hide();
            });
            function extractOrderDataUpdate() {
                const orderData = {
                    customer_Id: $('#customer').val(),
                    shipToAddress_Id: $('#shipTo').val(),
                    districtId: $('.selectDistrict').select2('val'),
                    orderDate: $('#orderDate').val(),
                    orderComment: $('#remarks').val(),
                    OrderItems: [],
                    orderStatus: $('.order-action').val(),
                    oneTimeCustomer: $('#oneTimeCustomer').is(':checked'),
                    orderContact: $('#orderContact').val(),
                    orderContactName: $('#orderContactName').val(),
                    orderContactPhone: $('#orderContactPhone').val()
                };

                $('#dt2_product tbody tr').each(function () {
                    if (!$(this).hasClass('edit-panel-row') && !$(this).hasClass('child')) {
                        const row = $(this);
                        var item = {
                            partNum: row.find('.product-id-field').text(),
                            product_Id: row.find(".product-id-field").attr("data-id"),
                            lineDesc: row.find('.product-desc-field').text(),
                            unitPrice: parseFloat(row.find('span[data-field="price"]').text()),
                            originalUnitPrice: parseFloat(row.find("input.originalUnitPrice").val()),
                            realOriginalUnitPrice: parseFloat(row.find("input.realOriginalUnitPrice").val()),
                            prodGroup: row.find('.product-prodGroup').text(),
                            code: row.find('.product-code').text(),
                            ium: row.find('.product-orderUOM').text(),
                            orderQty: parseFloat(row.find('input[data-field="orderQty"]').val()),
                            scannedQty: parseFloat(row.find('.product-scannedQty').text()),
                            discount: 0,
                            listPrice: parseFloat(row.find('span[data-field="price').text()),
                            lineTotal: row.find('.product-lineTotal').text(),
                            QtyType_ModuleItem_Id: row.find('.product-QtyType_ModuleItem_Id').text(),
                            OrderUOM_Id: row.find('.product-OrderUOM_Id').text(),
                            operationStyle_ModuleItem_Id: row.find('.product-operationStyle_ModuleItem_Id').text(),
                            operationCost: row.find('.product-operationCost').text(),
                            actualoperationcost: row.find('.product-operationCost').attr("data-actualoperationcost"),
                            complimentary_ModuleItem_Id: row.find('.product-complimentary_ModuleItem_Id').text(),
                            allowVaryWeight: row.find('.product-allowvaryweight').text() === "Yes" ? true : false,
                            orderItemId: row.find('.product-orderItemId').text(),
                            comments: row.find(".product-comment").text(),
                            scannedLabel: row.find(".product-scannedlabel").text(),
                            scannedLocation: row.find(".product-scannedlocation").text(),
                            createdBy: row.find(".product-createdby").text(),
                            createdAt: row.find(".product-createdat").text(),
                            discountPer: parseFloat(row.find(".discountInput").val()) || 0,
                            discountAmt: parseFloat(row.find(".discountAmt").val()) || 0,
                            orderId: orderId
                        };
                        orderData.OrderItems.push(item);
                    }
                });

                return orderData;



            }
            // Final Submit click event
            $(".finalsubmit-action").on("click", function (e) {

                e.preventDefault();
                const isFinalSubmit = $(this).hasClass("finalsubmit-action");


                checkForApprovals(orderData).then((approvalResult) => {

                    if (approvalResult.needsApproval) {
                        $('#discountApproval').modal('show');
                        loadUserRoleApprovalUsers(); // Load users for approval
                    } else if (isFinalSubmit) {
                        saveOrder(orderData); // Save the order on final submit
                    }
                }).catch((error) => {
                    console.error("Approval check error:", error.message);
                    reject(error);
                });
            });
            // Submit Approval click event in the modal
            $(document).off('click', '#submitApproval').on('click', '#submitApproval', function (e) {
                e.preventDefault();
                var submitButton = $(this);
                submitButton.prop('disabled', true); // Disable the button

                var username = $('#username').val();
                var password = $('#password').val();
                var remarks = $('#remarksdiscount').val();

                var orderData = extractOrderDataUpdate();
                // Save discount approvals and then enable Final Submit
                saveDiscountApprovals(orderData.OrderItems, username, password, remarks)
                    .then(function () {
                        $('#discountApproval').modal('hide'); // Hide the modal
                        $(".finalsubmit-action").removeAttr("hidden").show(); // Show Final Submit button
                        $(".submit-action").hide(); // Hide Submit button
                    })
                    .catch(function (error) {
                        userMessage.show("Error", error);
                    })
                 .finally(function () {
                    submitButton.prop('disabled', false); // Re-enable the button
                });
            });


        var itemsRequiringApproval = [];


        // Function to check for approvals
    function checkForApprovals(orderItems) {


    var orderdata = extractOrderDataUpdate();
    const itemsToCheck = orderdata.OrderItems.filter(item => item.discountAmt > 0).map(item => ({
        orderId: item.orderId === 0 ? model.id : item.orderId,
        orderItemId: item.orderItemId,
        orderItemDiscount: item.discountAmt
    }));

    if (itemsToCheck.length > 0) {
        return new Promise((resolve, reject) => {
            $.ajax({
                url: '@Url.Action("CheckBulkDiscountApproval", "Orders")',
                type: 'POST',
                data: JSON.stringify(itemsToCheck),
                contentType: "application/json; charset=utf-8"
            }).done(response => {
                const itemsRequiringApproval = response.filter(r => r.needsApproval);
                resolve({
                    needsApproval: itemsRequiringApproval.length > 0,
                    approvalItems: itemsRequiringApproval
                });
            }).fail(error => {
                //console.error("Error during approval check:", error);
                reject({
                    needsApproval: false,
                    approvalItems: []
                });
            });
        });
    } else {
        return Promise.resolve({
            needsApproval: false,
            approvalItems: []
        });
    }
    }

        });


        // Function to save the order
      function saveOrder(orderData) {
    return new Promise(function (resolve, reject) {
        $.ajax({
            url: '@Url.Action("UpdateOrder", "Orders")',
            type: 'POST',
            data: JSON.stringify(orderData),
            contentType: "application/json; charset=utf-8",
            success: function (response) {
                if (response.success) {

                   $.ajax({
                url: "@Url.Action("UpdateOrderStatus", "Orders")", // Update with your controller and action names
                type: 'POST',
                data: JSON.stringify({
                    orderId: orderId,
                    newStatus: $('.order-action').val(),
                    actionName: $('.order-action').val()
                }),
                contentType: "application/json; charset=utf-8",
                success: function (response) {
                    if (response.success) {
                        // alert('Order submitted successfully!');
                        userMessage.show("Success", "The order status updated successfully!");
                        if ($('.order-action').val() === "Payment") {
                            // Enable the display of the payment section
                            $('.payment-tab').css('display', 'block');
                        } else {
                            $("#back-orders").trigger("click");
                        }
                        if (paymentData != null) {
                            sendPaymentDataToApi(paymentData, true);
                        }
                    } else {
                        userMessage.show("Error", 'Error submitting order: ' + response.message);
                    }
                },
                error: function () {
                    userMessage.show("Error", 'An error occurred while submitting the order.');
                }
            });
                }
            }
        });
    });
}







        // Save discount approvals
        function saveDiscountApprovals(orderData, username, password, remarks) {
            return new Promise(function (resolve, reject) {
                $.ajax({
                    url: '@Url.Action("ApproveDiscounts", "Orders")',
                    type: 'POST',
                    data: JSON.stringify({
                        orderData: orderData,
                        username: username,
                        password: password,
                        remarks: remarks // Assuming all items in the orderData array have the same orderId
                    }),
                    contentType: "application/json; charset=utf-8",  // Proper content type for JSON
                    success: function (response) {
                        if (response.success) {
                            resolve();
                        } else {
                            alert("Invalid Credentials!");
                        }
                    }
                });
            });
        }


        // Load users based on role
        function loadUserRoleApprovalUsers() {
            $.ajax({
                url: '@Url.Action("GetUsersList", "Orders")',
                type: 'GET',
                success: function (response) {
                    var dropdown = $('#username');
                    dropdown.empty();
                    dropdown.append('<option value="">Select User</option>');
                    response.forEach(function (user) {
                        dropdown.append('<option value="' + user.Value + '">' + user.Text + '</option>');
                    });
                },
                error: function () {
                    alert('Error loading users.');
                }
            });
        }
    }

    var selectOptions = @Html.Raw(JsonConvert.SerializeObject(Model.lstPaymentTypes))
        .map(function(type) {
            return `<option value="${type.Value}" ${type.Selected ? 'selected' : ''}>${type.Text}</option>`;
        }).join('');

$('#orders-create #addPaymentBtn').on('click', function () {
    var newRow = `
        <tr>
            <td>
            <select class="form-control paymentType">
                ${selectOptions}
              </select>
            <input type="hidden" name="OrderId" value="@Model.id" class="orderId" /></td>
            <td><input type="text" class="form-control bank"></td>
            <td><input type="text" class="form-control referenceNo"></td>
            <td><input type="number" class="form-control amount" step="0.01"></td>
            <td><button class="btn btn-danger btn-sm removePayment"><i class="fa fa-times"></i></button></td>
        </tr>
    `;
    $('#paymentTable tbody').append(newRow);
    updatePaymentTotal();
});

$(document).on('click', '#orders-create .removePayment', function () {
    $(this).closest('tr').remove();
    updatePaymentTotal();
});

$(document).on('input', '#orders-create .amount', function () {
    updatePaymentTotal();
});

    function updatePaymentTotal() {
        // Parse the OrderTotal value with thousand separators
        var orderTotal = parseFloat($('#orderTotal').text().replace(/,/g, '')) || 0;

        var total = 0;
        $('#orders-create .amount').each(function () {
            total += parseFloat($(this).val()) || 0;
        });

        // Update the Total Payment Amount display
        $('#paymentTotal').text(total.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));

        // Calculate and update the Payment Balance
        var balance = orderTotal - total;
        $('#paymentBalance').text(balance.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
    }
    // Function to remove commas and convert string to float
    function parseCurrency(value) {
        return parseFloat(value.replace(/,/g, ''));
    }

    $("#orders-create  .postToEpicore").on("click", function (e) {
        var orderId = $(this).attr("data-id");
        $.SmartMessageBox({
            title: "Alert!",
            content: 'Are you sure want to post this order to API?',
            buttons: '[No][Yes]'
        }, function (ButtonPressed) {

            if (ButtonPressed === "Yes") {
                postOrderToEpicore(orderId)
            }
        });
    });

    function postOrderToEpicore(orderId) {
        $.ajax({
            url: $("#PostOrderToApiUrl").val(), // Update with your actual API endpoint
            type: 'POST',
            data: JSON.stringify({ orderId: orderId }),
            contentType: 'application/json',
            success: function (response) {
                if (response.success) {
                    if (response.syncStatus) {
                        userMessage.show("Success", "Order successfully posted to API. \nResponse: " + response.syncMessage);
                        $("#back-orders").trigger("click");
                    } else {
                        userMessage.show("Warning", "Failed to post to the API.\n Error: " + response.syncMessage);
                        $(".refreshPage").trigger("click")
                    }
                    // You can add more actions here, like refreshing the page or updating the UI
                } else {
                    userMessage.show("Error", 'Error post to API: ' + response.message);
                    $(".refreshPage").trigger("click")
                }
            },
            error: function () {
                userMessage.show("Error", 'An error occurred while posting to API.');
                $(".refreshPage").trigger("click")
            }
        });
    }

    $('#orders-create #completePaymentBtn').on('click', function () {
        // Get the text values from the elements
        var paymentTotalText = $('#paymentTotal').text();
        var orderTotalText = $('#orderTotal').text();

        // Remove commas and convert to numbers
        var paymentTotal = parseCurrency(paymentTotalText);
        var orderTotal = parseCurrency(orderTotalText);

        // Compare the numeric values
        if (paymentTotal < orderTotal) { // !==
            userMessage.show("Error", 'Total Amount Paid does not tally with Total Order Amount!');
        }

        else {
            $.SmartMessageBox({
                title: "Alert!",
                content: '@Html.GetGlobalResource("CONFIRM_PAYMENT_MESSAGE")',
                buttons: '[No][Yes]'
            }, function (ButtonPressed) {

                if (ButtonPressed === "Yes") {
                    var paymentData = gatherPaymentData();
                    if (paymentData.length > 0) {
                        var orderId = $(".submit-action").attr("data-id");
                        updateOrder(orderId, paymentData).then(res => {

                            //sendPaymentDataToApi(paymentData, true);
                        }).catch(err => {
                            userMessage.show("Error", err)
                        })
                    } else {
                        userMessage.show("Error", 'Please add at least one payment before completing.');
                    }
                }
            });
            }

});
    $('#orders-create #savePaymentBtn').on('click', function () {

        $.SmartMessageBox({
            title: "Alert!",
            content: '@Html.GetGlobalResource("SAVEORDERPAYMENT_MESSAGE")',
            buttons: '[No][Yes]'
        }, function (ButtonPressed) {

            if (ButtonPressed === "Yes") {
                var paymentData = gatherSavePaymentData();
                if (paymentData.length > 0) {
                    var orderId = $(".submit-action").attr("data-id");
                    updateOrder(orderId, paymentData).then(res => {

                        //sendPaymentDataToApi(paymentData, false);
                    }).catch(err => {
                        userMessage.show("Error", err)
                    })
                } else {
                    userMessage.show("Error", 'Please add at least one payment before saving.');
                }
            }
        });
    });
    function gatherSavePaymentData() {
        var payments = [];

        $('#paymentTable tbody tr').each(function () {

            var row = $(this);
            var payment = {
                OrderId: row.find('.orderId').val(),
                PaymentType: row.find('.paymentType').val(),
                Bank: row.find('.bank').val(),
                RefNumber: row.find('.referenceNo').val(),
                Amount: parseFloat(row.find('.amount').val()) || 0,
                PaymentDate: new Date().toISOString(),
                PaymentStatus: 'Pending',
                Payment: 'Save'
            };
            if (payment.Amount > 0) {
                payments.push(payment);
            }
        });
        return payments;
    }

function gatherPaymentData() {
    var payments = [];

    $('#paymentTable tbody tr').each(function () {

        var row = $(this);
        var payment = {
            OrderId: row.find('.orderId').val(),
            PaymentType: row.find('.paymentType').val(),
            Bank: row.find('.bank').val(),
            RefNumber: row.find('.referenceNo').val(),
            Amount: parseFloat(row.find('.amount').val()) || 0,
            PaymentDate: new Date().toISOString(),
            PaymentStatus: 'Pending',
            Payment:payment
        };
        if (payment.Amount >= 0) {
            payments.push(payment);
        }
    });
    return payments;
}

    function sendPaymentDataToApi(paymentData, IsOrderComplete) {
    $.ajax({
        url: $("#UpdateOrderPaymentsUrl").val(), // Update with your actual API endpoint
        type: 'POST',
        data: JSON.stringify({ OrderPayments: paymentData, IsOrderComplete: IsOrderComplete }),
        contentType: 'application/json',
        success: function (response) {
            if (response.success) {

                if (paymentData[0].Payment == 'Save') {
                    // alert('Payment completed successfully!');
                    userMessage.show("Success", "Payment saved successfully!");
                }
                else {
                    // alert('Payment completed successfully!');
                    //if (response.syncStatus) {
                    //    userMessage.show("Success", "Payment completed successfully, and the order data has been posted to the API. \n API response: " + response.syncMessage);
                    //} else {
                    //    userMessage.show("Warning", "Payment completed successfully, but the order data failed to post to the API.\n Error: " + response.syncMessage);
                    //}
                    userMessage.show("Success", "Payment completed successfully");
                }
                // $("#back-orders").trigger("click");
                $(".refreshPage").trigger("click");
                // You can add more actions here, like refreshing the page or updating the UI
            } else {
                userMessage.show("Error", 'Error completing payment: ' + response.message);
            }
        },
        error: function () {
            userMessage.show("Error", 'An error occurred while processing the payment.');
        }
    });
}

// Payment functions end
    function convertDateFormat(dateStr) {
        const [day, month, year] = dateStr.split('/');
        return `${year}-${month}-${day}`;
    }


    $('#oneTimeCustomer').on('change', function() {
        if ($(this).is(':checked')) {
            $('#oneTimeCustomerFields').show(); // Show the fields
        } else {
            $('#oneTimeCustomerFields').hide(); // Hide the fields
        }
    });

    $('#orderDate').datepicker({
        dateFormat: 'dd/mm/yy',
        autoclose: true,
        minDate: 0
    }).datepicker('setDate', today);

    // Disable the date picker if orderStatus is "Completed" or "Cancelled"
    if (orderStatus === "Completed" || orderStatus === "Cancelled") {
        $('#orderDate').datepicker("disable");
    }

    $('#orderDate').attr('readonly', true);
        //$('#orderDate').on('changeDate', function (e) {
        //    $(this).val(e.format('dd/mm/yy'));
        //});
        // Initialize DataTable for the product picker modal
        var table = $('#dt_product_picker').DataTable({
            "paging": true,
            "ordering": false,
            "serverSide": true,
            "info": false,
            "searching": false,
            "responsive": true,
            "processing": true,
            "deferLoading": false,
            "columns": [
               /* { "data": null, "defaultContent": "<button class='btn btn-success btn-sm add-btn'><i class='fa fa-plus'></i></button>" },*/
                { "data": null, "defaultContent": "<input type='checkbox' class='product-checkbox'>" },
                { "data": "id", "visible": false },
                { "data": "partNumber" },
                { "data": "description" },
                { "data": "code", "visible": false },
                { "data": "prodGrup_Description" },
                { "data": "UomBasedOnCondition" },
                { "data": "unitPrice" },
                { "data": "remainingQty" },
                { "data": null, "defaultContent": "<input type='number' class='default-qty' value='1'>" },
            ],
            ajax: {
                "url": '@Url.Action("SearchProducts", "Product")', // Your API endpoint
                "type": 'POST',
                "data": function (d) {
                    // Add search parameters to the request
                    d.partNum = $('#searchPartNo').val();
                    d.code = $('#searchCode').val();
                    d.description = $('#searchDesc').val();
                    d.partGroup = $('#searchPartGroup').val();
                    d.partClass = $('#searchPartClass').val();
                    d.brand = $('#searchBrand').val();
                    d.origin = $('#searchOrigin').val();
                    d.temperature = $('#searchTemperature').val();
                    d.customerId = $("#customer").val(); // $('.selectCustomer').select2('val');
                    var selectedData = $('.selectShipTo').select2('data');
                    console.log(selectedData)
                    var selectedText = (selectedData) ? selectedData.text : null;
                    d.shipToId = selectedText;
                    var orderDateInput = $('#orderDate').val(); // Assume this is in the format YYYY-MM-DD
                    if (orderDateInput) {
                        // If the input is valid, use it; otherwise, you can set it to null or a default value
                        d.orderDate = convertDateFormat(orderDateInput); // Formats to YYYY-MM-DD
                    } else {
                        d.orderDate = null; // Or set a default date if needed
                    }
                    console.log(d);
                }
            },
        });

        var tableCustomer = $('#dt_customer_picker').DataTable({
            "paging": true,
            "ordering": false,
            "info": false,
            "searching": false,
            "responsive": true,
            "columns": [
                { "data": null, "defaultContent": "<button class='btn btn-success btn-sm add-btn-customer'><i class='fa fa-plus'></i></button>" },
                /*{ "data": null, "defaultContent": "<input type='checkbox' class='product-checkbox'>" },*/
                { "data": "id", "visible": false },
                { "data": "custID" },
                { "data": "name" },
                { "data": "address1" },
                { "data": "address2" },
                { "data": "city" },
                { "data": "state" },
            ]
        });

        // Bind click event for add button inside DataTable
        $('#dt_customer_picker tbody').on('click', '.add-btn-customer', function () {
            // Get the data of the clicked row
            var data = tableCustomer.row($(this).parents('tr')).data();
            if (data.creditHold == true) {
                $('#creditHoldModal').modal('show'); // Show the modal
                return; // Prevent further actions
            }
            var customerName = data.name;
            var customerId = data.id;
            $("#customerName").val(customerName);
            $("#customer").val(customerId).trigger('change');
            /* var currentData = $select.select2('data') ? $select.select2('data') : [];

            var newOption = {
                id: customerId,
                text: customerName
            };
            // Initialize an array to hold our data
            var dataArray = [];

            // Check the structure of currentData and convert to array if necessary
            if (Array.isArray(currentData)) {
                dataArray = currentData;
            } else if (currentData && typeof currentData === 'object') {
                dataArray = [currentData];
            }

            // Check if the option already exists
            var optionExists = dataArray.some(function(option) {
                return option.id === newCustomerId;
            });

            if (!optionExists) {
                // If the option doesn't exist, add it to the current data
                currentData.push(newOption);

                // Update the options in Select2
                $select.select2('data', currentData[0]);
            }
            $select.val(customerId).trigger('change');
            */
            $(".customerPicker").hide();
        });

        // Add selected products to table

        $('#btnAddToOrders').on('click', function () {
            // Find all checked checkboxes in the products table
            var selectedProducts = [];

            table.$('input[type="checkbox"]:checked').each(function () {
                var row = $(this).closest('tr');
                var data = table.row(row).data();
                var orderQty = row.find("input.default-qty").val();
                data['orderQty'] = orderQty;
                selectedProducts.push({
                    data: data,
                    row: row
                });
            });

            // Do something with the selected products data
            console.log('Selected products:', selectedProducts);
            selectedProducts.forEach(function (product) {
                addOrUpdateProductRow(product.data, desktop_table, mobile_table);
                // Remove the product from the original products table
                //table.row(product.row).remove().draw(false);
            });

            table.$('input[type="checkbox"]:checked').prop('checked', false);
        });

        // Apply the search filter on input change
        $('.filter-input').on('keyup', function () {
            table.column($(this).parent().index()).search(this.value).draw();
        });

        // Show the modal on Add button click
        $('#btnAdd').on('click', function () {
            // $('#productPickerModal').modal('show');
            $(".productPicker").show();
            setTimeout(function () {
                $('#dt_product_picker').DataTable().columns.adjust().responsive.recalc();
            }, 600);
        });

        $(".closeProductPicker").on("click", function () {
            $(".productPicker").hide();
        })

        // Show the modal on Add button click
        $('#btnCustomerPicker').on('click', function () {
            // $('#productPickerModal').modal('show');
            $(".customerPicker").show();
            setTimeout(function () {
                $('#dt_customer_picker').DataTable().columns.adjust().responsive.recalc();
            }, 600);
        });



        $(document).ready(function () {
            // Store the current URL or state before navigating away
            sessionStorage.setItem('previousPage', window.location.href);
        });

        // Apply the search filter on input change
        $('.filter-input').on('keyup', function () {
            var column = $(this).parent().index();
            if (table === productTable) {
                productTable.column(column).search(this.value).draw();
            } else if (table === customerTable) {
                customerTable.column(column).search(this.value).draw();
            }
        });

        // Handle the select/deselect all checkboxes for customers
        $('#selectAllCustomers').on('click', function () {
            var isChecked = $(this).prop('checked');
            $('.customer-checkbox').prop('checked', isChecked);
        });

       $('#btnCustomerPicker').on('click', function () {

        });

        // Product search begins
        $('#productSearch').on('focus', function () {
            $(this).select();
        });
        // Trigger AJAX call when search input is filled
        $('#productSearch').on('keypress', function (e) {
            if (e.which === 13) {
                SearchByPartNumber($(this).val());
            }
        });
    $('#btnAddProduct').on('click', function () {
        
        SearchByPartNumber($('#productSearch').val());
        });


    function SearchByPartNumber(partNumber) {
        var customerId = $("#customer").val(); // $('.selectCustomer').select2('val');
        var selectedData = $('.selectShipTo').select2('data');
        var selectedText = (selectedData) ? selectedData.text : null;
        var shipToId = selectedText;
        var orderDateInput = $('#orderDate').val(); // Assume this is in the format YYYY-MM-DD
        var orderDate = "";
        if (orderDateInput) {
            // If the input is valid, use it; otherwise, you can set it to null or a default value
            orderDate = convertDateFormat(orderDateInput); // Formats to YYYY-MM-DD
        } else {
            orderDate = null; // Or set a default date if needed
        }
        $.ajax({
            url: '@Url.Action("GetProductByPartNum", "Product")', // Replace with your API endpoint
            type: 'POST',
            data: { partNum: partNumber, customerId: customerId, shipToId: shipToId, orderDate: orderDate },
            success: function (response) {
                if (response.success && response.product && response.product.id) {
                    // Clear the existing table rows
                    // $('#dt2_product tbody').empty();

                    // Assuming response.product is an array of product objects
                    let product = response.product;
                        // Create a new row for each product
                    addOrUpdateProductRow(product, desktop_table, mobile_table);
                    $("#productSearch").val("");
                } else if (response.message) {
                    alert(response.message);
                } else {
                    alert('No products found or an error occurred.');
                }
            },
            error: function (xhr, status, error) {
                let errorMessage = "An error occurred while fetching product.";
                if (xhr.responseJSON && xhr.responseJSON.message) {
                    errorMessage = xhr.responseJSON.message;
                } else if (xhr.responseText) {
                    errorMessage = xhr.responseText;
                }
                alert(errorMessage);
            }
        });
    }

    $('#btnResetCustomer').on('click', function () {
            $('#searchName, #searchCustomerCode, #searchCity,#searchState').val('');
            tableCustomer.clear().draw();
        });


        // Customer search
        $('#btnSearchCustomer').on('click', function () {
            var searchName = $('#searchName').val();
            var searchCustomerCode = $('#searchCustomerCode').val();
            var searchCity = $('#searchCity').val();
            var searchState = $('#searchState').val();

            $.ajax({
                url: '@Url.Action("SearchCustomerList", "Customer")', // Replace with your actual API endpoint
                type: 'POST',
                data: { searchName: searchName, searchCustomer: searchCustomerCode, searchCity: searchCity, searchState: searchState },
                dataType: 'json',
                success: function (response) {
                    if (response.success && response.customers) {
                        // Clear existing table data
                        tableCustomer.clear();

                        // Add new data to the table
                        tableCustomer.rows.add(response.customers).draw();

                        // Reset the "select all" checkbox
                        $('#selectAll').prop('checked', false);
                    } else {
                        alert('No customers found or an error occurred.');
                    }
                },
                error: function () {
                    alert('Failed to fetch customers.');
                }
            });
        });

        // Products search
    $('#btnSearch').on('click', function () {
        table.draw();
            @*var partNo = $('#searchPartNo').val();
            var code = $('#searchCode').val();
            var desc = $('#searchDesc').val();
            var partGroup = $('#searchPartGroup').val();
            var partClass = $('#searchPartClass').val();

            $.ajax({
                url: '@Url.Action("SearchProducts", "Product")', // Replace with your actual API endpoint
                type: 'POST',
                data: { partNum: partNo, code: code, description: desc, partGroup: partGroup, partClass: partClass },
                dataType: 'json',
                success: function (response) {
                    if (response.success && response.products) {
                        // Clear existing table data
                        table.clear();

                        // Add new data to the table
                        table.rows.add(response.products).draw();

                        // Reset the "select all" checkbox
                        $('#selectAll').prop('checked', false);
                    } else {
                        alert('No products found or an error occurred.');
                    }
                },
                error: function () {
                    alert('Failed to fetch products.');
                }
            });*@
        });

        $('#btnReset').on('click', function () {
            $('#searchPartNo, #searchCode, #searchDesc, #searchBrand, #searchOrigin, #searchTemperature, #searchPartGroup, #searchPartClass').val('');
            table.clear().draw();
        });

        // Handle "select all" checkbox
        $('#selectAll').on('click', function () {
            $('.product-checkbox').prop('checked', this.checked);
        });

</script>
<script>
    $(document).ready(function () {

        updateAllTotals();
        loadDistricts();
        updatePaymentTotal();
        $(document).off("click", ".customerPicker .jarviswidget-ctrls a").on("click", ".customerPicker .jarviswidget-ctrls a", function (e) {

            e.preventDefault();
            $(".customerPicker").hide();
        });

        $(document).off("click", "#saveChanges").on("click", "#saveChanges", function () {
            $('#dt2_product tbody').find('.edit-panel-row').remove();
        });
        $(document).off('click', '.btn-edit').on('click', '.btn-edit', function (e) {
            e.preventDefault();
            e.stopImmediatePropagation();
            var row = $(this).closest('tr');

            // Check if the row already has an edit panel
            if (row.next().hasClass('edit-panel-row')) {
                // Toggle the panel if it already exists
                row.next().toggle();
                return;
            }

            // Remove any other open edit panels
            $('#dt2_product tbody').find('.edit-panel-row').remove();
            var rowData = desktop_table.row(row).data();
            console.log(rowData);
            // Prepare the edit panel HTML with 2 rows, each containing 3 fields
            var editPanel = `
<tr class="edit-panel-row">
        <td colspan="100%">
            <div class="panel panel-default">
                <div class="panel-body">
                    <div class="row">
                        <!-- Row 1: Order Type, Sales UOM, Cutting Type -->
                        <div class="col-md-4">
                            <div class="form-group">
                                <label for="orderType">Order Type</label>
                                <select id="orderType" class="form-control" name="orderType"></select>
                            </div>
                        </div>
                       <div class="col-md-4">
                            <div class="form-group">
                                <label for="salesUOM">Sales UOM</label>
                                <select id="salesUOM" class="form-control" name="salesUOM"></select> <!-- Change to select -->
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <label for="cuttingType">Cutting Type</label>
                                <select id="cuttingType" class="form-control" name="cuttingType"></select>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <!-- Row 2: Cutting Cost, Complimentary Selection, Final Qty -->
                        <div class="col-md-4">
                            <div class="form-group">
                                <label for="cuttingCost">Cutting Cost</label>
                                <input type="text" id="cuttingCost" class="form-control" name="cuttingCost" autocomplete="off" />
                            </div>
                        </div>
                        <div class="col-md-4 complimentary-input">
                            <div class="form-group">
                                <label for="complimentarySelection">Complimentary Selection</label>
                                <select id="complimentarySelection" class="form-control" name="complimentarySelection"></select>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <label for="finalQty">Order Qty</label>
                                <input type="number" id="finalQty" class="form-control" name="finalQty" />
                            </div>
                        </div>

                        <div class="col-md-4">
                            <div class="form-group">
                            <label for="productLocation">Location</label>
                            <input type="text" class="form-control" name="productLocation" id="productLocation" readonly />
                        </div>
                        </div>
                    </div>

                    <div class="row">
                        <!-- Comments Field as Full Width -->
                        <div class="col-md-12">
                            <div class="form-group">
                                <label for="comments">Comments</label>
                                <textarea id="comments-inline" class="form-control" name="comments"></textarea>
                            </div>
                        </div>
                    </div>

                    <button id="saveChanges" class="btn btn-primary">Save Changes</button>
                </div>
            </div>
        </td>
</tr>
`;

            // Insert the edit panel right below the current row
            row.after(editPanel);
            debugger;
            // Retrieve the product part number from the current row
            var partNum = row.find('.product-id-field').text(); // Assuming partNum is stored here
            // Load values to preselect/fill inputs
            var complimentaryId = row.find('.product-complimentary_ModuleItem_Id').text();
            var cuttingTypeId = row.find('.product-operationStyle_ModuleItem_Id').text();
            var cuttingCost = row.find('.product-operationCost').text();
            var actualCuttingCost = row.find('.product-operationCost').data("data-actualoperationcost");
            var curQty = row.find('input[data-field="orderQty"]').val();
            var curSaleUomId = row.find(".product-OrderUOM_Id").text();
            var curSaleUomText = row.find(".product-orderUOM").text();
            var currentQtyTypeId = row.find(".product-QtyType_ModuleItem_Id").text();
            var productLocation = row.find('.product-location').text().trim(); // ✅ Extract from the table
            var scanLabel = row.find('.product-scannedlabel').text().trim();
            editPanel = editPanel.replace('id="productLocation"', `id="productLocation" value="${productLocation}"`);

            var comments = row.find(".product-comment").text();
            $("#comments-inline").val(comments);

            // AJAX call to fetch product details from ProductPanelDetail API
            $.ajax({
                url: '@Url.Action("ProductPanelDetail", "Product")', // Adjust this URL to your actual API route
                type: 'POST',
                data: { partNum: partNum },
                success: function (response) {
                    if (response.success) {
                        var chkVaryWChecked = false;
                        if (response.product.standardFullQty === "Yes" && response.product.allowVaryWeight === "Yes") {
                            chkVaryWChecked = false;
                        } else if (response.product.standardFullQty === "Yes" && response.product.allowVaryWeight === "No") {
                            // Set chkStandardFullQty to true and disable, chkVaryW to false
                            chkVaryWChecked = false;
                        } else {
                            // Set chkStandardFullQty to false and chkVaryW based on allowSellingVaryWeight
                            if (response.product.allowVaryWeight === "Yes") {
                                chkVaryWChecked = true;
                            } else {
                                chkVaryWChecked = false;
                            }
                        }
                        if (chkVaryWChecked) {
                            // If chkVaryWChecked is true, allow interaction with salesUOM
                            $('#salesUOM').prop('disabled', false);
                            $('#salesUOM').append(new Option(curSaleUomText, curSaleUomId))
                            $("#salesUom").val(curSaleUomId);
                        } else {
                            // If chkVaryWChecked is false, make salesUOM "read-only" by disabling it
                            $('#salesUOM').prop('disabled', true);
                        }

                        // Populate the fields based on the API response
                        // $('#salesUOM').val(response.product.part_SalesUM);
                        $('#cuttingCost').val(actualCuttingCost ? actualCuttingCost : "");
                        $('#finalQty').val(curQty);

                        var conversionFactor = response.product.conversionFactor;

                        var cuttingTypes = response.operationalStyles;
                        var $cuttingTypeDropdown = $('#cuttingType');
                        $cuttingTypeDropdown.attr("data-conversionFactor", conversionFactor);
                        $cuttingTypeDropdown.empty(); // Clear the current options

                        if (cuttingTypes.length === 0) {
                            // If cuttingTypes is empty, disable the dropdown
                            $cuttingTypeDropdown.append(new Option('No Cutting Types Available', '', true, true));
                            $cuttingTypeDropdown.prop('disabled', true); // Disable the dropdown
                        } else {
                            // If cuttingTypes is not empty, enable the dropdown and populate it
                            $cuttingTypeDropdown.prop('disabled', false);
                            $cuttingTypeDropdown.append(new Option('Select Cutting Type', '', true, true));

                            $.each(cuttingTypes, function (index, style) {
                                $cuttingTypeDropdown.append(new Option(style.name, style.id));
                            });

                            if (cuttingTypeId) {
                                $cuttingTypeDropdown.val(cuttingTypeId);
                            }
                        }

                        // Populate the Complimentary Selection dropdown
                        var complimentaries = response.complimentaries;
                        var $complimentaryDropdown = $('#complimentarySelection');
                        $complimentaryDropdown.empty(); // Clear the current options
                        $complimentaryDropdown.append(new Option('Select Complimentary', '', true, true));

                        $.each(complimentaries, function (index, complimentary) {
                            $complimentaryDropdown.append(new Option(complimentary.name, complimentary.id));
                        });

                        // Pre-select the complimentary selection based on the complimentaryId
                        if (complimentaryId) {
                            $complimentaryDropdown.val(complimentaryId);
                        }
                        if (!chkVaryWChecked && response.product.AllowLooseSelling != true) {
                            // Populate the Order Type dropdown
                            var orderTypes = response.orderType;
                            var $orderTypeDropdown = $('#orderType');

                            // Clear the current options
                            $orderTypeDropdown.empty();
                            $orderTypeDropdown.append(new Option('Select Order Type', '', true, true));

                            $.each(orderTypes, function (index, order) {
                                // Exclude "Loose Quantity"
                                if (order.name !== "Loose Quantity") {
                                    // Append the order to the dropdown
                                    var newOption = new Option(order.name, order.id);

                                    // Set "Full Quantity" as the default selected option
                                    if (order.name === "Full Quantity") {
                                        $(newOption).prop('selected', true);
                                    }

                                    $orderTypeDropdown.append(newOption);
                                }
                            });
                        } else {
                            // Populate the Order Type dropdown
                            var orderTypes = response.orderType;
                            var $orderTypeDropdown = $('#orderType');
                            $orderTypeDropdown.empty(); // Clear the current options
                            $orderTypeDropdown.append(new Option('Select Order Type', '', true, true));

                            $.each(orderTypes, function (index, order) {
                                $orderTypeDropdown.append(new Option(order.name, order.id));
                            });
                        }
                        if (currentQtyTypeId) {
                            $orderTypeDropdown.val(currentQtyTypeId);
                        }
                        //Later if require enable it
                        //if (!scanLabel) {
                        //    // scanLabel is null, undefined, or empty string -> ENABLE the dropdown
                        //    $('#orderType').prop('disabled', false);
                        //} else {
                        //    // scanLabel has a value -> DISABLE the dropdown
                        //    $('#orderType').prop('disabled', true);
                        //}

                        // Attach change event to the complimentarySelection dropdown
                        $('#complimentarySelection').on('change', function () {
                            // Get the selected text of complimentary
                            var selectedText = $('#complimentarySelection option:selected').text();
                            var selectedVal = $('#complimentarySelection option:selected').val();
                            if (selectedVal) {
                                // Update the previous row's .product-complimentary class with the selected value
                                row.find('.product-complimentary').text(selectedText);
                                row.find('.product-complimentary_ModuleItem_Id').text(selectedVal);
                            } else {
                                row.find('.product-complimentary').text("");
                                row.find('.product-complimentary_ModuleItem_Id').text("-");
                            }
                        });

                        // Attach change event to the complimentarySelection dropdown
                        $('#cuttingType').on('change', function () {
                            // Get the selected text of complimentary
                            var selectedText = $('#cuttingType option:selected').text();
                            if ($('#cuttingType option:selected').val()) {
                                // Update the previous row's .product-complimentary class with the selected value
                                row.find('.product-cuttingtype').text(selectedText);
                                row.find('.product-operationStyle_ModuleItem_Id').text($('#cuttingType option:selected').val());
                            } else {
                                row.find('.product-cuttingtype').text("");
                                row.find('.product-operationStyle_ModuleItem_Id').text("");
                                row.find('.product-cuttongcost').text("-");
                                $('#cuttingCost').val("");
;                            }
                        });

                        // Attach change event to the complimentarySelection dropdown
                        $('#cuttingCost').on('change', function () {
                            // Get the selected text of complimentary
                            var selectedText = $('#cuttingCost').val();
                            // Update the previous row's .product-complimentary class with the selected value
                            row.find('.product-cuttongcost').text(selectedText);
                            // Multiply from the qty and apply to cutting cost
                            var finalQtyWD = Math.floor(parseFloat($("#finalQty").val()) || 0);
                            var cuttingCostWd = parseFloat(selectedText) || 0;
                            var finalCuttingCost = finalQtyWD * cuttingCostWd;
                            row.find(".product-cuttongcost").text(finalCuttingCost.toFixed(2));
                            row.find('.product-operationCost').text(finalCuttingCost.toFixed(2));

                            row.find('.product-operationCost').attr("data-actualoperationcost", selectedText);
                        });

                        var $uomSelect = $('#salesUOM'); // Sales UOM dropdown
                        var $orderTypeSelect = $('#orderType'); // Order Type dropdown (Full/Loose)
                        var uomPrices = response.product.UomPrices;
                        var FullUom = response.product.FullUom;
                        var looseUom = response.product.looseUom != "" ? response.product.looseUom : response.product.uomClass_BaseUOMCode;
                        // Function to update the UOM dropdown based on order type
                        function updateUOMDropdown(orderType) {
                            // Clear the current UOM options
                            $uomSelect.empty();

                            // Add a placeholder option
                            // $uomSelect.append(new Option('', '', true, true));

                            // If orderType is 'Full', only show the full UOM
                            if (orderType === '7704') {
                                $uomSelect.append(new Option(FullUom, FullUom));
                                $uomSelect.val(FullUom).trigger('change');
                            }
                            // If orderType is 'Loose', show all available UOMs from UomPrices
                            else if (orderType === '7705') {
                                $uomSelect.append(new Option(looseUom, looseUom));
                                $.each(uomPrices, function (key, value) {
                                    $uomSelect.append(new Option(value, key));
                                });
                                if (response.product.AllowLooseSelling) {
                                    $uomSelect.val(looseUom).trigger('change');
                                } else {
                                    $uomSelect.val(curSaleUomText).trigger('change');
                                }
                            }

                            // Trigger change event to update any other logic
                            // $uomSelect.val(null).trigger('change');
                        }

                        // Bind change event to orderType dropdown
                        $orderTypeSelect.on('change', function () {
                            var selectedOrderType = $(this).val();  // Get the selected value (Full/Loose)
                            var $currentRow2 = $(this).closest('tr');
                            var $prevTr2 = $currentRow2.prev('tr');
                            $prevTr2.find(".product-QtyType_ModuleItem_Id").text(selectedOrderType);
                            updateUOMDropdown(selectedOrderType);
                        });

                        // Initial population of UOM dropdown (optional, depending on the initial state)
                        var initialOrderType = $orderTypeSelect.val(); // Assuming orderType has an initial value
                        updateUOMDropdown(initialOrderType);

                    } else {
                        alert('Error retrieving product details');
                    }
                },
                error: function (xhr, status, error) {
                    console.error('AJAX error: ', status, error);
                    alert('Failed to retrieve product details.');
                }
            });
        });


        $(document).off("click", ".refreshPage").on("click", ".refreshPage", function () {
            var id = $(this).attr("data-id")
            var partName = "Orders/";
            var readOnly = false;
            var destInner = $(this).closest('div.page-content').attr("id")
            var actionUrl = partName + "Edit/";
            var elem = $('.table-congif[value="' + partName + '"]');
            var destOuter = $(elem).attr('data-edit-dest');
            var businessId = $(elem).attr("data-filterId")
            var param = { id: id, businessId: businessId, readOnly: readOnly }
            if (actionUrl) {
                if (destInner) {
                    navigate.navigateElementByParameter(actionUrl, param, $("#" + destInner));
                } else if (destOuter) {
                    navigate.navigateElementByParameter(actionUrl, param, $(destOuter));
                }
                else {
                    navigate.viewByParameter(actionUrl, param);
                }
            }
        });


        $(document).off("change", "#comments-inline").on("change", "#comments-inline", function () {
            var $currentRow = $(this).closest('tr');
            var $prevTr = $currentRow.prev('tr');
            $prevTr.find(".product-comment").text($(this).val());
        });
        $(document).off("change", "#salesUOM").on("change", "#salesUOM", function () {
            var $currentRow = $(this).closest('tr');
            var $prevTr = $currentRow.prev('tr');
            var selectedText = $('#salesUOM option:selected').text();
            $prevTr.find(".product-OrderUOM_Id").text($(this).val());
            $prevTr.find(".product-orderUOM").html(selectedText);
            // Call the api
            var customerId = $("#customer").val(); // $('.selectCustomer').select2('val');
            var selectedData = $('.selectShipTo').select2('data');
            var selectedText = (selectedData) ? selectedData.text : null;
            var shipToId = selectedText;
            var orderDateInput = $('#orderDate').val(); // Assume this is in the format YYYY-MM-DD
            var orderDate = "";
            var partNumber = $prevTr.find(".product-id-field").text();

            if (orderDateInput) {
                // If the input is valid, use it; otherwise, you can set it to null or a default value
                orderDate = convertDateFormat(orderDateInput); // Formats to YYYY-MM-DD
            } else {
                orderDate = null; // Or set a default date if needed
            }
            $("#cuttingType").trigger("change");
            $.ajax({
                url: '@Url.Action("GetProductByPartNum", "Product")', // Replace with your API endpoint
                type: 'POST',
                data: { partNum: partNumber, customerId: customerId, shipToId: shipToId, orderDate: orderDate },
                success: function (response) {
                    if (response.success && response.product && response.product.id) {
                        let product = response.product;

                        // Get the selected UOM from the dropdown
                        var selectedUom = $('#salesUOM').val(); // Assuming #salesUOM is the ID of the dropdown
                        selectedUom = selectedUom.toUpperCase();
                        var product2 = (product.productStockBalances || []).find(p => p.uom === selectedUom);

                        if (product2 && product2.remainingQty != null) {
                            $prevTr.find(".product-avlQty").text(product2.remainingQty)
                        } else {
                            $prevTr.find(".product-avlQty").text("0")
                        }

                        // Validate Stock Balance for UOM change

                        if (validateStockBalance == "True") {

                        }

                        selectedUom = selectedUom.toUpperCase();

                        // Check if UomPrices exists and contains the selected UOM's price
                        if (product.UomPrices && product.UomPrices[selectedUom + '_Price']) {
                            var unitPrice = product.UomPrices[selectedUom + '_Price'];

                            // Update the original unit price
                            $prevTr.find('input.originalUnitPrice').val(unitPrice.toFixed(2));
                            $prevTr.find('input.originalUnitPriceInput').val(unitPrice.toFixed(2));
                            $prevTr.find('input.realOriginalUnitPrice').val(unitPrice.toFixed(2));

                            // Get cutting cost and complimentary status
                            var cuttingCostText = $prevTr.find('.product-cuttongcost').text().trim();
                            var cuttingTypeText = $prevTr.find('.product-cuttingtype').text().trim();
                            var complimentaryText = $prevTr.find('.product-complimentary').text().trim().toLowerCase();

                            var cuttingCost = 0;
                            if (cuttingTypeText !== "" && cuttingCostText !== "-" && !isNaN(parseFloat(cuttingCostText))) {
                                cuttingCost = parseFloat(cuttingCostText);
                            }

                            var finalPrice;
                            if (complimentaryText === 'foc' || complimentaryText === 'sample') {
                                finalPrice = 0; // cuttingCost;
                            } else {
                                finalPrice = unitPrice; //  + cuttingCost;
                            }

                            // Update displayed price
                            $prevTr.find('span[data-field="price"]').text(finalPrice.toFixed(2));

                            // Recalculate line total
                            var qty = parseFloat($prevTr.find('input[data-field="orderQty"]').val()) || 0;
                            var lineTotal = (finalPrice * qty).toFixed(2);
                            $prevTr.find('.product-lineTotal').text(formatNumberWithThousandSeparator(lineTotal));

                            updateAllTotals();
                        }

                    } else {
                        alert('No products found or an error occurred.');
                    }
                },
                error: function () {
                    alert('Failed to fetch products.');
                }
            });

        });
        @*$(document).off("change", "#orderType").on("change", "#orderType", function () {
            var orderTypeId = $(this).val(); // Get the selected order type ID
            var $currentRow = $(this).closest('tr');
            var $prevTr = $currentRow.prev('tr');
            var curSaleUomId = $prevTr.find(".product-OrderUOM_Id").text();
            var curSaleUomText = $prevTr.find(".product-orderUOM").text();
            $prevTr.find(".product-QtyType_ModuleItem_Id").text(orderTypeId);

            if (orderTypeId) {
                // AJAX call to fetch UOM based on selected order type
                $.ajax({
                    url: '@Url.Action("SearchOrderUOM", "Product")',  // Replace with your actual API endpoint
                    type: "POST",
                    data: { orderTypeId: orderTypeId },   // Send the selected Order Type ID to the server
                    dataType: "json",
                    success: function (data) {
                        var $uomSelect = $('#salesUOM'); // Assuming this is your Sales UOM dropdown
                        // $uomSelect.css('border', '1px solid #ccc');

                        // Destroy existing Select2 instance if it exists (if using Select2 for styling)
                        if ($uomSelect.data('select2')) {
                            $uomSelect.select2('destroy');
                        }

                        // Clear current UOM options
                        $uomSelect.empty();

                        // Add a placeholder option
                        $uomSelect.append(new Option('', '', true, true)); // Placeholder for empty selection

                        // Populate the UOM dropdown with new options from the server response
                        $.each(data.OrderUOM, function (index, item) {
                            $uomSelect.append(new Option(item.code, item.id));  // Append each UOM option
                        });
                        if (curSaleUomId) {
                            $uomSelect.val(curSaleUomId).trigger('change');
                        } else {
                            // Reset dropdown to placeholder value
                            $uomSelect.val(null).trigger('change');
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Error loading UOMs:', error);
                    }
                });
            }
        });*@

        function getProductPrices() {
            var shipToVal = $('#shipTo').val();
            if (!shipToVal) {
                return;
            }
            var orderDate = "";
            var orderDateInput = $('#orderDate').val(); // Assume this is in the format YYYY-MM-DD
            if (orderDateInput) {
                orderDate = convertDateFormat(orderDateInput); // Formats to YYYY-MM-DD
            } else {
                orderDate = null; // Or set a default date if needed
            }
            var requestData = {
                custNum: $('#customer').val(),
                shipToId: $('#shipTo').val(),
                orderDate: orderDate,
                products: []
            };
            $('#dt2_product tbody tr').each(function (index) {
                if (!$(this).hasClass('edit-panel-row') && !$(this).hasClass('child')) {
                    var row = $(this);
                    var product = {
                        index: index,
                        partNumber: row.find('.product-id-field').text(),
                        uom: row.find('.product-orderUOM').text()
                    };
                    requestData.products.push(product);
                }
            });
            // Make the AJAX call to the new API endpoint
            $.ajax({
                url: '@Url.Action("GetProductPrices", "Product")', // Replace with your actual endpoint
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(requestData),
                success: function (response) {
                    if (response.success) {
                        updateProductPrices(response.data);
                    } else {
                        alert('Error: ' + response.errorMessage);
                    }
                },
                error: function (xhr, status, error) {
                    alert('An error occurred while fetching product prices.');
                }
            });
        }

        function updateProductPrices(priceData) {
            priceData.forEach(function (item) {
                var row = $('#dt2_product tbody tr').eq(item.index);
                if (row.length > 0 && row.find('.product-id-field').text() === item.partNumber) {
                    if (item.price !== null) {
                        // Update the original unit price
                        row.find('input.originalUnitPriceInput').val(item.price.toFixed(2));
                        row.find('input.originalUnitPrice').val(item.price.toFixed(2));
                        row.find('input.realOriginalUnitPrice').val(item.price.toFixed(2));

                        // Get cutting cost and complimentary status
                        var cuttingCostText = row.find('.product-cuttongcost').text().trim();
                        var cuttingTypeText = row.find('.product-cuttingtype').text().trim();
                        var complimentaryText = row.find('.product-complimentary').text().trim().toLowerCase();

                        var cuttingCost = 0;
                        if (cuttingTypeText !== "" && cuttingCostText !== "-" && !isNaN(parseFloat(cuttingCostText))) {
                            cuttingCost = parseFloat(cuttingCostText);
                        }

                        var finalPrice;
                        if (complimentaryText === 'foc' || complimentaryText === 'sample') {
                            finalPrice = 0; // cuttingCost;
                        } else {
                            finalPrice = item.price; //  + cuttingCost;
                        }

                        // Update displayed price
                        row.find('span[data-field="price"]').text(finalPrice.toFixed(2));

                        // Recalculate line total
                        var qty = parseFloat(row.find('input[data-field="orderQty"]').val()) || 0;
                        var lineTotal = (finalPrice * qty).toFixed(2);
                        row.find('.product-lineTotal').text(formatNumberWithThousandSeparator(lineTotal));

                        console.log("Index:", item.index, "Part Number:", item.partNumber, "Original Price:", item.price.toFixed(2),
                                    "Cutting Cost:", cuttingCost.toFixed(2), "Final Price:", finalPrice.toFixed(2));
                    } else {
                        console.warn('Price not available for ' + item.partNumber + ' at index ' + item.index + ': ' + item.errorMessage);
                    }
                } else {
                    console.warn('Row not found or part number mismatch for index ' + item.index + ' and part number ' + item.partNumber);
                }
            });

            // After updating all rows, recalculate the order total
            // updateOrderTotal();
            updateAllTotals();
        }

        function calculateOrderTotal() {
            var total = 0;
            $('#dt2_product tbody tr').each(function () {
                var lineTotal = parseFloat($(this).find('.product-lineTotal').text()) || 0;
                total += lineTotal;
            });
            $('#orderTotal').text(total.toFixed(2)); // Assuming you have an element to display the total
        }

        // Call this function when you need to update prices, e.g., after loading products or changing customer/ship-to
        // getProductPrices();
        if (isCloneScreen == "True") {
            getProductPrices();
        }
        $('#customer, #shipTo, #orderDate').change(function () {
            getProductPrices();
            if ($('.productPicker').is(':visible')) {
                table.draw()
            } else {
                console.log('The div is hidden');
            }
        });

        $(document).off('change', '#cuttingType').on('change', '#cuttingType', function () {
            var cuttingTypeId = $(this).val(); // Get the selected cutting type ID

            if (cuttingTypeId) {
                $.ajax({
                    url: '@Url.Action("GetOperationStyleRemarks", "Product")', // Your API endpoint
                    type: "POST",
                    data: { operationStyleId: cuttingTypeId }, // Pass the selected cutting type ID
                    dataType: "json",
                    success: function (data) {
                        if (data.Remarks) {
                            // Bind the remarks or cutting cost to the input textbox
                            var uomName = $("#salesUOM").val();
                            var conversionFactor = 1;
                            if (uomName == "CTN") {
                                var conversionFactor = parseFloat($('#cuttingType').attr("data-conversionFactor")) || 1;
                            }
                            var cuttingCost = parseFloat(data.Remarks.remarks) || 1;
                            var finalCuttingCost = cuttingCost * conversionFactor;
                            $('input#cuttingCost').val(finalCuttingCost.toFixed(2)).trigger("change"); // Assuming you want to update this input field
                            updateAllTotals();
                        } else {
                            alert('Error retrieving remarks.');
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Error retrieving operation style remarks:', error);
                        alert('Failed to retrieve operation style remarks.');
                    }
                });
            } else {
                $('input#cuttingCost').val("").trigger("change"); // Assuming you want to update this input field
                updateAllTotals();
            }
        });

        $(document).off('change', '#complimentarySelection').on('change', '#complimentarySelection', function () {
            var complimentaryId = $(this).val();

            // Find the <tr> that contains the current .selectComplimentary
            var $currentRow = $(this).closest('tr');

            // Navigate to the previous row and find the span[data-field="price"] inside the appropriate <td>
            var $priceSpan = $currentRow.prev('tr').find('td span[data-field="price"]');

            // Check if data-oldunitcost attribute exists, if not set the current value as the original price
            if (!$priceSpan.attr('data-oldunitcost')) {
                $priceSpan.attr('data-oldunitcost', $priceSpan.text().trim()); // Save the original price in data-oldunitcost
            }

            if (complimentaryId) {
                $.ajax({
                    url: '@Url.Action("GetremarksComplimentary", "Product")',
                    type: "POST",
                    data: { complimentaryId: complimentaryId },
                    dataType: "json",
                    success: function (data) {
                        if (data.Remarks && data.Remarks.remarks) {
                            // Update the price span with the new value from remarks
                            $priceSpan.text(data.Remarks.remarks);
                            updateAllTotals();
                        } else {
                            // Restore the original price if no remarks are returned
                            $priceSpan.text($priceSpan.attr('data-oldunitcost'));
                            alert('No remarks available, original price restored.');

                        }
                    },
                    error: function () {
                        // Handle any errors during the AJAX call
                        $priceSpan.text($priceSpan.attr('data-oldunitcost')); // Restore the original price
                        alert('Error retrieving remarks.');
                    }
                });
            } else {
                // If no complimentaryId is selected, restore the original price
                $priceSpan.text($priceSpan.attr('data-oldunitcost'));
                updateAllTotals();
            }
        });


    })
</script>

<script>

    function updateSerialNumbers() {
        desktop_table.rows().every(function (rowIdx, tableLoop, rowLoop) {
            // Get the serial number cell in the row
            var serialNumberCell = this.cell(rowIdx, 2); // Assuming serial number is in the first column
            serialNumberCell.data(rowIdx + 1);  // Set the serial number (index + 1)
        });
    }

    function addOrUpdateProductRow(product, desktop_table, mobile_table) {
        debugger;
        
        // Check if a row with the same product ID already exists
        var tbody = $('#dt2_product tbody');
        var existingRow = tbody.find('tr td').find('span[data-id="' + product.id + '"]');
        var orderQty = product.orderQty ? parseFloat(product.orderQty) : 1;
        if (product && product.weightValue && !isNaN(product.weightValue)) {
            orderQty = parseFloat(product.weightValue);
        }
        console.log("remainingQty :" + product.remainingQty);
        console.log("validateStockBalance :" + validateStockBalance);
        if (product.remainingQty === null && validateStockBalance == "True") {
            alert("Insufficient Stock Balance! Stock balance does not exist!");
            return;
        }
        let splitSerialNumber = "";
        let splitLocation = "";
        if (product.serialNumber) {
            const arraySerialNumber = product.serialNumber.split('|');
            splitSerialNumber = arraySerialNumber[0].trim();
            splitLocation = arraySerialNumber[1] ? arraySerialNumber[1].trim() : "";
            console.log("splitSerialNumber :" + splitSerialNumber + " And splitLocation :" + splitLocation);
        }
        var existingOrderQty = orderQty;
        var isLooseSerialNumExistInOrderDetail = false;
        $('#dt2_product tbody tr').each(function () {
            if (!$(this).hasClass('edit-panel-row')) {
                var row = $(this);
                var partNum = row.find('.product-id-field').text().trim();
                var scannedLabel = row.find('.product-scannedlabel').text().trim();
                console.log(partNum + " | " + scannedLabel);
                if (scannedLabel!="" && splitSerialNumber == scannedLabel) {

                    isLooseSerialNumExistInOrderDetail = true;
                }
                var orderQty = parseFloat(row.find('input[data-field="orderQty"]').val()) || 0;

                // Accumulate order quantity for matching part numbers
                if (partNum === product.partNumber) {
                    existingOrderQty += orderQty;
                }
            }
        });
        if (isLooseSerialNumExistInOrderDetail) {
            alert(`Barcode (${product.serialNumber}) is already scanned in OrderItems!`);
            return;
        }
        if (existingOrderQty > product.remainingQty && validateStockBalance == "True") {
            alert(`Insufficient Stock Balance! Order Qty (${existingOrderQty}) is more than Available Qty (${product.remainingQty}).`);
            return;
        }
        var orderQtyExists = product.orderQty ? true : false;

        if (existingRow.length > 0) {
            var existingTr = existingRow.parents("tr");
            // If the product already exists, update the order quantity
            var qtyInput = existingTr.find('input[data-field="orderQty"]');
            var currentQty = parseFloat(qtyInput.val());
            if (orderQtyExists) {
                qtyInput.val(orderQty);
            } else {
                qtyInput.val(currentQty + 1); // Increment the quantity by 1
            }
            // Update line total
            var unitPrice = parseFloat(existingTr.find('span[data-field="price"]').text());
            var lineTotal = (unitPrice * parseFloat(qtyInput.val())).toFixed(2);
            existingTr.find('.product-lineTotal').text(lineTotal);

        } else {
            // Prepare row details from product object
            var productId = product.id || '';
            var productSearch = product.partNumber || '';
            var description = product.description || '';
            var unitPrice = parseFloat(product.unitPrice || 0).toFixed(2);

            var orderUOM = product.part_SalesUM || '';
            var fullUom = product.FullUom;

            var chkVaryWChecked = false;
            if (product.standardFullQty === "Yes" && product.allowVaryWeight === "Yes") {
                chkVaryWChecked = false;
            } else if (product.standardFullQty === "Yes" && product.allowVaryWeight === "No") {
                // Set chkStandardFullQty to true and disable, chkVaryW to false
                chkVaryWChecked = false;
            } else {
                // Set chkStandardFullQty to false and chkVaryW based on allowSellingVaryWeight
                if (product.allowVaryWeight === "Yes") {
                    chkVaryWChecked = true;
                } else {
                    chkVaryWChecked = false;
                }
            }
            var defaultUom = "";
            if (!chkVaryWChecked) {
                defaultUom = fullUom;
            } else {
                defaultUom = orderUOM;
            }
            debugger;
            var qtyType_ModuleItem_Id = product.QtyType_ModuleItem_Id || '7704';
            if (!chkVaryWChecked && product.AllowLooseSelling != true) {

            } else {
                qtyType_ModuleItem_Id = '7705';
                defaultUom = product.looseUom != "" ? product.looseUom : product.uomClass_BaseUOMCode; // orderUOM;
            }
            console.log(product.productStockBalances)
            // Validate the stock balance for this uom
            // Find product stock with matching part number and default UOM
            var selectedPartNumber = productSearch;
            var defaultUomText = defaultUom.toUpperCase();
            var product2 = (product.productStockBalances || []).find(p => p.partNumber === selectedPartNumber && p.uom === defaultUomText);

            if ((!product2 || product2.remainingQty === null) && validateStockBalance == "True") {
                alert("Insufficient Stock Balance! Stock balance does not exist!");

                return;
            }
            if (product2 && product2.remainingQty !== null) {
                product.remainingQty = product2.remainingQty;
            }

            // Calculate total order quantity for the selected part number
            var existingOrderQty = orderQty; // Initial order quantity
            $('#dt2_product tbody tr').each(function () {
                if (!$(this).hasClass('edit-panel-row')) {
                    var row = $(this);
                    var partNum = row.find('.product-id-field').text();
                    var rowOrderQty = parseFloat(row.find('input[data-field="orderQty"]').val()) || 0;

                    // Accumulate order quantity for matching part numbers
                    if (partNum === selectedPartNumber) {
                        existingOrderQty += rowOrderQty;
                    }
                }
            });

            // Validate against product's remaining quantity
            if (product2 && existingOrderQty > product2.remainingQty && validateStockBalance == "True") {
                alert(`Insufficient Stock Balance! Order Qty (${existingOrderQty}) is more than Available Qty (${product2.remainingQty}).`);
                return;
            }

            

            if (product.UomPrices) {
                var defaultUomText = defaultUom.toUpperCase();
                var uomPriceKey = defaultUomText + "_Price";
                console.log(defaultUomText);
                unitPrice = parseFloat((product.UomPrices && product.UomPrices[uomPriceKey]) || product.unitPrice || 0).toFixed(2);
            }

            var prodGroup = product.prodGrup_Description || '';
            var code = product.partCode || '';
            var lineTotal = (unitPrice * orderQty).toFixed(2);            
            var orderUOM_Id = product.OrderUOM_Id || '';
            var operationStyle_ModuleItem_Id = product.operationStyle_ModuleItem_Id || '';
            var operationCost = product.operationCost || '';
            var complimentary_ModuleItem_Id = product.complimentary_ModuleItem_Id || '';
            var allowVaryWeight = product.allowVaryWeight;
            var defaultUomId = product.defaultUomId;
            var avlQty = product.remainingQty || 0;
            var scannedLabel = product.allowVaryWeight === "Yes" ? splitSerialNumber : "" ;//product.serialNumber || "";
            var scannedLocation = product.allowVaryWeight === "Yes" ? splitLocation : "";//product.serialNumber || "";
            var conversionFactor = product.conversionFactor || 1;            

            //debugger
            var scannedQtyField = isEdit == "yes" ? "<td class='product-scannedQty'></td>" : "";
            var allowDecimals = product.allowVaryWeight === "Yes";
            var stepValue = allowDecimals ? "0.01" : "1";
            var isReadOnly = scannedLabel.trim() !== "" ? "readonly" : "";
            var qtyField = `
                <td>
                    <input
                        type="number"
                        class="form-control orderQtyInput"
                        data-field="orderQty"
                        value="${orderQty}"
                        step="${stepValue}"
                        ${isReadOnly}
                    />
                </td>`;
            var discountInputFld = `<input type="number" class="form-control discountInput" min="0" max="100" step="0.01" />`;
            // Construct the row HTML
            var row = `
                        <tr>
                            <td>
                                <button class="btn btn-danger btn-sm btn-remove"><i class="fa fa-times"></i></button>
                                <button class="btn btn-sm btn-success btn-edit"><i class="fa fa-edit"></i></button>
                            </td>
                            <td hidden>${productId}</td>
                            <td class="product-id-s-no"></td>
                            <td class="product-id-field" data-id="${productId}">${productSearch}</td>
                            <td class="product-desc-field">${description}</td>
                            <td class="product-code" hidden>${code}</td>
                            <td class="product-allowvaryweight">${allowVaryWeight}</td>
                            <td class="product-cuttingtype">-</td>
                            <td class="product-cuttongcost">-</td>
                            <td class="product-complimentary">-</td>
                            <td>
                                <input type="number" class="form-control originalUnitPriceInput" value="${unitPrice}" />
                            </td>
                            <td><span data-field="price">${unitPrice}</span><input type="hidden" name="originalUnitPrice" class="originalUnitPrice" value="${unitPrice}">
                            <input type="hidden" name="realOriginalUnitPrice" class="realOriginalUnitPrice" value="${unitPrice}"></td>
                            <td class="product-discountField">${discountInputFld}<input type="hidden" class="discountAmt" value="0" /></td>
                            <td class="product-orderUOM">${defaultUom}</td>
                            <td class="product-avlQty">${avlQty}</td>
                            ${qtyField}
                            ${scannedQtyField}
                            <td class="product-lineTotal">${lineTotal}</td>
                            <td class="product-QtyType_ModuleItem_Id" hidden>${qtyType_ModuleItem_Id}</td>
                            <td class="product-OrderUOM_Id" hidden>${defaultUomId}</td>
                            <td class="product-operationStyle_ModuleItem_Id" hidden>${operationStyle_ModuleItem_Id}</td>
                            <td class="product-operationCost" hidden data-conversionFactor="${conversionFactor}">${operationCost}</td>
                            <td class="product-complimentary_ModuleItem_Id" hidden>${complimentary_ModuleItem_Id}</td>
                            <td hidden>
                            <span class="product-orderItemId"></span>
                            <span class="product-comment"></span>
                            <span class="product-scannedlabel">${scannedLabel}</span>
                            <span class="product-scannedlocation">${scannedLocation}</span>
                            <span class="product-createdby"></span>
                            <span class="product-createdat"></span>
                            <span class="product-prodGroup">${prodGroup}</span>
                            <span class="product-returnTotal">0</span>
                            </td>
                            <td class="product-freezer" hidden>TEST</td>
                        </tr>
                    `;

            // Add new row to the table
            tbody.prepend(row);
            // If using DataTables
            desktop_table.row.add($(row)).draw();
            desktop_table.order([0, 'asc']).draw();  // Adjusting the order to display the newest row first

            setTimeout(() => {
                console.log("This called");
                desktop_table.columns.adjust().responsive.recalc();  // Adjust columns and recalculate responsive layout
                updateSerialNumbers();
                desktop_table.draw();
            }, 500);
        }

        updateAllTotals(); // Update all totals after adding or updating the row
    }

    $(document).off("change", "input.originalUnitPriceInput").on("change", "input.originalUnitPriceInput", function (e) {
        var curTr = $(this).closest('tr');
        var realPrice = parseFloat(curTr.find("input.realOriginalUnitPrice").val()) || 0;
        var curprice = parseFloat($(this).val()) || 0;

        if (realPrice > curprice) {
            alert(`Unit price (${curprice}) should not be less than actual price (${realPrice}).`);
            $(this).val(realPrice);
            return;
        } else {
            curTr.find("input.originalUnitPrice").val($(this).val());

            updateAllTotals();
        }
    });

    function updateAllTotals() {
        $('#dt2_product tbody tr').each(function () {
            if (!$(this).hasClass('edit-panel-row') && !$(this).hasClass('child')) {
                updateTotal($(this));
            }
        });
    }

    function updateTotal(row) {
        // Check if the "product-IsReturned" element exists and has "Returned" status
        var isReturnedElement = row.find(".product-IsReturned");
        var isReturned = isReturnedElement.length > 0 && isReturnedElement.text().trim() === "Returned";

        // If the row is returned, skip the calculation
        if (isReturned) {
            row.find('.product-lineTotal').text("0");
            updateOrderTotal(); // Update the order total after skipping this row
            return;
        }

        var scannedQty = parseFloat(row.find(".product-scannedQty").text());
        var qty = !isNaN(scannedQty) && scannedQty > 0 ? scannedQty : parseFloat(row.find('input[data-field="orderQty"]').val());
        var retQty = parseFloat(row.find(".product-IsReturned").text()) || 0;
        qty = qty - retQty;
        var originalUnitPrice = parseFloat(row.find('input.originalUnitPriceInput').val());
        var finalQtyWD = Math.floor(qty);
        var actualCuttingCost = parseFloat(row.find('.product-operationCost').attr("data-actualoperationcost")) || 0;
        var finalCuttingCostWd = finalQtyWD * actualCuttingCost;

        row.find(".product-cuttongcost").text(finalCuttingCostWd == 0 ? "-" : finalCuttingCostWd.toFixed(2));
        row.find('.product-operationCost').text(finalCuttingCostWd.toFixed(2));
        var cuttingCostText = row.find('.product-cuttongcost').text().trim();
        var cuttingCost = (cuttingCostText !== "-" && !isNaN(parseFloat(cuttingCostText))) ? parseFloat(cuttingCostText) : 0;
        var complimentaryText = row.find('.product-complimentary').text().trim().toLowerCase();

        var unitPrice;
        if (complimentaryText === 'foc' || complimentaryText === 'sample') {
            unitPrice = 0; // cuttingCost;
        } else {
            unitPrice = originalUnitPrice;
        }

        // Calculate subtotal before discount
        var subtotal = (qty * unitPrice) + cuttingCost;

        // Get discount percentage from .discountInput
        var discountPercentage = parseFloat(row.find('.discountInput').val()) || 0;

        // Calculate discount amount
        var discountAmount = Number(((subtotal * discountPercentage) / 100).toFixed(2));
        row.find(".discountAmt").val(discountAmount);
        // Calculate final total after discount
        var total = subtotal - discountAmount;

        console.log("Original Unit Price:", originalUnitPrice,
            "Cutting Cost:", cuttingCost,
            "Final Unit Price:", unitPrice,
            "Discount %:", discountPercentage,
            "Discount Amount:", discountAmount);
        row.find('span[data-field="price"]').text(formatNumberWithThousandSeparator(unitPrice));

        row.find('.product-lineTotal').text(formatNumberWithThousandSeparator(total));
        updateOrderTotal(); // Update the order total after each row's total is calculated
    }

    function updateOrderTotal() {

        var orderTotal = 0;
        $('#dt2_product tbody tr').each(function () {
            if (!$(this).hasClass('edit-panel-row')) {
                var rowTotal = parseFloat($(this).find('.product-lineTotal').text().replace(/,/g, '')) || 0; // Remove thousand separators and parse
                orderTotal += rowTotal;
            }
        });

        $('#orderTotal').text(formatNumberWithThousandSeparator(orderTotal)); // Update the overall order total
    }


    function formatNumberWithThousandSeparator(number) {
        console.log("Before number: " + number)
        return number.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
    }


    // Initialize Select2 on page load
    function initializeSelect2($select, placeholder) {
        $select.select2({
            placeholder: placeholder,
            allowClear: true
        });
    }
    // Function to load dropdown options
    function loadDropdown(url, $select, placeholder, selectedValue) {
        $.ajax({
            url: url,
            type: 'POST',
            dataType: 'json',
            success: function (data) {
                // Clear current options
                $select.empty();

                // Add a placeholder option
                $select.append(new Option('', '', true, true)); // Placeholder option

                // Append new options
                $.each(data.ModuleItems, function (index, item) {
                    $select.append(new Option(item.name, item.id));
                });

                // Initialize Select2 after options are added
                initializeSelect2($select, placeholder);

                // Set the selected value if available
                if (selectedValue) {
                    // Ensure the value is available in the dropdown
                    setTimeout(function () {
                        $select.val(selectedValue).trigger('change');
                    }, 100); // A short delay ensures that Select2 is fully initialized
                } else {
                    $select.val('').trigger('change');
                }
            },
            error: function (xhr, status, error) {
                console.error('Error loading dropdown options:', error);
            }
        });
    }
    function openPdfInModal(htmlContent,letterName) {


        var url = '@Url.Action("PrintDocument", "Orders")' + '?id=' + encodeURIComponent('@Model.id') + '&letterName=' + encodeURIComponent(letterName) + '&watermark=' + encodeURIComponent(htmlContent);
    // Open the modal
    $('#pdfModal').modal('show');

    // Set the iframe src to the PDF URL
    $('#pdfFrame').attr('src', url);
}
</script>
<script type="text/javascript">
    var modelData = @Html.Raw(Json.Encode(Model));
    var checkItemReturnStatusUrl = '@Url.Content(Url.Action("CheckItemReturnStatus", "Orders"))';
    var checkPrintRefundStatusUrl = '@Url.Content(Url.Action("CheckPrintRefundStatus", "Orders"))';
    var getOrderDiscountDetailsUrl = '@Url.Content(Url.Action("GetDiscountApprovalByOrder", "Orders"))';
    function showDiscountModal(orderId) {
        populateDiscountTable(orderId); // Populate the table with data
        $('#DiscountGridModal').modal('show'); // Show the modal
    }
    function populateDiscountTable(orderId) {
        // Clear any existing rows
        const tbody = document.querySelector('#discountdata-table tbody');
        tbody.innerHTML = '';

       $.ajax({
            url: '@Url.Action("GetDiscountApprovalByOrder", "Orders")', // Replace with your actual controller action URL
            type: 'POST',
           data: { orderId: orderId },
           success: function (data) {

               if (data.success) {
                   if (data && data.orderItemDiscounts) {
                       data.orderItemDiscounts.forEach(item => {
                           const row = document.createElement('tr');
                           // Convert .NET Date format to JavaScript Date
                           function convertDotNetDate(dotNetDate) {
                               const timestamp = parseInt(dotNetDate.match(/\d+/)[0]);
                               return new Date(timestamp);
                           }

                           // Format date in dd/MM/yyyy format
                           function formatDate(date) {
                               const day = ("0" + date.getDate()).slice(-2); // Ensure two-digit day
                               const month = ("0" + (date.getMonth() + 1)).slice(-2); // Ensure two-digit month
                               const year = date.getFullYear();
                               return `${day}/${month}/${year}`;
                           }

                           const approvalDate = item.approvalDate
                               ? formatDate(convertDotNetDate(item.approvalDate))
                               : '-';
                           // Create cells for each data field
                           row.innerHTML = `
                        <td>${item.PartNumber?.partNum || '-'}</td>
                        <td>${item.PartNumber?.lineDesc || '-'}</td>
                        <td>${item.ApproverName || '-'}</td>
                           <td>${approvalDate}</td>
                        <td>${item.discount != null ? item.discount.toFixed(2) : '-'}</td>
                        <td>${item.remarks || '-'}</td>
                        <td>${item.RequestedBy || '-'}</td>
                    `;

                           tbody.appendChild(row);
                       });
                   } else {
                       // No data available
                       const row = document.createElement('tr');
                       row.innerHTML = `<td colspan="7">No data available</td>`;
                       tbody.appendChild(row);
                   }
               } else {
                   // Show error message if fetch fails
                   const row = document.createElement('tr');
                   row.innerHTML = `<td colspan="7">${data.message || 'Failed to fetch data'}</td>`;
                   tbody.appendChild(row);
               }
           },
           error: function (xhr, status, error) {
               console.error('Error fetching order data:', error);
               const row = document.createElement('tr');
               row.innerHTML = `<td colspan="7">Error loading data</td>`;
               tbody.appendChild(row);
           }
       });
    }



</script>
<script src="~/Scripts/OrderPrintFunctions.js?ver=1.0.56"></script>
