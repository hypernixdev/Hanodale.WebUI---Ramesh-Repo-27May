@model Hanodale.WebUI.Models.ChartPanelOrderDashboardModel
@using Hanodale.Utility.Globalize
@using Hanodale.WebUI
@using System.Web.Optimization
@{
    ViewBag.Title = "Index";
    var counter = 0;
    var startDatee = DateTime.Now.ToString("yyyy-MM-dd"); // Example: 7 days ago
    var endDatee = DateTime.Now.ToString("yyyy-MM-dd"); // Today's date
}
<style>
    /* Custom header color */
    #completedSalesTable th,
    #syncCompletedSalesTable th,
    #pendingSalesTable th,
    #paymentCollectionTable th {
        background-color: #d3e8f7 !important; /* Green background */
        color: #545456; /* White text color */
    }

      
    #completedSalesTable, #syncCompletedSalesTable {
        width: 100%;
        border-collapse: collapse;
        font-size: 14px;
        table-layout: auto;
        /* Remove display: block */
    }

    .table-container {
        max-height: 400px;
        overflow-y: auto;
    }

    #completedSalesTable, #syncCompletedSalesTable th, #completedSalesTable, #syncCompletedSalesTable td {
        border: 1px solid #ddd;
        padding: 8px;
        text-align: left;
    }

    #completedSalesTable, #syncCompletedSalesTable thead {
        background-color: #f2f2f2;
    }

    /* Custom scrollbar for webkit browsers (Chrome, Safari, Edge) */
    .table-container::-webkit-scrollbar {
        width: 4px; /* Make the scrollbar width thinner */
        height: 4px; /* If you have horizontal scrolling, this reduces the height too */
    }

    .table-container::-webkit-scrollbar-thumb {
        background-color: #888; /* Thumb color */
        border-radius: 4px;
    }

    .table-container::-webkit-scrollbar-track {
        background: #f1f1f1; /* Track color */
        border-radius: 4px;
    }

    /* Optional: Change scrollbar thumb on hover */
    .table-container::-webkit-scrollbar-thumb:hover {
        background-color: #555; /* Darken the thumb color when hovered */
    }
    .report-table-title {
        font-weight: 400;
        margin-top: 0px;
    }
</style>
@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "validation-form", @class = "form-horizontal searchPanelWithSearchBtn", autocomplete = "off" }))
{

    <article class="col-sm-12 col-md-12 col-lg-12 sortable-grid ui-sortable nPadding">

        <!-- Widget ID (each widget will need unique ID)-->
        <!-- end widget -->

        <div class="jarviswidget jarviswidget-sortable" id="wid-id-86235" data-widget-colorbutton="false" data-widget-editbutton="false" data-widget-custombutton="false" style="" role="widget">
            <!-- widget options:
            usage: <div class="jarviswidget" id="wid-id-2" data-widget-editbutton="false">

            data-widget-colorbutton="false"
            data-widget-editbutton="false"
            data-widget-togglebutton="false"
            data-widget-deletebutton="false"
            data-widget-fullscreenbutton="false"
            data-widget-custombutton="false"
            data-widget-collapsed="true"
            data-widget-sortable="false"

            -->
            <!-- widget div-->
            <div role="content">

                <!-- widget edit box -->
                <div class="jarviswidget-editbox">
                    <!-- This area used as dropdown edit box -->

                </div>
                <!-- end widget edit box -->
                <!-- widget content -->
                <div class="widget-body no-padding">


                    <fieldset style="padding-bottom: 0px; padding-top: 15px;">
                        <div class="smart-form container">
                            <div class="row">
                                <!-- Year -->

                                <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                                    <div class="form-group">
                                        <label class="col-xs-12 col-sm-4 col-md-4 col-lg-3 control-label text-right">From :</label>
                                        <div class="col-xs-12 col-sm-8 col-md-8 col-lg-8">
                                            <!-- Date and Time Inputs in a Single Row -->
                                            <div class="input" style="display: flex; align-items: center; gap: 10px;">
                                                <!-- Date Input -->
                                                <div style="flex: 1;">
                                                    <i class="icon-append fa fa-calendar"></i>
                                                    <input class="datepicker form-control date-picker hasDatepicker"
                                                           data-val="true"
                                                           data-val-date="Please enter date &amp; time"
                                                           id="loadedDateFrom"
                                                           name="loadedDateFrom"
                                                           placeholder="dd/MM/yyyy"
                                                           type="date">
                                                </div>
                                                <div style="flex: 1;">
                                                    <i class="icon-append fa fa-clock-o"></i>
                                                    <input class="timepicker form-control"
                                                           data-val="true"
                                                           id="loadedDateFrom_Time"
                                                           name="loadedDateFrom.Time"
                                                           placeholder="hh:mm tt"
                                                           type="text"
                                                           value="12:00 AM">
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>


                                <!-- Month -->
                                <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                                    <div class="form-group">
                                        <label class="col-xs-12 col-sm-4 col-md-4 col-lg-3 control-label text-right">To :</label>
                                        <div class="col-xs-12 col-sm-8 col-md-8 col-lg-8">
                                            <!-- Date and Time Inputs in a Single Row -->
                                            <div class="input" style="display: flex; align-items: center; gap: 10px;">
                                                <!-- Date Input -->
                                                <div style="flex: 1;">
                                                    <i class="icon-append fa fa-calendar"></i>
                                                    <input class="datepicker form-control date-picker hasDatepicker"
                                                           data-val="true"
                                                           data-val-date="Please enter date &amp; time"
                                                           id="loadedDateTo"
                                                           name="loadedDateTo"
                                                           placeholder="dd/MM/yyyy"
                                                           type="date">
                                                </div>
                                                <!-- Time Input -->
                                                <div style="flex: 1;">
                                                    <i class="icon-append fa fa-clock-o"></i>
                                                    <input class="timepicker form-control"
                                                           data-val="true"
                                                           id="loadedDateTo_Time"
                                                           name="loadedDateTo.Time"
                                                           placeholder="hh:mm tt"
                                                           type="text"
                                                           value="12:00 AM">
                                                </div>

                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>



                        </div>
                    </fieldset>

                </div>
                <!-- end widget content -->
            </div>
            <!-- end widget div -->
        </div>
    </article>
}
@Scripts.Render(bundles.scripts.common_add_edit)
<div class="row" style="justify-content: left;">

    @foreach (var item in Model.lstPie)
    {
        counter++;
        <div id="pieCharPanelOrderDashboard_@counter" class="widget-body no-padding placeholderChartMainContent col-sm-12 col-md-12 col-lg-6">
            <div style="width: 100%;">
                <ul class="charPanelDashboard">
                    @*<div class="chartPieHeader">@Model.title</div>*@
                    @*<div class="chartPiePanelStatusMessage">@string.Format(Resources.PAGE_HEADER_CHART_PANEL_LABEL_LAST_LOADED_DATA, Model.loadedDateFromString, Model.loadedDateToString). @string.Format(Resources.PAGE_HEADER_CHART_PANEL_LABEL_LAST_UPDATED_LONG_STRING_DATE, Model.lastUpdatedDateString, Model.lastUpdatedTimeString)</div>*@
                    <li id="pieCharPanelOrderDashboardPlaceholder_@item.type" class="dashboardChartBox col-xs-12 col-sm-12 col-md-12 col-lg-12">
                        <div class="pieChartInnerBox">
                            <div class="chartPieTitleLabel"><a class="viewDetail" data-id="@item.type" data-section="@item.type" title="@Resources.BTN_VIEW_DETAIL">@item.title</a></div>
                            <div class="innerChartContent">
                                <div class="placeholderDonutHoleChartBody" id="pieCharPanelDashboardPlaceholderBody_@item.type"></div>
                                <div class="charLegendaSpliter"></div>
                                <div class="mainChartLegend">
                                    <div id="chartLegend_@item.type"></div>
                                </div>
                            </div>
                        </div>
                    </li>
                </ul>

            </div>

        </div>
    }

<div class="col-lg-12">
    <div class="table-container" style="width:50%">
        <h5 class="report-table-title">Pending Sales Summary</h5>
        <table id="pendingSalesTable" class="table table-striped table-bordered">
            <thead>
                <tr><th>Orders Count</th><th>Sales Amount</th></tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>

    <div class="table-container">
        <h5 class="report-table-title">Completed Sales Summary</h5>
        <table id="completedSalesTable" class="table table-striped table-bordered">
            <thead>
                <tr><th>Orders Count</th><th>Sales Amount</th><th>Collected Amount</th><th>Disc Rounding</th><th>Refund to Customer</th><th>Refund as Advance</th><th>Diff</th></tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>
    <br />
    <div class="table-container">
        <h5 class="report-table-title">Completed Sales Summary (Synced)</h5>
        <table id="syncCompletedSalesTable" class="table table-striped table-bordered">
            <thead>
                <tr><th>Status</th><th>Orders Count</th><th>Sales Amount</th><th>Sales Payment Amount</th><th>Epi Count</th><th>Epicor Sales Amount</th><th>Epicor Applied Amount</th><th>Epicor Advance Amount</th><th>Diff Sales vs Epicor</th><th>Diff Payment vs Epicor</th></tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>
    <br />
    <div class="table-container">
        <h5 class="report-table-title">Payment Collection Summary</h5>
        <table id="paymentCollectionTable" class="table table-striped table-bordered">
            <thead>
                <tr><th>Payment Type</th><th>Collected Amount</th><th>Refund to Customer</th><th>Refund as Advance</th></tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>
</div>
</div>


<script src="~/Scripts/plugin/flot/jquery.flot.tooltip.min.js"></script>
<script src="~/Scripts/flot/jspdf.min.js"></script>
<script src="~/Scripts/flot/html2canvas.js"></script>
<script src="~/Scripts/ProtectedScripts/draw-pie-chart.js"></script>
<script>


    $(document).ready(function () {
        // Get the current date and set it as the default for dateFrom and dateTo
        var today = new Date();
        var dateFrom = today.toISOString().split('T')[0];  // Format as YYYY-MM-DD
        var dateTo = today.toISOString().split('T')[0];    // Format as YYYY-MM-DD

        // You can replace these with actual dynamic values if necessary
        $('#loadedDateFrom').val(dateFrom);
        $('#loadedDateTo').val(dateTo);

        drawPieChart("ChartPanelOrderDashboard", "GetPieChartInfo", true, true)




        // Trigger AJAX call with default date values on page load
        fetchSalesSummary();

        // Trigger AJAX call when either date field changes
        $('#loadedDateFrom, #loadedDateTo').on('change', function () {
            drawPieChart("ChartPanelOrderDashboard", "GetPieChartInfo", true, true);
            fetchSalesSummary();
            fetchSalesCount();
        });


    })

function fetchSalesCount() {
    $.ajax({
        url: '@Url.Action("GetSalesCount", "ChartPanelOrderDashboard")',
        type: 'POST',
        data: {
            dateFrom: $('#loadedDateFrom').val(),
            dateTo: $('#loadedDateTo').val()
        },
        success: function (response) {
            if (response.success) {
                $('#totalSalesAmount').text('RM ' + response.data.TotalSales.toFixed(0).replace(/\d(?=(\d{3})+\.)/g, '$&,'));
                $('#totalRefundAmount').text('RM ' + response.data.TotalRefund.toFixed(0).replace(/\d(?=(\d{3})+\.)/g, '$&,'));

            } else {
                alert(response.message);
            }
        },
        error: function () {
            alert('Error fetching sales count.');
        }
    });
}

// Function to fetch sales summary
function fetchSalesSummary() {
$.ajax({
    url: "@Url.Action("GetSalesSummary", "ChartPanelOrderDashboard")",
    type: 'POST',
    data: {
        dateFrom: $('#loadedDateFrom').val(),
        dateTo: $('#loadedDateTo').val()
    },
    success: function (response) {
         
        if (response.success) {
            // Clear previous table rows before adding new ones
            $('#pendingSalesTable tbody').empty();
            $('#completedSalesTable tbody').empty();
            $('#syncCompletedSalesTable tbody').empty();
            $('#paymentCollectionTable tbody').empty();

            // Function to format numbers with thousand separators and two decimal places
            function formatNumber(number) {
                return new Intl.NumberFormat('en-US', {
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                }).format(number);
            }

            // Populate Pending Sales Summary
            var pendingSalesData = response.data.PendingSalesTable;
            if (pendingSalesData != null && pendingSalesData.length  > 0) {
                pendingSalesData.forEach(function (item) {
                    $('#pendingSalesTable tbody').append(
                        '<tr><td>' + item.OrdersCount + '</td><td>' + formatNumber(item.SalesAmount) + '</td></tr>'
                    );
                });
            }
            else {
                // Clear table and show "No data available"
                $('#pendingSalesTable tbody').empty().append('<tr><td colspan="12" style="text-align:center;">No data available</td></tr>');
            }
            // Populate Completed Sales Summary
            var completedSalesData = response.data.CompletedSalesTable;
            if (completedSalesData != null && completedSalesData.length > 0) {
             
                    completedSalesData.forEach(function (item) {
                        $('#completedSalesTable tbody').append(
                            '<tr><td>' + item.OrdersCount + '</td><td>' + formatNumber(item.SalesAmount) + '</td><td>' +
                            formatNumber(item.CollectedAmount) + '</td><td>' + formatNumber(item.DiscRounding) + '</td><td>' +
                            formatNumber(item.RefundToCustomer) + '</td><td>' + formatNumber(item.RefundAsAdvance) + '</td><td>' +
                            formatNumber(item.Diff) + '</td></tr>'
                        );
                    });
                }
            
            else {
                // Clear table and show "No data available"
                $('#completedSalesTable tbody').empty().append('<tr><td colspan="12" style="text-align:center;">No data available</td></tr>');
                }

            // Populate Sync Completed Sales Summary
            var syncCompletedSalesData = response.data.SyncCompletedSalesTable;
            if (syncCompletedSalesData !=null && syncCompletedSalesData.length > 0) {
                syncCompletedSalesData.forEach(function (item) {
                    $('#syncCompletedSalesTable tbody').append(
                        '<tr><td>' + item.SyncStatus + '</td><td>' + item.OrdersCount + '</td><td>' + formatNumber(item.SalesAmount) + '</td><td>' +
                        formatNumber(item.SalesPaymentAmount) + '</td><td>' + item.EpiCount + '</td><td>' +
                        formatNumber(item.EpicorSalesAmount) + '</td><td>' + formatNumber(item.EpicorAppliedAmount) + '</td><td>' +
                        formatNumber(item.EpicorAdvanceAmount) + '</td><td>' + formatNumber(item.DiffSalesVsEpicor) + '</td><td>' +
                        formatNumber(item.DiffPaymentVsEpicor) + '</td></tr>'
                    );
                });
            }
            else {
                // Clear table and show "No data available"
                $('#syncCompletedSalesTable tbody').empty().append('<tr><td colspan="12" style="text-align:center;">No data available</td></tr>');
            }
            // Populate Payment Collection Summary
            var paymentCollectionData = response.data.PaymentCollectionTable;
            if (paymentCollectionData!=null && paymentCollectionData.length > 0) {
                paymentCollectionData.forEach(function (item) {
                    $('#paymentCollectionTable tbody').append(
                        '<tr><td>' + item.PaymentType + '</td><td>' + formatNumber(item.CollectedAmount) + '</td><td>' +
                        formatNumber(item.RefundToCustomer) + '</td><td>' + formatNumber(item.RefundAsAdvance) + '</td></tr>'
                    );
                });
            }
            else {
                // Clear table and show "No data available"
                $('#paymentCollectionTable tbody').empty().append('<tr><td colspan="12" style="text-align:center;">No data available</td></tr>');
            }
        } else {
            alert(response.message);
        }
    },
    error: function () {
        alert('Error fetching sales summary.');
    }
});

}

</script>
<script>
    // Function to get the current time in hh:mm AM/PM format
    function getCurrentTime() {
        const now = new Date();
        let hours = now.getHours();
        const minutes = now.getMinutes().toString().padStart(2, '0');
        const ampm = hours >= 12 ? 'PM' : 'AM';
        hours = hours % 12 || 12; // Convert to 12-hour format
        return `${hours}:${minutes} ${ampm}`;
    }

    // Set the current time as the default value
    document.getElementById('loadedDateTo_Time').value = getCurrentTime();
</script>