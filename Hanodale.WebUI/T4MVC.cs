 
// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments
#pragma warning disable 1591
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public static partial class MVC
{
    public static Hanodale.WebUI.Controllers.AdhocReportController AdhocReport = new Hanodale.WebUI.Controllers.T4MVC_AdhocReportController();
    public static Hanodale.WebUI.Controllers.AuthController Auth = new Hanodale.WebUI.Controllers.T4MVC_AuthController();
    public static Hanodale.WebUI.Controllers.AuthorizedController Authorized = new Hanodale.WebUI.Controllers.T4MVC_AuthorizedController();
    public static Hanodale.WebUI.Controllers.BaseController Base = new Hanodale.WebUI.Controllers.T4MVC_BaseController();
    public static Hanodale.WebUI.Controllers.BusinessAddressController BusinessAddress = new Hanodale.WebUI.Controllers.T4MVC_BusinessAddressController();
    public static Hanodale.WebUI.Controllers.BusinessClassificationController BusinessClassification = new Hanodale.WebUI.Controllers.T4MVC_BusinessClassificationController();
    public static Hanodale.WebUI.Controllers.BusinessController Business = new Hanodale.WebUI.Controllers.T4MVC_BusinessController();
    public static Hanodale.WebUI.Controllers.BusinessFileController BusinessFile = new Hanodale.WebUI.Controllers.T4MVC_BusinessFileController();
    public static Hanodale.WebUI.Controllers.BusinessMasterController BusinessMaster = new Hanodale.WebUI.Controllers.T4MVC_BusinessMasterController();
    public static Hanodale.WebUI.Controllers.BusinessOthersController BusinessOthers = new Hanodale.WebUI.Controllers.T4MVC_BusinessOthersController();
    public static Hanodale.WebUI.Controllers.BusinessUserController BusinessUser = new Hanodale.WebUI.Controllers.T4MVC_BusinessUserController();
    public static Hanodale.WebUI.Controllers.CalendarEventController CalendarEvent = new Hanodale.WebUI.Controllers.T4MVC_CalendarEventController();
    public static Hanodale.WebUI.Controllers.CalendarSettingController CalendarSetting = new Hanodale.WebUI.Controllers.T4MVC_CalendarSettingController();
    public static Hanodale.WebUI.Controllers.ChangePasswordController ChangePassword = new Hanodale.WebUI.Controllers.T4MVC_ChangePasswordController();
    public static Hanodale.WebUI.Controllers.ChartPanelOrderDashboardController ChartPanelOrderDashboard = new Hanodale.WebUI.Controllers.T4MVC_ChartPanelOrderDashboardController();
    public static Hanodale.WebUI.Controllers.ChartPanelTicketDashboardController ChartPanelTicketDashboard = new Hanodale.WebUI.Controllers.T4MVC_ChartPanelTicketDashboardController();
    public static Hanodale.WebUI.Controllers.CommonController Common = new Hanodale.WebUI.Controllers.T4MVC_CommonController();
    public static Hanodale.WebUI.Controllers.CompanyProfileController CompanyProfile = new Hanodale.WebUI.Controllers.T4MVC_CompanyProfileController();
    public static Hanodale.WebUI.Controllers.CopyCalendarController CopyCalendar = new Hanodale.WebUI.Controllers.T4MVC_CopyCalendarController();
    public static Hanodale.WebUI.Controllers.CultureController Culture = new Hanodale.WebUI.Controllers.T4MVC_CultureController();
    public static Hanodale.WebUI.Controllers.CustomerController Customer = new Hanodale.WebUI.Controllers.T4MVC_CustomerController();
    public static Hanodale.WebUI.Controllers.DashboardController Dashboard = new Hanodale.WebUI.Controllers.T4MVC_DashboardController();
    public static Hanodale.WebUI.Controllers.ErrorController Error = new Hanodale.WebUI.Controllers.T4MVC_ErrorController();
    public static Hanodale.WebUI.Controllers.FileHistoryController FileHistory = new Hanodale.WebUI.Controllers.T4MVC_FileHistoryController();
    public static Hanodale.WebUI.Controllers.HelpDeskController HelpDesk = new Hanodale.WebUI.Controllers.T4MVC_HelpDeskController();
    public static Hanodale.WebUI.Controllers.HomeController Home = new Hanodale.WebUI.Controllers.T4MVC_HomeController();
    public static Hanodale.WebUI.Controllers.LooseConversionController LooseConversion = new Hanodale.WebUI.Controllers.T4MVC_LooseConversionController();
    public static Hanodale.WebUI.Controllers.ModuleItemController ModuleItem = new Hanodale.WebUI.Controllers.T4MVC_ModuleItemController();
    public static Hanodale.WebUI.Controllers.NavigationController Navigation = new Hanodale.WebUI.Controllers.T4MVC_NavigationController();
    public static Hanodale.WebUI.Controllers.NewsController News = new Hanodale.WebUI.Controllers.T4MVC_NewsController();
    public static Hanodale.WebUI.Controllers.OnlineHelpController OnlineHelp = new Hanodale.WebUI.Controllers.T4MVC_OnlineHelpController();
    public static Hanodale.WebUI.Controllers.OrderApprovalController OrderApproval = new Hanodale.WebUI.Controllers.T4MVC_OrderApprovalController();
    public static Hanodale.WebUI.Controllers.OrdersController Orders = new Hanodale.WebUI.Controllers.T4MVC_OrdersController();
    public static Hanodale.WebUI.Controllers.OrganizationController Organization = new Hanodale.WebUI.Controllers.T4MVC_OrganizationController();
    public static Hanodale.WebUI.Controllers.OrganizationEmailController OrganizationEmail = new Hanodale.WebUI.Controllers.T4MVC_OrganizationEmailController();
    public static Hanodale.WebUI.Controllers.PickupController Pickup = new Hanodale.WebUI.Controllers.T4MVC_PickupController();
    public static Hanodale.WebUI.Controllers.PlantController Plant = new Hanodale.WebUI.Controllers.T4MVC_PlantController();
    public static Hanodale.WebUI.Controllers.PriceListController PriceList = new Hanodale.WebUI.Controllers.T4MVC_PriceListController();
    public static Hanodale.WebUI.Controllers.ProductCartonController ProductCarton = new Hanodale.WebUI.Controllers.T4MVC_ProductCartonController();
    public static Hanodale.WebUI.Controllers.ProductController Product = new Hanodale.WebUI.Controllers.T4MVC_ProductController();
    public static Hanodale.WebUI.Controllers.ProductWeightBarcodeController ProductWeightBarcode = new Hanodale.WebUI.Controllers.T4MVC_ProductWeightBarcodeController();
    public static Hanodale.WebUI.Controllers.ProfileController Profile = new Hanodale.WebUI.Controllers.T4MVC_ProfileController();
    public static Hanodale.WebUI.Controllers.ReportController Report = new Hanodale.WebUI.Controllers.T4MVC_ReportController();
    public static Hanodale.WebUI.Controllers.RoleController Role = new Hanodale.WebUI.Controllers.T4MVC_RoleController();
    public static Hanodale.WebUI.Controllers.SchedulerLogController SchedulerLog = new Hanodale.WebUI.Controllers.T4MVC_SchedulerLogController();
    public static Hanodale.WebUI.Controllers.SchedulerSetupController SchedulerSetup = new Hanodale.WebUI.Controllers.T4MVC_SchedulerSetupController();
    public static Hanodale.WebUI.Controllers.ShipToAddressController ShipToAddress = new Hanodale.WebUI.Controllers.T4MVC_ShipToAddressController();
    public static Hanodale.WebUI.Controllers.SiteLanguageController SiteLanguage = new Hanodale.WebUI.Controllers.T4MVC_SiteLanguageController();
    public static Hanodale.WebUI.Controllers.StockBalanceController StockBalance = new Hanodale.WebUI.Controllers.T4MVC_StockBalanceController();
    public static Hanodale.WebUI.Controllers.StoreController Store = new Hanodale.WebUI.Controllers.T4MVC_StoreController();
    public static Hanodale.WebUI.Controllers.TermsController Terms = new Hanodale.WebUI.Controllers.T4MVC_TermsController();
    public static Hanodale.WebUI.Controllers.UomConversionController UomConversion = new Hanodale.WebUI.Controllers.T4MVC_UomConversionController();
    public static Hanodale.WebUI.Controllers.UserController User = new Hanodale.WebUI.Controllers.T4MVC_UserController();
    public static Hanodale.WebUI.Controllers.UserRightsController UserRights = new Hanodale.WebUI.Controllers.T4MVC_UserRightsController();
    public static Hanodale.WebUI.Controllers.WorkCategoryController WorkCategory = new Hanodale.WebUI.Controllers.T4MVC_WorkCategoryController();
    public static T4MVC.CustomSearchPanelController CustomSearchPanel = new T4MVC.CustomSearchPanelController();
    public static T4MVC.SharedController Shared = new T4MVC.SharedController();
}

namespace T4MVC
{
}

namespace T4MVC
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class Dummy
    {
        private Dummy() { }
        public static Dummy Instance = new Dummy();
    }
}

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal partial class T4MVC_System_Web_Mvc_ActionResult : System.Web.Mvc.ActionResult, IT4MVCActionResult
{
    public T4MVC_System_Web_Mvc_ActionResult(string area, string controller, string action, string protocol = null): base()
    {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
     
    public override void ExecuteResult(System.Web.Mvc.ControllerContext context) { }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}
[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal partial class T4MVC_System_Web_Mvc_JsonResult : System.Web.Mvc.JsonResult, IT4MVCActionResult
{
    public T4MVC_System_Web_Mvc_JsonResult(string area, string controller, string action, string protocol = null): base()
    {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}
[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal partial class T4MVC_System_Web_Mvc_FileResult : System.Web.Mvc.FileResult, IT4MVCActionResult
{
    public T4MVC_System_Web_Mvc_FileResult(string area, string controller, string action, string protocol = null): base(" ")
    {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
     
    protected override void WriteFile(System.Web.HttpResponseBase response) { }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}
[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal partial class T4MVC_System_Web_Mvc_ViewResult : System.Web.Mvc.ViewResult, IT4MVCActionResult
{
    public T4MVC_System_Web_Mvc_ViewResult(string area, string controller, string action, string protocol = null): base()
    {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}



namespace Links
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Scripts {
        private const string URLPATH = "~/Scripts";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        public static readonly string app_config_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/app.config.min.js") ? Url("app.config.min.js") : Url("app.config.js");
        public static readonly string app_min_js = Url("app.min.js");
        public static readonly string bootbox_min_js = Url("bootbox.min.js");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class bootstrap {
            private const string URLPATH = "~/Scripts/bootstrap";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string bootstrap_min_js = Url("bootstrap.min.js");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class bootstrap_4_4_1 {
            private const string URLPATH = "~/Scripts/bootstrap-4.4.1";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string bootstrap_bundle_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap.bundle.min.js") ? Url("bootstrap.bundle.min.js") : Url("bootstrap.bundle.js");
            public static readonly string bootstrap_bundle_js_map = Url("bootstrap.bundle.js.map");
            public static readonly string bootstrap_bundle_min_js = Url("bootstrap.bundle.min.js");
            public static readonly string bootstrap_bundle_min_js_map = Url("bootstrap.bundle.min.js.map");
            public static readonly string bootstrap_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap.min.js") ? Url("bootstrap.min.js") : Url("bootstrap.js");
            public static readonly string bootstrap_js_map = Url("bootstrap.js.map");
            public static readonly string bootstrap_min_js = Url("bootstrap.min.js");
            public static readonly string bootstrap_min_js_map = Url("bootstrap.min.js.map");
            public static readonly string popper_min_js = Url("popper.min.js");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class bootstrap_4_5_0 {
            private const string URLPATH = "~/Scripts/bootstrap-4.5.0";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string bootstrap_bundle_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap.bundle.min.js") ? Url("bootstrap.bundle.min.js") : Url("bootstrap.bundle.js");
            public static readonly string bootstrap_bundle_js_map = Url("bootstrap.bundle.js.map");
            public static readonly string bootstrap_bundle_min_js = Url("bootstrap.bundle.min.js");
            public static readonly string bootstrap_bundle_min_js_map = Url("bootstrap.bundle.min.js.map");
            public static readonly string bootstrap_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap.min.js") ? Url("bootstrap.min.js") : Url("bootstrap.js");
            public static readonly string bootstrap_js_map = Url("bootstrap.js.map");
            public static readonly string bootstrap_min_js = Url("bootstrap.min.js");
            public static readonly string bootstrap_min_js_map = Url("bootstrap.min.js.map");
            public static readonly string popper_min_js = Url("popper.min.js");
        }
    
        public static readonly string bootstrap_colorpicker_min_js = Url("bootstrap-colorpicker.min.js");
        public static readonly string bootstrap_switch_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-switch.min.js") ? Url("bootstrap-switch.min.js") : Url("bootstrap-switch.js");
        public static readonly string bootstrap_tag_min_js = Url("bootstrap-tag.min.js");
        public static readonly string bootstrap_timepicker_min_js = Url("bootstrap-timepicker.min.js");
        public static readonly string bootstrap_wysiwyg_min_js = Url("bootstrap-wysiwyg.min.js");
        public static readonly string bootstrap_min_js = Url("bootstrap.min.js");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class calendar_3_9_0 {
            private const string URLPATH = "~/Scripts/calendar-3.9.0";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string fullcalendar_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fullcalendar.min.js") ? Url("fullcalendar.min.js") : Url("fullcalendar.js");
            public static readonly string fullcalendar_min_js = Url("fullcalendar.min.js");
            public static readonly string gcal_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/gcal.min.js") ? Url("gcal.min.js") : Url("gcal.js");
            public static readonly string gcal_min_js = Url("gcal.min.js");
            public static readonly string locale_all_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/locale-all.min.js") ? Url("locale-all.min.js") : Url("locale-all.js");
            public static readonly string moment_with_locales_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/moment-with-locales.min.js") ? Url("moment-with-locales.min.js") : Url("moment-with-locales.js");
            public static readonly string moment_with_locales_min_js = Url("moment-with-locales.min.js");
            public static readonly string moment_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/moment.min.js") ? Url("moment.min.js") : Url("moment.js");
            public static readonly string moment_min_js = Url("moment.min.js");
        }
    
        public static readonly string chosen_jquery_min_js = Url("chosen.jquery.min.js");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class cldr {
            private const string URLPATH = "~/Scripts/cldr";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string event_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/event.min.js") ? Url("event.min.js") : Url("event.js");
            public static readonly string supplemental_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/supplemental.min.js") ? Url("supplemental.min.js") : Url("supplemental.js");
            public static readonly string unresolved_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/unresolved.min.js") ? Url("unresolved.min.js") : Url("unresolved.js");
        }
    
        public static readonly string cldr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/cldr.min.js") ? Url("cldr.min.js") : Url("cldr.js");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class datatable {
            private const string URLPATH = "~/Scripts/datatable";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string buttons_bootstrap_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/buttons.bootstrap.min.js") ? Url("buttons.bootstrap.min.js") : Url("buttons.bootstrap.js");
            public static readonly string buttons_bootstrap4_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/buttons.bootstrap4.min.js") ? Url("buttons.bootstrap4.min.js") : Url("buttons.bootstrap4.js");
            public static readonly string buttons_colVis_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/buttons.colVis.min.js") ? Url("buttons.colVis.min.js") : Url("buttons.colVis.js");
            public static readonly string buttons_flash_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/buttons.flash.min.js") ? Url("buttons.flash.min.js") : Url("buttons.flash.js");
            public static readonly string buttons_foundation_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/buttons.foundation.min.js") ? Url("buttons.foundation.min.js") : Url("buttons.foundation.js");
            public static readonly string buttons_html5_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/buttons.html5.min.js") ? Url("buttons.html5.min.js") : Url("buttons.html5.js");
            public static readonly string buttons_print_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/buttons.print.min.js") ? Url("buttons.print.min.js") : Url("buttons.print.js");
            public static readonly string colReorder_bootstrap_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/colReorder.bootstrap.min.js") ? Url("colReorder.bootstrap.min.js") : Url("colReorder.bootstrap.js");
            public static readonly string colReorder_bootstrap4_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/colReorder.bootstrap4.min.js") ? Url("colReorder.bootstrap4.min.js") : Url("colReorder.bootstrap4.js");
            public static readonly string colReorder_dataTables_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/colReorder.dataTables.min.js") ? Url("colReorder.dataTables.min.js") : Url("colReorder.dataTables.js");
            public static readonly string colReorder_foundation_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/colReorder.foundation.min.js") ? Url("colReorder.foundation.min.js") : Url("colReorder.foundation.js");
            public static readonly string dataTables_bootstrap_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dataTables.bootstrap.min.js") ? Url("dataTables.bootstrap.min.js") : Url("dataTables.bootstrap.js");
            public static readonly string dataTables_bootstrap4_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dataTables.bootstrap4.min.js") ? Url("dataTables.bootstrap4.min.js") : Url("dataTables.bootstrap4.js");
            public static readonly string dataTables_buttons_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dataTables.buttons.min.js") ? Url("dataTables.buttons.min.js") : Url("dataTables.buttons.js");
            public static readonly string dataTables_colReorder_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dataTables.colReorder.min.js") ? Url("dataTables.colReorder.min.js") : Url("dataTables.colReorder.js");
            public static readonly string dataTables_foundation_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dataTables.foundation.min.js") ? Url("dataTables.foundation.min.js") : Url("dataTables.foundation.js");
            public static readonly string dataTables_responsive_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dataTables.responsive.min.js") ? Url("dataTables.responsive.min.js") : Url("dataTables.responsive.js");
            public static readonly string dataTables_searchPanes_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dataTables.searchPanes.min.js") ? Url("dataTables.searchPanes.min.js") : Url("dataTables.searchPanes.js");
            public static readonly string jquery_dataTables_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.dataTables.min.js") ? Url("jquery.dataTables.min.js") : Url("jquery.dataTables.js");
            public static readonly string jszip_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jszip.min.js") ? Url("jszip.min.js") : Url("jszip.js");
            public static readonly string pdfmake_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pdfmake.min.js") ? Url("pdfmake.min.js") : Url("pdfmake.js");
            public static readonly string responsive_bootstrap_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/responsive.bootstrap.min.js") ? Url("responsive.bootstrap.min.js") : Url("responsive.bootstrap.js");
            public static readonly string responsive_bootstrap4_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/responsive.bootstrap4.min.js") ? Url("responsive.bootstrap4.min.js") : Url("responsive.bootstrap4.js");
            public static readonly string responsive_foundation_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/responsive.foundation.min.js") ? Url("responsive.foundation.min.js") : Url("responsive.foundation.js");
            public static readonly string searchPanes_bootstrap_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/searchPanes.bootstrap.min.js") ? Url("searchPanes.bootstrap.min.js") : Url("searchPanes.bootstrap.js");
            public static readonly string searchPanes_bootstrap4_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/searchPanes.bootstrap4.min.js") ? Url("searchPanes.bootstrap4.min.js") : Url("searchPanes.bootstrap4.js");
            public static readonly string searchPanes_dataTables_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/searchPanes.dataTables.min.js") ? Url("searchPanes.dataTables.min.js") : Url("searchPanes.dataTables.js");
            public static readonly string searchPanes_foundation_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/searchPanes.foundation.min.js") ? Url("searchPanes.foundation.min.js") : Url("searchPanes.foundation.js");
            public static readonly string vfs_fonts_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/vfs_fonts.min.js") ? Url("vfs_fonts.min.js") : Url("vfs_fonts.js");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class date_time {
            private const string URLPATH = "~/Scripts/date-time";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string bootstrap_datepicker_min_js = Url("bootstrap-datepicker.min.js");
            public static readonly string bootstrap_timepicker_min_js = Url("bootstrap-timepicker.min.js");
            public static readonly string daterangepicker_min_js = Url("daterangepicker.min.js");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class locales {
                private const string URLPATH = "~/Scripts/date-time/locales";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string bootstrap_datepicker_bg_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.bg.min.js") ? Url("bootstrap-datepicker.bg.min.js") : Url("bootstrap-datepicker.bg.js");
                public static readonly string bootstrap_datepicker_ca_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.ca.min.js") ? Url("bootstrap-datepicker.ca.min.js") : Url("bootstrap-datepicker.ca.js");
                public static readonly string bootstrap_datepicker_cs_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.cs.min.js") ? Url("bootstrap-datepicker.cs.min.js") : Url("bootstrap-datepicker.cs.js");
                public static readonly string bootstrap_datepicker_da_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.da.min.js") ? Url("bootstrap-datepicker.da.min.js") : Url("bootstrap-datepicker.da.js");
                public static readonly string bootstrap_datepicker_de_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.de.min.js") ? Url("bootstrap-datepicker.de.min.js") : Url("bootstrap-datepicker.de.js");
                public static readonly string bootstrap_datepicker_el_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.el.min.js") ? Url("bootstrap-datepicker.el.min.js") : Url("bootstrap-datepicker.el.js");
                public static readonly string bootstrap_datepicker_es_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.es.min.js") ? Url("bootstrap-datepicker.es.min.js") : Url("bootstrap-datepicker.es.js");
                public static readonly string bootstrap_datepicker_fi_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.fi.min.js") ? Url("bootstrap-datepicker.fi.min.js") : Url("bootstrap-datepicker.fi.js");
                public static readonly string bootstrap_datepicker_fr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.fr.min.js") ? Url("bootstrap-datepicker.fr.min.js") : Url("bootstrap-datepicker.fr.js");
                public static readonly string bootstrap_datepicker_he_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.he.min.js") ? Url("bootstrap-datepicker.he.min.js") : Url("bootstrap-datepicker.he.js");
                public static readonly string bootstrap_datepicker_hr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.hr.min.js") ? Url("bootstrap-datepicker.hr.min.js") : Url("bootstrap-datepicker.hr.js");
                public static readonly string bootstrap_datepicker_hu_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.hu.min.js") ? Url("bootstrap-datepicker.hu.min.js") : Url("bootstrap-datepicker.hu.js");
                public static readonly string bootstrap_datepicker_id_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.id.min.js") ? Url("bootstrap-datepicker.id.min.js") : Url("bootstrap-datepicker.id.js");
                public static readonly string bootstrap_datepicker_is_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.is.min.js") ? Url("bootstrap-datepicker.is.min.js") : Url("bootstrap-datepicker.is.js");
                public static readonly string bootstrap_datepicker_it_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.it.min.js") ? Url("bootstrap-datepicker.it.min.js") : Url("bootstrap-datepicker.it.js");
                public static readonly string bootstrap_datepicker_ja_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.ja.min.js") ? Url("bootstrap-datepicker.ja.min.js") : Url("bootstrap-datepicker.ja.js");
                public static readonly string bootstrap_datepicker_kr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.kr.min.js") ? Url("bootstrap-datepicker.kr.min.js") : Url("bootstrap-datepicker.kr.js");
                public static readonly string bootstrap_datepicker_lt_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.lt.min.js") ? Url("bootstrap-datepicker.lt.min.js") : Url("bootstrap-datepicker.lt.js");
                public static readonly string bootstrap_datepicker_lv_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.lv.min.js") ? Url("bootstrap-datepicker.lv.min.js") : Url("bootstrap-datepicker.lv.js");
                public static readonly string bootstrap_datepicker_ms_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.ms.min.js") ? Url("bootstrap-datepicker.ms.min.js") : Url("bootstrap-datepicker.ms.js");
                public static readonly string bootstrap_datepicker_nb_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.nb.min.js") ? Url("bootstrap-datepicker.nb.min.js") : Url("bootstrap-datepicker.nb.js");
                public static readonly string bootstrap_datepicker_nl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.nl.min.js") ? Url("bootstrap-datepicker.nl.min.js") : Url("bootstrap-datepicker.nl.js");
                public static readonly string bootstrap_datepicker_pl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.pl.min.js") ? Url("bootstrap-datepicker.pl.min.js") : Url("bootstrap-datepicker.pl.js");
                public static readonly string bootstrap_datepicker_pt_BR_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.pt-BR.min.js") ? Url("bootstrap-datepicker.pt-BR.min.js") : Url("bootstrap-datepicker.pt-BR.js");
                public static readonly string bootstrap_datepicker_pt_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.pt.min.js") ? Url("bootstrap-datepicker.pt.min.js") : Url("bootstrap-datepicker.pt.js");
                public static readonly string bootstrap_datepicker_ro_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.ro.min.js") ? Url("bootstrap-datepicker.ro.min.js") : Url("bootstrap-datepicker.ro.js");
                public static readonly string bootstrap_datepicker_rs_latin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.rs-latin.min.js") ? Url("bootstrap-datepicker.rs-latin.min.js") : Url("bootstrap-datepicker.rs-latin.js");
                public static readonly string bootstrap_datepicker_rs_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.rs.min.js") ? Url("bootstrap-datepicker.rs.min.js") : Url("bootstrap-datepicker.rs.js");
                public static readonly string bootstrap_datepicker_ru_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.ru.min.js") ? Url("bootstrap-datepicker.ru.min.js") : Url("bootstrap-datepicker.ru.js");
                public static readonly string bootstrap_datepicker_sk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.sk.min.js") ? Url("bootstrap-datepicker.sk.min.js") : Url("bootstrap-datepicker.sk.js");
                public static readonly string bootstrap_datepicker_sl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.sl.min.js") ? Url("bootstrap-datepicker.sl.min.js") : Url("bootstrap-datepicker.sl.js");
                public static readonly string bootstrap_datepicker_sv_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.sv.min.js") ? Url("bootstrap-datepicker.sv.min.js") : Url("bootstrap-datepicker.sv.js");
                public static readonly string bootstrap_datepicker_sw_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.sw.min.js") ? Url("bootstrap-datepicker.sw.min.js") : Url("bootstrap-datepicker.sw.js");
                public static readonly string bootstrap_datepicker_th_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.th.min.js") ? Url("bootstrap-datepicker.th.min.js") : Url("bootstrap-datepicker.th.js");
                public static readonly string bootstrap_datepicker_tr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.tr.min.js") ? Url("bootstrap-datepicker.tr.min.js") : Url("bootstrap-datepicker.tr.js");
                public static readonly string bootstrap_datepicker_uk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.uk.min.js") ? Url("bootstrap-datepicker.uk.min.js") : Url("bootstrap-datepicker.uk.js");
                public static readonly string bootstrap_datepicker_zh_CN_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.zh-CN.min.js") ? Url("bootstrap-datepicker.zh-CN.min.js") : Url("bootstrap-datepicker.zh-CN.js");
                public static readonly string bootstrap_datepicker_zh_TW_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.zh-TW.min.js") ? Url("bootstrap-datepicker.zh-TW.min.js") : Url("bootstrap-datepicker.zh-TW.js");
            }
        
            public static readonly string moment_min_js = Url("moment.min.js");
        }
    
        public static readonly string demo_min_js = Url("demo.min.js");
        public static readonly string dropzone_min_js = Url("dropzone.min.js");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class easy_pie_chart {
            private const string URLPATH = "~/Scripts/easy-pie-chart";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string jquery_easypiechart_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.easypiechart.min.js") ? Url("jquery.easypiechart.min.js") : Url("jquery.easypiechart.js");
        }
    
        public static readonly string excanvas_min_js = Url("excanvas.min.js");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class flot {
            private const string URLPATH = "~/Scripts/flot";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string _1_jquery_flot_pie_min_js = Url("1-jquery.flot.pie.min.js");
            public static readonly string canvas2image_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/canvas2image.min.js") ? Url("canvas2image.min.js") : Url("canvas2image.js");
            public static readonly string html2canvas_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/html2canvas.min.js") ? Url("html2canvas.min.js") : Url("html2canvas.js");
            public static readonly string jquery_flot_min_js = Url("jquery.flot.min.js");
            public static readonly string jquery_flot_pie_min_js = Url("jquery.flot.pie.min.js");
            public static readonly string jquery_flot_resize_min_js = Url("jquery.flot.resize.min.js");
            public static readonly string jspdf_min_js = Url("jspdf.min.js");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class fuelux {
            private const string URLPATH = "~/Scripts/fuelux";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class data {
                private const string URLPATH = "~/Scripts/fuelux/data";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string fuelux_tree_sampledata_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fuelux.tree-sampledata.min.js") ? Url("fuelux.tree-sampledata.min.js") : Url("fuelux.tree-sampledata.js");
            }
        
            public static readonly string fuelux_spinner_min_js = Url("fuelux.spinner.min.js");
            public static readonly string fuelux_tree_min_js = Url("fuelux.tree.min.js");
            public static readonly string fuelux_wizard_min_js = Url("fuelux.wizard.min.js");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class fullcalendar_4_4_0 {
            private const string URLPATH = "~/Scripts/fullcalendar-4.4.0";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class bootstrap {
                private const string URLPATH = "~/Scripts/fullcalendar-4.4.0/bootstrap";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string LICENSE_txt = Url("LICENSE.txt");
                public static readonly string main_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/main.min.css") ? Url("main.min.css") : Url("main.css");
                     
                public static readonly string main_d_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/main.d.min.js") ? Url("main.d.min.js") : Url("main.d.js");
                public static readonly string main_esm_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/main.esm.min.js") ? Url("main.esm.min.js") : Url("main.esm.js");
                public static readonly string main_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/main.min.js") ? Url("main.min.js") : Url("main.js");
                public static readonly string main_js_map = Url("main.js.map");
                public static readonly string main_min_css = Url("main.min.css");
                public static readonly string main_min_js = Url("main.min.js");
                public static readonly string package_json = Url("package.json");
                public static readonly string README_md = Url("README.md");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class bundle {
                private const string URLPATH = "~/Scripts/fullcalendar-4.4.0/bundle";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string google_calendar_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/google-calendar.min.js") ? Url("google-calendar.min.js") : Url("google-calendar.js");
                public static readonly string google_calendar_js_map = Url("google-calendar.js.map");
                public static readonly string google_calendar_min_js = Url("google-calendar.min.js");
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class locales {
                    private const string URLPATH = "~/Scripts/fullcalendar-4.4.0/bundle/locales";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string af_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/af.min.js") ? Url("af.min.js") : Url("af.js");
                    public static readonly string ar_dz_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ar-dz.min.js") ? Url("ar-dz.min.js") : Url("ar-dz.js");
                    public static readonly string ar_kw_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ar-kw.min.js") ? Url("ar-kw.min.js") : Url("ar-kw.js");
                    public static readonly string ar_ly_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ar-ly.min.js") ? Url("ar-ly.min.js") : Url("ar-ly.js");
                    public static readonly string ar_ma_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ar-ma.min.js") ? Url("ar-ma.min.js") : Url("ar-ma.js");
                    public static readonly string ar_sa_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ar-sa.min.js") ? Url("ar-sa.min.js") : Url("ar-sa.js");
                    public static readonly string ar_tn_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ar-tn.min.js") ? Url("ar-tn.min.js") : Url("ar-tn.js");
                    public static readonly string ar_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ar.min.js") ? Url("ar.min.js") : Url("ar.js");
                    public static readonly string bg_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bg.min.js") ? Url("bg.min.js") : Url("bg.js");
                    public static readonly string bs_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bs.min.js") ? Url("bs.min.js") : Url("bs.js");
                    public static readonly string ca_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ca.min.js") ? Url("ca.min.js") : Url("ca.js");
                    public static readonly string cs_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/cs.min.js") ? Url("cs.min.js") : Url("cs.js");
                    public static readonly string da_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/da.min.js") ? Url("da.min.js") : Url("da.js");
                    public static readonly string de_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/de.min.js") ? Url("de.min.js") : Url("de.js");
                    public static readonly string el_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/el.min.js") ? Url("el.min.js") : Url("el.js");
                    public static readonly string en_au_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en-au.min.js") ? Url("en-au.min.js") : Url("en-au.js");
                    public static readonly string en_gb_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en-gb.min.js") ? Url("en-gb.min.js") : Url("en-gb.js");
                    public static readonly string en_nz_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en-nz.min.js") ? Url("en-nz.min.js") : Url("en-nz.js");
                    public static readonly string es_us_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/es-us.min.js") ? Url("es-us.min.js") : Url("es-us.js");
                    public static readonly string es_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/es.min.js") ? Url("es.min.js") : Url("es.js");
                    public static readonly string et_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/et.min.js") ? Url("et.min.js") : Url("et.js");
                    public static readonly string eu_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/eu.min.js") ? Url("eu.min.js") : Url("eu.js");
                    public static readonly string fa_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fa.min.js") ? Url("fa.min.js") : Url("fa.js");
                    public static readonly string fi_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fi.min.js") ? Url("fi.min.js") : Url("fi.js");
                    public static readonly string fr_ca_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fr-ca.min.js") ? Url("fr-ca.min.js") : Url("fr-ca.js");
                    public static readonly string fr_ch_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fr-ch.min.js") ? Url("fr-ch.min.js") : Url("fr-ch.js");
                    public static readonly string fr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fr.min.js") ? Url("fr.min.js") : Url("fr.js");
                    public static readonly string gl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/gl.min.js") ? Url("gl.min.js") : Url("gl.js");
                    public static readonly string he_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/he.min.js") ? Url("he.min.js") : Url("he.js");
                    public static readonly string hi_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/hi.min.js") ? Url("hi.min.js") : Url("hi.js");
                    public static readonly string hr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/hr.min.js") ? Url("hr.min.js") : Url("hr.js");
                    public static readonly string hu_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/hu.min.js") ? Url("hu.min.js") : Url("hu.js");
                    public static readonly string id_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/id.min.js") ? Url("id.min.js") : Url("id.js");
                    public static readonly string is_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/is.min.js") ? Url("is.min.js") : Url("is.js");
                    public static readonly string it_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/it.min.js") ? Url("it.min.js") : Url("it.js");
                    public static readonly string ja_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ja.min.js") ? Url("ja.min.js") : Url("ja.js");
                    public static readonly string ka_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ka.min.js") ? Url("ka.min.js") : Url("ka.js");
                    public static readonly string kk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/kk.min.js") ? Url("kk.min.js") : Url("kk.js");
                    public static readonly string ko_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ko.min.js") ? Url("ko.min.js") : Url("ko.js");
                    public static readonly string lb_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lb.min.js") ? Url("lb.min.js") : Url("lb.js");
                    public static readonly string lt_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lt.min.js") ? Url("lt.min.js") : Url("lt.js");
                    public static readonly string lv_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lv.min.js") ? Url("lv.min.js") : Url("lv.js");
                    public static readonly string mk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/mk.min.js") ? Url("mk.min.js") : Url("mk.js");
                    public static readonly string ms_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ms.min.js") ? Url("ms.min.js") : Url("ms.js");
                    public static readonly string nb_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/nb.min.js") ? Url("nb.min.js") : Url("nb.js");
                    public static readonly string nl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/nl.min.js") ? Url("nl.min.js") : Url("nl.js");
                    public static readonly string nn_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/nn.min.js") ? Url("nn.min.js") : Url("nn.js");
                    public static readonly string pl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pl.min.js") ? Url("pl.min.js") : Url("pl.js");
                    public static readonly string pt_br_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pt-br.min.js") ? Url("pt-br.min.js") : Url("pt-br.js");
                    public static readonly string pt_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pt.min.js") ? Url("pt.min.js") : Url("pt.js");
                    public static readonly string ro_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ro.min.js") ? Url("ro.min.js") : Url("ro.js");
                    public static readonly string ru_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ru.min.js") ? Url("ru.min.js") : Url("ru.js");
                    public static readonly string sk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sk.min.js") ? Url("sk.min.js") : Url("sk.js");
                    public static readonly string sl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sl.min.js") ? Url("sl.min.js") : Url("sl.js");
                    public static readonly string sq_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sq.min.js") ? Url("sq.min.js") : Url("sq.js");
                    public static readonly string sr_cyrl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sr-cyrl.min.js") ? Url("sr-cyrl.min.js") : Url("sr-cyrl.js");
                    public static readonly string sr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sr.min.js") ? Url("sr.min.js") : Url("sr.js");
                    public static readonly string sv_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sv.min.js") ? Url("sv.min.js") : Url("sv.js");
                    public static readonly string th_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/th.min.js") ? Url("th.min.js") : Url("th.js");
                    public static readonly string tr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/tr.min.js") ? Url("tr.min.js") : Url("tr.js");
                    public static readonly string uk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/uk.min.js") ? Url("uk.min.js") : Url("uk.js");
                    public static readonly string vi_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/vi.min.js") ? Url("vi.min.js") : Url("vi.js");
                    public static readonly string zh_cn_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/zh-cn.min.js") ? Url("zh-cn.min.js") : Url("zh-cn.js");
                    public static readonly string zh_tw_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/zh-tw.min.js") ? Url("zh-tw.min.js") : Url("zh-tw.js");
                }
            
                public static readonly string locales_all_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/locales-all.min.js") ? Url("locales-all.min.js") : Url("locales-all.js");
                public static readonly string locales_all_min_js = Url("locales-all.min.js");
                public static readonly string luxon_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/luxon.min.js") ? Url("luxon.min.js") : Url("luxon.js");
                public static readonly string luxon_js_map = Url("luxon.js.map");
                public static readonly string luxon_min_js = Url("luxon.min.js");
                public static readonly string moment_timezone_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/moment-timezone.min.js") ? Url("moment-timezone.min.js") : Url("moment-timezone.js");
                public static readonly string moment_timezone_js_map = Url("moment-timezone.js.map");
                public static readonly string moment_timezone_min_js = Url("moment-timezone.min.js");
                public static readonly string moment_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/moment.min.js") ? Url("moment.min.js") : Url("moment.js");
                public static readonly string moment_js_map = Url("moment.js.map");
                public static readonly string moment_min_js = Url("moment.min.js");
                public static readonly string rrule_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/rrule.min.js") ? Url("rrule.min.js") : Url("rrule.js");
                public static readonly string rrule_js_map = Url("rrule.js.map");
                public static readonly string rrule_min_js = Url("rrule.min.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class core {
                private const string URLPATH = "~/Scripts/fullcalendar-4.4.0/core";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string LICENSE_txt = Url("LICENSE.txt");
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class locales {
                    private const string URLPATH = "~/Scripts/fullcalendar-4.4.0/core/locales";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string af_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/af.min.js") ? Url("af.min.js") : Url("af.js");
                    public static readonly string ar_dz_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ar-dz.min.js") ? Url("ar-dz.min.js") : Url("ar-dz.js");
                    public static readonly string ar_kw_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ar-kw.min.js") ? Url("ar-kw.min.js") : Url("ar-kw.js");
                    public static readonly string ar_ly_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ar-ly.min.js") ? Url("ar-ly.min.js") : Url("ar-ly.js");
                    public static readonly string ar_ma_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ar-ma.min.js") ? Url("ar-ma.min.js") : Url("ar-ma.js");
                    public static readonly string ar_sa_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ar-sa.min.js") ? Url("ar-sa.min.js") : Url("ar-sa.js");
                    public static readonly string ar_tn_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ar-tn.min.js") ? Url("ar-tn.min.js") : Url("ar-tn.js");
                    public static readonly string ar_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ar.min.js") ? Url("ar.min.js") : Url("ar.js");
                    public static readonly string az_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/az.min.js") ? Url("az.min.js") : Url("az.js");
                    public static readonly string bg_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bg.min.js") ? Url("bg.min.js") : Url("bg.js");
                    public static readonly string bs_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bs.min.js") ? Url("bs.min.js") : Url("bs.js");
                    public static readonly string ca_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ca.min.js") ? Url("ca.min.js") : Url("ca.js");
                    public static readonly string cs_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/cs.min.js") ? Url("cs.min.js") : Url("cs.js");
                    public static readonly string da_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/da.min.js") ? Url("da.min.js") : Url("da.js");
                    public static readonly string de_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/de.min.js") ? Url("de.min.js") : Url("de.js");
                    public static readonly string el_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/el.min.js") ? Url("el.min.js") : Url("el.js");
                    public static readonly string en_au_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en-au.min.js") ? Url("en-au.min.js") : Url("en-au.js");
                    public static readonly string en_gb_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en-gb.min.js") ? Url("en-gb.min.js") : Url("en-gb.js");
                    public static readonly string en_nz_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en-nz.min.js") ? Url("en-nz.min.js") : Url("en-nz.js");
                    public static readonly string es_us_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/es-us.min.js") ? Url("es-us.min.js") : Url("es-us.js");
                    public static readonly string es_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/es.min.js") ? Url("es.min.js") : Url("es.js");
                    public static readonly string et_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/et.min.js") ? Url("et.min.js") : Url("et.js");
                    public static readonly string eu_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/eu.min.js") ? Url("eu.min.js") : Url("eu.js");
                    public static readonly string fa_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fa.min.js") ? Url("fa.min.js") : Url("fa.js");
                    public static readonly string fi_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fi.min.js") ? Url("fi.min.js") : Url("fi.js");
                    public static readonly string fr_ca_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fr-ca.min.js") ? Url("fr-ca.min.js") : Url("fr-ca.js");
                    public static readonly string fr_ch_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fr-ch.min.js") ? Url("fr-ch.min.js") : Url("fr-ch.js");
                    public static readonly string fr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fr.min.js") ? Url("fr.min.js") : Url("fr.js");
                    public static readonly string gl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/gl.min.js") ? Url("gl.min.js") : Url("gl.js");
                    public static readonly string he_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/he.min.js") ? Url("he.min.js") : Url("he.js");
                    public static readonly string hi_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/hi.min.js") ? Url("hi.min.js") : Url("hi.js");
                    public static readonly string hr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/hr.min.js") ? Url("hr.min.js") : Url("hr.js");
                    public static readonly string hu_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/hu.min.js") ? Url("hu.min.js") : Url("hu.js");
                    public static readonly string id_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/id.min.js") ? Url("id.min.js") : Url("id.js");
                    public static readonly string is_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/is.min.js") ? Url("is.min.js") : Url("is.js");
                    public static readonly string it_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/it.min.js") ? Url("it.min.js") : Url("it.js");
                    public static readonly string ja_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ja.min.js") ? Url("ja.min.js") : Url("ja.js");
                    public static readonly string ka_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ka.min.js") ? Url("ka.min.js") : Url("ka.js");
                    public static readonly string kk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/kk.min.js") ? Url("kk.min.js") : Url("kk.js");
                    public static readonly string ko_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ko.min.js") ? Url("ko.min.js") : Url("ko.js");
                    public static readonly string lb_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lb.min.js") ? Url("lb.min.js") : Url("lb.js");
                    public static readonly string lt_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lt.min.js") ? Url("lt.min.js") : Url("lt.js");
                    public static readonly string lv_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lv.min.js") ? Url("lv.min.js") : Url("lv.js");
                    public static readonly string mk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/mk.min.js") ? Url("mk.min.js") : Url("mk.js");
                    public static readonly string ms_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ms.min.js") ? Url("ms.min.js") : Url("ms.js");
                    public static readonly string nb_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/nb.min.js") ? Url("nb.min.js") : Url("nb.js");
                    public static readonly string nl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/nl.min.js") ? Url("nl.min.js") : Url("nl.js");
                    public static readonly string nn_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/nn.min.js") ? Url("nn.min.js") : Url("nn.js");
                    public static readonly string pl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pl.min.js") ? Url("pl.min.js") : Url("pl.js");
                    public static readonly string pt_br_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pt-br.min.js") ? Url("pt-br.min.js") : Url("pt-br.js");
                    public static readonly string pt_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pt.min.js") ? Url("pt.min.js") : Url("pt.js");
                    public static readonly string ro_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ro.min.js") ? Url("ro.min.js") : Url("ro.js");
                    public static readonly string ru_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ru.min.js") ? Url("ru.min.js") : Url("ru.js");
                    public static readonly string sk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sk.min.js") ? Url("sk.min.js") : Url("sk.js");
                    public static readonly string sl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sl.min.js") ? Url("sl.min.js") : Url("sl.js");
                    public static readonly string sq_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sq.min.js") ? Url("sq.min.js") : Url("sq.js");
                    public static readonly string sr_cyrl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sr-cyrl.min.js") ? Url("sr-cyrl.min.js") : Url("sr-cyrl.js");
                    public static readonly string sr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sr.min.js") ? Url("sr.min.js") : Url("sr.js");
                    public static readonly string sv_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sv.min.js") ? Url("sv.min.js") : Url("sv.js");
                    public static readonly string th_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/th.min.js") ? Url("th.min.js") : Url("th.js");
                    public static readonly string tr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/tr.min.js") ? Url("tr.min.js") : Url("tr.js");
                    public static readonly string ug_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ug.min.js") ? Url("ug.min.js") : Url("ug.js");
                    public static readonly string uk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/uk.min.js") ? Url("uk.min.js") : Url("uk.js");
                    public static readonly string uz_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/uz.min.js") ? Url("uz.min.js") : Url("uz.js");
                    public static readonly string vi_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/vi.min.js") ? Url("vi.min.js") : Url("vi.js");
                    public static readonly string zh_cn_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/zh-cn.min.js") ? Url("zh-cn.min.js") : Url("zh-cn.js");
                    public static readonly string zh_tw_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/zh-tw.min.js") ? Url("zh-tw.min.js") : Url("zh-tw.js");
                }
            
                public static readonly string locales_all_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/locales-all.min.js") ? Url("locales-all.min.js") : Url("locales-all.js");
                public static readonly string locales_all_min_js = Url("locales-all.min.js");
                public static readonly string main_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/main.min.css") ? Url("main.min.css") : Url("main.css");
                     
                public static readonly string main_d_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/main.d.min.js") ? Url("main.d.min.js") : Url("main.d.js");
                public static readonly string main_esm_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/main.esm.min.js") ? Url("main.esm.min.js") : Url("main.esm.js");
                public static readonly string main_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/main.min.js") ? Url("main.min.js") : Url("main.js");
                public static readonly string main_js_map = Url("main.js.map");
                public static readonly string main_min_css = Url("main.min.css");
                public static readonly string main_min_js = Url("main.min.js");
                public static readonly string package_json = Url("package.json");
                public static readonly string README_md = Url("README.md");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class daygrid {
                private const string URLPATH = "~/Scripts/fullcalendar-4.4.0/daygrid";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string LICENSE_txt = Url("LICENSE.txt");
                public static readonly string main_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/main.min.css") ? Url("main.min.css") : Url("main.css");
                     
                public static readonly string main_d_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/main.d.min.js") ? Url("main.d.min.js") : Url("main.d.js");
                public static readonly string main_esm_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/main.esm.min.js") ? Url("main.esm.min.js") : Url("main.esm.js");
                public static readonly string main_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/main.min.js") ? Url("main.min.js") : Url("main.js");
                public static readonly string main_js_map = Url("main.js.map");
                public static readonly string main_min_css = Url("main.min.css");
                public static readonly string main_min_js = Url("main.min.js");
                public static readonly string package_json = Url("package.json");
                public static readonly string README_md = Url("README.md");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class google_calendar {
                private const string URLPATH = "~/Scripts/fullcalendar-4.4.0/google-calendar";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string LICENSE_txt = Url("LICENSE.txt");
                public static readonly string main_d_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/main.d.min.js") ? Url("main.d.min.js") : Url("main.d.js");
                public static readonly string main_esm_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/main.esm.min.js") ? Url("main.esm.min.js") : Url("main.esm.js");
                public static readonly string main_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/main.min.js") ? Url("main.min.js") : Url("main.js");
                public static readonly string main_js_map = Url("main.js.map");
                public static readonly string main_min_js = Url("main.min.js");
                public static readonly string package_json = Url("package.json");
                public static readonly string README_md = Url("README.md");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class interaction {
                private const string URLPATH = "~/Scripts/fullcalendar-4.4.0/interaction";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string LICENSE_txt = Url("LICENSE.txt");
                public static readonly string main_d_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/main.d.min.js") ? Url("main.d.min.js") : Url("main.d.js");
                public static readonly string main_esm_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/main.esm.min.js") ? Url("main.esm.min.js") : Url("main.esm.js");
                public static readonly string main_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/main.min.js") ? Url("main.min.js") : Url("main.js");
                public static readonly string main_js_map = Url("main.js.map");
                public static readonly string main_min_js = Url("main.min.js");
                public static readonly string package_json = Url("package.json");
                public static readonly string README_md = Url("README.md");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class list {
                private const string URLPATH = "~/Scripts/fullcalendar-4.4.0/list";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string LICENSE_txt = Url("LICENSE.txt");
                public static readonly string main_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/main.min.css") ? Url("main.min.css") : Url("main.css");
                     
                public static readonly string main_d_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/main.d.min.js") ? Url("main.d.min.js") : Url("main.d.js");
                public static readonly string main_esm_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/main.esm.min.js") ? Url("main.esm.min.js") : Url("main.esm.js");
                public static readonly string main_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/main.min.js") ? Url("main.min.js") : Url("main.js");
                public static readonly string main_js_map = Url("main.js.map");
                public static readonly string main_min_css = Url("main.min.css");
                public static readonly string main_min_js = Url("main.min.js");
                public static readonly string package_json = Url("package.json");
                public static readonly string README_md = Url("README.md");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class luxon {
                private const string URLPATH = "~/Scripts/fullcalendar-4.4.0/luxon";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string LICENSE_txt = Url("LICENSE.txt");
                public static readonly string main_d_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/main.d.min.js") ? Url("main.d.min.js") : Url("main.d.js");
                public static readonly string main_esm_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/main.esm.min.js") ? Url("main.esm.min.js") : Url("main.esm.js");
                public static readonly string main_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/main.min.js") ? Url("main.min.js") : Url("main.js");
                public static readonly string main_js_map = Url("main.js.map");
                public static readonly string main_min_js = Url("main.min.js");
                public static readonly string package_json = Url("package.json");
                public static readonly string README_md = Url("README.md");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class moment {
                private const string URLPATH = "~/Scripts/fullcalendar-4.4.0/moment";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string LICENSE_txt = Url("LICENSE.txt");
                public static readonly string main_d_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/main.d.min.js") ? Url("main.d.min.js") : Url("main.d.js");
                public static readonly string main_esm_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/main.esm.min.js") ? Url("main.esm.min.js") : Url("main.esm.js");
                public static readonly string main_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/main.min.js") ? Url("main.min.js") : Url("main.js");
                public static readonly string main_js_map = Url("main.js.map");
                public static readonly string main_min_js = Url("main.min.js");
                public static readonly string package_json = Url("package.json");
                public static readonly string README_md = Url("README.md");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class moment_timezone {
                private const string URLPATH = "~/Scripts/fullcalendar-4.4.0/moment-timezone";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string LICENSE_txt = Url("LICENSE.txt");
                public static readonly string main_d_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/main.d.min.js") ? Url("main.d.min.js") : Url("main.d.js");
                public static readonly string main_esm_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/main.esm.min.js") ? Url("main.esm.min.js") : Url("main.esm.js");
                public static readonly string main_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/main.min.js") ? Url("main.min.js") : Url("main.js");
                public static readonly string main_js_map = Url("main.js.map");
                public static readonly string main_min_js = Url("main.min.js");
                public static readonly string package_json = Url("package.json");
                public static readonly string README_md = Url("README.md");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class rrule {
                private const string URLPATH = "~/Scripts/fullcalendar-4.4.0/rrule";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string LICENSE_txt = Url("LICENSE.txt");
                public static readonly string main_d_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/main.d.min.js") ? Url("main.d.min.js") : Url("main.d.js");
                public static readonly string main_esm_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/main.esm.min.js") ? Url("main.esm.min.js") : Url("main.esm.js");
                public static readonly string main_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/main.min.js") ? Url("main.min.js") : Url("main.js");
                public static readonly string main_js_map = Url("main.js.map");
                public static readonly string main_min_js = Url("main.min.js");
                public static readonly string package_json = Url("package.json");
                public static readonly string README_md = Url("README.md");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class timegrid {
                private const string URLPATH = "~/Scripts/fullcalendar-4.4.0/timegrid";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string LICENSE_txt = Url("LICENSE.txt");
                public static readonly string main_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/main.min.css") ? Url("main.min.css") : Url("main.css");
                     
                public static readonly string main_d_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/main.d.min.js") ? Url("main.d.min.js") : Url("main.d.js");
                public static readonly string main_esm_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/main.esm.min.js") ? Url("main.esm.min.js") : Url("main.esm.js");
                public static readonly string main_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/main.min.js") ? Url("main.min.js") : Url("main.js");
                public static readonly string main_js_map = Url("main.js.map");
                public static readonly string main_min_css = Url("main.min.css");
                public static readonly string main_min_js = Url("main.min.js");
                public static readonly string package_json = Url("package.json");
                public static readonly string README_md = Url("README.md");
            }
        
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class globalize {
            private const string URLPATH = "~/Scripts/globalize";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string currency_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/currency.min.js") ? Url("currency.min.js") : Url("currency.js");
            public static readonly string date_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/date.min.js") ? Url("date.min.js") : Url("date.js");
            public static readonly string globalize_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/globalize.min.js") ? Url("globalize.min.js") : Url("globalize.js");
            public static readonly string message_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/message.min.js") ? Url("message.min.js") : Url("message.js");
            public static readonly string number_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/number.min.js") ? Url("number.min.js") : Url("number.js");
            public static readonly string plural_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/plural.min.js") ? Url("plural.min.js") : Url("plural.js");
            public static readonly string relative_time_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/relative-time.min.js") ? Url("relative-time.min.js") : Url("relative-time.js");
            public static readonly string unit_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/unit.min.js") ? Url("unit.min.js") : Url("unit.js");
        }
    
        public static readonly string globalize_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/globalize.min.js") ? Url("globalize.min.js") : Url("globalize.js");
        public static readonly string html5shiv_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/html5shiv.min.js") ? Url("html5shiv.min.js") : Url("html5shiv.js");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class jqGrid {
            private const string URLPATH = "~/Scripts/jqGrid";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class i18n {
                private const string URLPATH = "~/Scripts/jqGrid/i18n";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string grid_locale_ar_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/grid.locale-ar.min.js") ? Url("grid.locale-ar.min.js") : Url("grid.locale-ar.js");
                public static readonly string grid_locale_bg_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/grid.locale-bg.min.js") ? Url("grid.locale-bg.min.js") : Url("grid.locale-bg.js");
                public static readonly string grid_locale_bg1251_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/grid.locale-bg1251.min.js") ? Url("grid.locale-bg1251.min.js") : Url("grid.locale-bg1251.js");
                public static readonly string grid_locale_cat_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/grid.locale-cat.min.js") ? Url("grid.locale-cat.min.js") : Url("grid.locale-cat.js");
                public static readonly string grid_locale_cn_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/grid.locale-cn.min.js") ? Url("grid.locale-cn.min.js") : Url("grid.locale-cn.js");
                public static readonly string grid_locale_cs_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/grid.locale-cs.min.js") ? Url("grid.locale-cs.min.js") : Url("grid.locale-cs.js");
                public static readonly string grid_locale_da_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/grid.locale-da.min.js") ? Url("grid.locale-da.min.js") : Url("grid.locale-da.js");
                public static readonly string grid_locale_de_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/grid.locale-de.min.js") ? Url("grid.locale-de.min.js") : Url("grid.locale-de.js");
                public static readonly string grid_locale_dk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/grid.locale-dk.min.js") ? Url("grid.locale-dk.min.js") : Url("grid.locale-dk.js");
                public static readonly string grid_locale_el_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/grid.locale-el.min.js") ? Url("grid.locale-el.min.js") : Url("grid.locale-el.js");
                public static readonly string grid_locale_en_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/grid.locale-en.min.js") ? Url("grid.locale-en.min.js") : Url("grid.locale-en.js");
                public static readonly string grid_locale_es_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/grid.locale-es.min.js") ? Url("grid.locale-es.min.js") : Url("grid.locale-es.js");
                public static readonly string grid_locale_fa_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/grid.locale-fa.min.js") ? Url("grid.locale-fa.min.js") : Url("grid.locale-fa.js");
                public static readonly string grid_locale_fi_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/grid.locale-fi.min.js") ? Url("grid.locale-fi.min.js") : Url("grid.locale-fi.js");
                public static readonly string grid_locale_fr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/grid.locale-fr.min.js") ? Url("grid.locale-fr.min.js") : Url("grid.locale-fr.js");
                public static readonly string grid_locale_gl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/grid.locale-gl.min.js") ? Url("grid.locale-gl.min.js") : Url("grid.locale-gl.js");
                public static readonly string grid_locale_he_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/grid.locale-he.min.js") ? Url("grid.locale-he.min.js") : Url("grid.locale-he.js");
                public static readonly string grid_locale_hr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/grid.locale-hr.min.js") ? Url("grid.locale-hr.min.js") : Url("grid.locale-hr.js");
                public static readonly string grid_locale_hr1250_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/grid.locale-hr1250.min.js") ? Url("grid.locale-hr1250.min.js") : Url("grid.locale-hr1250.js");
                public static readonly string grid_locale_hu_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/grid.locale-hu.min.js") ? Url("grid.locale-hu.min.js") : Url("grid.locale-hu.js");
                public static readonly string grid_locale_id_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/grid.locale-id.min.js") ? Url("grid.locale-id.min.js") : Url("grid.locale-id.js");
                public static readonly string grid_locale_is_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/grid.locale-is.min.js") ? Url("grid.locale-is.min.js") : Url("grid.locale-is.js");
                public static readonly string grid_locale_it_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/grid.locale-it.min.js") ? Url("grid.locale-it.min.js") : Url("grid.locale-it.js");
                public static readonly string grid_locale_ja_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/grid.locale-ja.min.js") ? Url("grid.locale-ja.min.js") : Url("grid.locale-ja.js");
                public static readonly string grid_locale_kr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/grid.locale-kr.min.js") ? Url("grid.locale-kr.min.js") : Url("grid.locale-kr.js");
                public static readonly string grid_locale_lt_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/grid.locale-lt.min.js") ? Url("grid.locale-lt.min.js") : Url("grid.locale-lt.js");
                public static readonly string grid_locale_mne_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/grid.locale-mne.min.js") ? Url("grid.locale-mne.min.js") : Url("grid.locale-mne.js");
                public static readonly string grid_locale_nl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/grid.locale-nl.min.js") ? Url("grid.locale-nl.min.js") : Url("grid.locale-nl.js");
                public static readonly string grid_locale_no_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/grid.locale-no.min.js") ? Url("grid.locale-no.min.js") : Url("grid.locale-no.js");
                public static readonly string grid_locale_pl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/grid.locale-pl.min.js") ? Url("grid.locale-pl.min.js") : Url("grid.locale-pl.js");
                public static readonly string grid_locale_pt_br_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/grid.locale-pt-br.min.js") ? Url("grid.locale-pt-br.min.js") : Url("grid.locale-pt-br.js");
                public static readonly string grid_locale_pt_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/grid.locale-pt.min.js") ? Url("grid.locale-pt.min.js") : Url("grid.locale-pt.js");
                public static readonly string grid_locale_ro_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/grid.locale-ro.min.js") ? Url("grid.locale-ro.min.js") : Url("grid.locale-ro.js");
                public static readonly string grid_locale_ru_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/grid.locale-ru.min.js") ? Url("grid.locale-ru.min.js") : Url("grid.locale-ru.js");
                public static readonly string grid_locale_sk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/grid.locale-sk.min.js") ? Url("grid.locale-sk.min.js") : Url("grid.locale-sk.js");
                public static readonly string grid_locale_sr_latin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/grid.locale-sr-latin.min.js") ? Url("grid.locale-sr-latin.min.js") : Url("grid.locale-sr-latin.js");
                public static readonly string grid_locale_sr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/grid.locale-sr.min.js") ? Url("grid.locale-sr.min.js") : Url("grid.locale-sr.js");
                public static readonly string grid_locale_sv_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/grid.locale-sv.min.js") ? Url("grid.locale-sv.min.js") : Url("grid.locale-sv.js");
                public static readonly string grid_locale_th_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/grid.locale-th.min.js") ? Url("grid.locale-th.min.js") : Url("grid.locale-th.js");
                public static readonly string grid_locale_tr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/grid.locale-tr.min.js") ? Url("grid.locale-tr.min.js") : Url("grid.locale-tr.js");
                public static readonly string grid_locale_tw_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/grid.locale-tw.min.js") ? Url("grid.locale-tw.min.js") : Url("grid.locale-tw.js");
                public static readonly string grid_locale_ua_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/grid.locale-ua.min.js") ? Url("grid.locale-ua.min.js") : Url("grid.locale-ua.js");
                public static readonly string grid_locale_vi_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/grid.locale-vi.min.js") ? Url("grid.locale-vi.min.js") : Url("grid.locale-vi.js");
            }
        
            public static readonly string jquery_jqGrid_min_js = Url("jquery.jqGrid.min.js");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class jquery_3_5_0 {
            private const string URLPATH = "~/Scripts/jquery-3.5.0";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string jquery_3_5_0_intellisense_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-3.5.0.intellisense.min.js") ? Url("jquery-3.5.0.intellisense.min.js") : Url("jquery-3.5.0.intellisense.js");
            public static readonly string jquery_3_5_0_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-3.5.0.min.js") ? Url("jquery-3.5.0.min.js") : Url("jquery-3.5.0.js");
            public static readonly string jquery_3_5_0_min_js = Url("jquery-3.5.0.min.js");
            public static readonly string jquery_3_5_0_min_map = Url("jquery-3.5.0.min.map");
            public static readonly string jquery_3_5_0_slim_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-3.5.0.slim.min.js") ? Url("jquery-3.5.0.slim.min.js") : Url("jquery-3.5.0.slim.js");
            public static readonly string jquery_3_5_0_slim_min_js = Url("jquery-3.5.0.slim.min.js");
            public static readonly string jquery_3_5_0_slim_min_map = Url("jquery-3.5.0.slim.min.map");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class jquery_3_5_1 {
            private const string URLPATH = "~/Scripts/jquery-3.5.1";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string jquery_3_5_1_intellisense_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-3.5.1.intellisense.min.js") ? Url("jquery-3.5.1.intellisense.min.js") : Url("jquery-3.5.1.intellisense.js");
            public static readonly string jquery_3_5_1_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-3.5.1.min.js") ? Url("jquery-3.5.1.min.js") : Url("jquery-3.5.1.js");
            public static readonly string jquery_3_5_1_min_js = Url("jquery-3.5.1.min.js");
            public static readonly string jquery_3_5_1_min_map = Url("jquery-3.5.1.min.map");
            public static readonly string jquery_3_5_1_slim_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-3.5.1.slim.min.js") ? Url("jquery-3.5.1.slim.min.js") : Url("jquery-3.5.1.slim.js");
            public static readonly string jquery_3_5_1_slim_min_js = Url("jquery-3.5.1.slim.min.js");
            public static readonly string jquery_3_5_1_slim_min_map = Url("jquery-3.5.1.slim.min.map");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class jquery_ui_1_12_1 {
            private const string URLPATH = "~/Scripts/jquery-ui-1.12.1";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string jquery_ui_1_12_1_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-ui-1.12.1.min.js") ? Url("jquery-ui-1.12.1.min.js") : Url("jquery-ui-1.12.1.js");
            public static readonly string jquery_ui_1_12_1_min_js = Url("jquery-ui-1.12.1.min.js");
            public static readonly string jquery_ui_multidatespicker_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-ui.multidatespicker.min.js") ? Url("jquery-ui.multidatespicker.min.js") : Url("jquery-ui.multidatespicker.js");
        }
    
        public static readonly string jquery_autosize_min_js = Url("jquery.autosize.min.js");
        public static readonly string jquery_bootpag_min_js = Url("jquery.bootpag.min.js");
        public static readonly string jquery_bootstrap_duallistbox_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.bootstrap-duallistbox.min.js") ? Url("jquery.bootstrap-duallistbox.min.js") : Url("jquery.bootstrap-duallistbox.js");
        public static readonly string jquery_bootstrap_duallistbox_min_js = Url("jquery.bootstrap-duallistbox.min.js");
        public static readonly string jquery_colorbox_min_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.colorbox-min.min.js") ? Url("jquery.colorbox-min.min.js") : Url("jquery.colorbox-min.js");
        public static readonly string jquery_dataTables_bootstrap_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.dataTables.bootstrap.min.js") ? Url("jquery.dataTables.bootstrap.min.js") : Url("jquery.dataTables.bootstrap.js");
        public static readonly string jquery_dataTables_min_js = Url("jquery.dataTables.min.js");
        public static readonly string jquery_easy_pie_chart_min_js = Url("jquery.easy-pie-chart.min.js");
        public static readonly string jquery_gritter_min_js = Url("jquery.gritter.min.js");
        public static readonly string jquery_hotkeys_min_js = Url("jquery.hotkeys.min.js");
        public static readonly string jquery_inputlimiter_1_3_1_min_js = Url("jquery.inputlimiter.1.3.1.min.js");
        public static readonly string jquery_knob_min_js = Url("jquery.knob.min.js");
        public static readonly string jquery_maskedinput_min_js = Url("jquery.maskedinput.min.js");
        public static readonly string jquery_mobile_custom_min_js = Url("jquery.mobile.custom.min.js");
        public static readonly string jquery_nestable_min_old_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.nestable.min-old.min.js") ? Url("jquery.nestable.min-old.min.js") : Url("jquery.nestable.min-old.js");
        public static readonly string jquery_nestable_min_js = Url("jquery.nestable.min.js");
        public static readonly string jquery_slimscroll_min_js = Url("jquery.slimscroll.min.js");
        public static readonly string jquery_sparkline_min_js = Url("jquery.sparkline.min.js");
        public static readonly string jquery_ui_touch_punch_min_js = Url("jquery.ui.touch-punch.min.js");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class jquery_validate {
            private const string URLPATH = "~/Scripts/jquery.validate";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string jquery_validate_vsdoc_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate-vsdoc.min.js") ? Url("jquery.validate-vsdoc.min.js") : Url("jquery.validate-vsdoc.js");
            public static readonly string jquery_validate_datepicker_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate.datepicker.min.js") ? Url("jquery.validate.datepicker.min.js") : Url("jquery.validate.datepicker.js");
            public static readonly string jquery_validate_globalize_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate.globalize.min.js") ? Url("jquery.validate.globalize.min.js") : Url("jquery.validate.globalize.js");
            public static readonly string jquery_validate_globalize_min_js = Url("jquery.validate.globalize.min.js");
            public static readonly string jquery_validate_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate.min.js") ? Url("jquery.validate.min.js") : Url("jquery.validate.js");
            public static readonly string jquery_validate_min_js = Url("jquery.validate.min.js");
            public static readonly string jquery_validate_unobtrusive_bootstrap_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate.unobtrusive.bootstrap.min.js") ? Url("jquery.validate.unobtrusive.bootstrap.min.js") : Url("jquery.validate.unobtrusive.bootstrap.js");
            public static readonly string jquery_validate_unobtrusive_bootstrap_min_js = Url("jquery.validate.unobtrusive.bootstrap.min.js");
            public static readonly string jquery_validate_unobtrusive_bootstrap_min_js_map = Url("jquery.validate.unobtrusive.bootstrap.min.js.map");
            public static readonly string jquery_validate_unobtrusive_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate.unobtrusive.min.js") ? Url("jquery.validate.unobtrusive.min.js") : Url("jquery.validate.unobtrusive.js");
            public static readonly string jquery_validate_unobtrusive_min_js = Url("jquery.validate.unobtrusive.min.js");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class lib {
            private const string URLPATH = "~/Scripts/lib";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class cupertino {
                private const string URLPATH = "~/Scripts/lib/cupertino";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class images {
                    private const string URLPATH = "~/Scripts/lib/cupertino/images";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string ui_bg_diagonals_thick_90_eeeeee_40x40_png = Url("ui-bg_diagonals-thick_90_eeeeee_40x40.png");
                    public static readonly string ui_bg_glass_100_e4f1fb_1x400_png = Url("ui-bg_glass_100_e4f1fb_1x400.png");
                    public static readonly string ui_bg_glass_50_3baae3_1x400_png = Url("ui-bg_glass_50_3baae3_1x400.png");
                    public static readonly string ui_bg_glass_80_d7ebf9_1x400_png = Url("ui-bg_glass_80_d7ebf9_1x400.png");
                    public static readonly string ui_bg_highlight_hard_100_f2f5f7_1x100_png = Url("ui-bg_highlight-hard_100_f2f5f7_1x100.png");
                    public static readonly string ui_bg_highlight_hard_70_000000_1x100_png = Url("ui-bg_highlight-hard_70_000000_1x100.png");
                    public static readonly string ui_bg_highlight_soft_100_deedf7_1x100_png = Url("ui-bg_highlight-soft_100_deedf7_1x100.png");
                    public static readonly string ui_bg_highlight_soft_25_ffef8f_1x100_png = Url("ui-bg_highlight-soft_25_ffef8f_1x100.png");
                    public static readonly string ui_icons_2694e8_256x240_png = Url("ui-icons_2694e8_256x240.png");
                    public static readonly string ui_icons_2e83ff_256x240_png = Url("ui-icons_2e83ff_256x240.png");
                    public static readonly string ui_icons_3d80b3_256x240_png = Url("ui-icons_3d80b3_256x240.png");
                    public static readonly string ui_icons_72a7cf_256x240_png = Url("ui-icons_72a7cf_256x240.png");
                    public static readonly string ui_icons_ffffff_256x240_png = Url("ui-icons_ffffff_256x240.png");
                }
            
                public static readonly string jquery_ui_min_css = Url("jquery-ui.min.css");
            }
        
            public static readonly string jquery_ui_min_js = Url("jquery-ui.min.js");
            public static readonly string jquery_min_js = Url("jquery.min.js");
            public static readonly string moment_min_js = Url("moment.min.js");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class libs {
            private const string URLPATH = "~/Scripts/libs";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string jquery_2_0_2_min_js = Url("jquery-2.0.2.min.js");
            public static readonly string jquery_ui_1_10_3_min_js = Url("jquery-ui-1.10.3.min.js");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class locale {
            private const string URLPATH = "~/Scripts/locale";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string af_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/af.min.js") ? Url("af.min.js") : Url("af.js");
            public static readonly string ar_dz_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ar-dz.min.js") ? Url("ar-dz.min.js") : Url("ar-dz.js");
            public static readonly string ar_kw_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ar-kw.min.js") ? Url("ar-kw.min.js") : Url("ar-kw.js");
            public static readonly string ar_ly_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ar-ly.min.js") ? Url("ar-ly.min.js") : Url("ar-ly.js");
            public static readonly string ar_ma_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ar-ma.min.js") ? Url("ar-ma.min.js") : Url("ar-ma.js");
            public static readonly string ar_sa_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ar-sa.min.js") ? Url("ar-sa.min.js") : Url("ar-sa.js");
            public static readonly string ar_tn_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ar-tn.min.js") ? Url("ar-tn.min.js") : Url("ar-tn.js");
            public static readonly string ar_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ar.min.js") ? Url("ar.min.js") : Url("ar.js");
            public static readonly string bg_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bg.min.js") ? Url("bg.min.js") : Url("bg.js");
            public static readonly string bs_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bs.min.js") ? Url("bs.min.js") : Url("bs.js");
            public static readonly string ca_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ca.min.js") ? Url("ca.min.js") : Url("ca.js");
            public static readonly string cs_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/cs.min.js") ? Url("cs.min.js") : Url("cs.js");
            public static readonly string da_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/da.min.js") ? Url("da.min.js") : Url("da.js");
            public static readonly string de_at_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/de-at.min.js") ? Url("de-at.min.js") : Url("de-at.js");
            public static readonly string de_ch_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/de-ch.min.js") ? Url("de-ch.min.js") : Url("de-ch.js");
            public static readonly string de_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/de.min.js") ? Url("de.min.js") : Url("de.js");
            public static readonly string el_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/el.min.js") ? Url("el.min.js") : Url("el.js");
            public static readonly string en_au_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en-au.min.js") ? Url("en-au.min.js") : Url("en-au.js");
            public static readonly string en_ca_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en-ca.min.js") ? Url("en-ca.min.js") : Url("en-ca.js");
            public static readonly string en_gb_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en-gb.min.js") ? Url("en-gb.min.js") : Url("en-gb.js");
            public static readonly string en_ie_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en-ie.min.js") ? Url("en-ie.min.js") : Url("en-ie.js");
            public static readonly string en_nz_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en-nz.min.js") ? Url("en-nz.min.js") : Url("en-nz.js");
            public static readonly string es_do_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/es-do.min.js") ? Url("es-do.min.js") : Url("es-do.js");
            public static readonly string es_us_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/es-us.min.js") ? Url("es-us.min.js") : Url("es-us.js");
            public static readonly string es_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/es.min.js") ? Url("es.min.js") : Url("es.js");
            public static readonly string et_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/et.min.js") ? Url("et.min.js") : Url("et.js");
            public static readonly string eu_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/eu.min.js") ? Url("eu.min.js") : Url("eu.js");
            public static readonly string fa_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fa.min.js") ? Url("fa.min.js") : Url("fa.js");
            public static readonly string fi_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fi.min.js") ? Url("fi.min.js") : Url("fi.js");
            public static readonly string fr_ca_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fr-ca.min.js") ? Url("fr-ca.min.js") : Url("fr-ca.js");
            public static readonly string fr_ch_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fr-ch.min.js") ? Url("fr-ch.min.js") : Url("fr-ch.js");
            public static readonly string fr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fr.min.js") ? Url("fr.min.js") : Url("fr.js");
            public static readonly string gl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/gl.min.js") ? Url("gl.min.js") : Url("gl.js");
            public static readonly string he_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/he.min.js") ? Url("he.min.js") : Url("he.js");
            public static readonly string hi_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/hi.min.js") ? Url("hi.min.js") : Url("hi.js");
            public static readonly string hr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/hr.min.js") ? Url("hr.min.js") : Url("hr.js");
            public static readonly string hu_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/hu.min.js") ? Url("hu.min.js") : Url("hu.js");
            public static readonly string id_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/id.min.js") ? Url("id.min.js") : Url("id.js");
            public static readonly string is_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/is.min.js") ? Url("is.min.js") : Url("is.js");
            public static readonly string it_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/it.min.js") ? Url("it.min.js") : Url("it.js");
            public static readonly string ja_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ja.min.js") ? Url("ja.min.js") : Url("ja.js");
            public static readonly string ka_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ka.min.js") ? Url("ka.min.js") : Url("ka.js");
            public static readonly string kk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/kk.min.js") ? Url("kk.min.js") : Url("kk.js");
            public static readonly string ko_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ko.min.js") ? Url("ko.min.js") : Url("ko.js");
            public static readonly string lb_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lb.min.js") ? Url("lb.min.js") : Url("lb.js");
            public static readonly string lt_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lt.min.js") ? Url("lt.min.js") : Url("lt.js");
            public static readonly string lv_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lv.min.js") ? Url("lv.min.js") : Url("lv.js");
            public static readonly string mk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/mk.min.js") ? Url("mk.min.js") : Url("mk.js");
            public static readonly string ms_my_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ms-my.min.js") ? Url("ms-my.min.js") : Url("ms-my.js");
            public static readonly string ms_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ms.min.js") ? Url("ms.min.js") : Url("ms.js");
            public static readonly string nb_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/nb.min.js") ? Url("nb.min.js") : Url("nb.js");
            public static readonly string nl_be_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/nl-be.min.js") ? Url("nl-be.min.js") : Url("nl-be.js");
            public static readonly string nl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/nl.min.js") ? Url("nl.min.js") : Url("nl.js");
            public static readonly string nn_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/nn.min.js") ? Url("nn.min.js") : Url("nn.js");
            public static readonly string pl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pl.min.js") ? Url("pl.min.js") : Url("pl.js");
            public static readonly string pt_br_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pt-br.min.js") ? Url("pt-br.min.js") : Url("pt-br.js");
            public static readonly string pt_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pt.min.js") ? Url("pt.min.js") : Url("pt.js");
            public static readonly string ro_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ro.min.js") ? Url("ro.min.js") : Url("ro.js");
            public static readonly string ru_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ru.min.js") ? Url("ru.min.js") : Url("ru.js");
            public static readonly string sk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sk.min.js") ? Url("sk.min.js") : Url("sk.js");
            public static readonly string sl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sl.min.js") ? Url("sl.min.js") : Url("sl.js");
            public static readonly string sq_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sq.min.js") ? Url("sq.min.js") : Url("sq.js");
            public static readonly string sr_cyrl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sr-cyrl.min.js") ? Url("sr-cyrl.min.js") : Url("sr-cyrl.js");
            public static readonly string sr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sr.min.js") ? Url("sr.min.js") : Url("sr.js");
            public static readonly string sv_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sv.min.js") ? Url("sv.min.js") : Url("sv.js");
            public static readonly string th_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/th.min.js") ? Url("th.min.js") : Url("th.js");
            public static readonly string tr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/tr.min.js") ? Url("tr.min.js") : Url("tr.js");
            public static readonly string uk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/uk.min.js") ? Url("uk.min.js") : Url("uk.js");
            public static readonly string vi_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/vi.min.js") ? Url("vi.min.js") : Url("vi.js");
            public static readonly string zh_cn_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/zh-cn.min.js") ? Url("zh-cn.min.js") : Url("zh-cn.js");
            public static readonly string zh_tw_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/zh-tw.min.js") ? Url("zh-tw.min.js") : Url("zh-tw.js");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class markdown {
            private const string URLPATH = "~/Scripts/markdown";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string bootstrap_markdown_min_js = Url("bootstrap-markdown.min.js");
            public static readonly string markdown_min_js = Url("markdown.min.js");
            public static readonly string to_markdown_min_js = Url("to-markdown.min.js");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class notification {
            private const string URLPATH = "~/Scripts/notification";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string SmartNotification_min_js = Url("SmartNotification.min.js");
        }
    
        public static readonly string OrderFunctions_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/OrderFunctions.min.js") ? Url("OrderFunctions.min.js") : Url("OrderFunctions.js");
        public static readonly string OrderPrintFunctions_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/OrderPrintFunctions.min.js") ? Url("OrderPrintFunctions.min.js") : Url("OrderPrintFunctions.js");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class plugin {
            private const string URLPATH = "~/Scripts/plugin";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class bootstrap_progressbar {
                private const string URLPATH = "~/Scripts/plugin/bootstrap-progressbar";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string bootstrap_progressbar_min_js = Url("bootstrap-progressbar.min.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class bootstrap_slider {
                private const string URLPATH = "~/Scripts/plugin/bootstrap-slider";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string bootstrap_slider_min_js = Url("bootstrap-slider.min.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class bootstrap_tags {
                private const string URLPATH = "~/Scripts/plugin/bootstrap-tags";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string bootstrap_tagsinput_angular_min_js = Url("bootstrap-tagsinput-angular.min.js");
                public static readonly string bootstrap_tagsinput_min_js = Url("bootstrap-tagsinput.min.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class bootstrap_timepicker {
                private const string URLPATH = "~/Scripts/plugin/bootstrap-timepicker";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string bootstrap_timepicker_min_js = Url("bootstrap-timepicker.min.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class bootstrap_wizard {
                private const string URLPATH = "~/Scripts/plugin/bootstrap-wizard";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string jquery_bootstrap_wizard_min_js = Url("jquery.bootstrap.wizard.min.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class bootstraptree {
                private const string URLPATH = "~/Scripts/plugin/bootstraptree";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string bootstrap_tree_min_js = Url("bootstrap-tree.min.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class ckeditor {
                private const string URLPATH = "~/Scripts/plugin/ckeditor";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class adapters {
                    private const string URLPATH = "~/Scripts/plugin/ckeditor/adapters";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string jquery_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.min.js") ? Url("jquery.min.js") : Url("jquery.js");
                }
            
                public static readonly string build_config_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/build-config.min.js") ? Url("build-config.min.js") : Url("build-config.js");
                public static readonly string CHANGES_md = Url("CHANGES.md");
                public static readonly string ckeditor_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ckeditor.min.js") ? Url("ckeditor.min.js") : Url("ckeditor.js");
                public static readonly string config_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/config.min.js") ? Url("config.min.js") : Url("config.js");
                public static readonly string contents_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/contents.min.css") ? Url("contents.min.css") : Url("contents.css");
                     
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class lang {
                    private const string URLPATH = "~/Scripts/plugin/ckeditor/lang";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string af_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/af.min.js") ? Url("af.min.js") : Url("af.js");
                    public static readonly string ar_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ar.min.js") ? Url("ar.min.js") : Url("ar.js");
                    public static readonly string bg_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bg.min.js") ? Url("bg.min.js") : Url("bg.js");
                    public static readonly string bn_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bn.min.js") ? Url("bn.min.js") : Url("bn.js");
                    public static readonly string bs_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bs.min.js") ? Url("bs.min.js") : Url("bs.js");
                    public static readonly string ca_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ca.min.js") ? Url("ca.min.js") : Url("ca.js");
                    public static readonly string cs_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/cs.min.js") ? Url("cs.min.js") : Url("cs.js");
                    public static readonly string cy_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/cy.min.js") ? Url("cy.min.js") : Url("cy.js");
                    public static readonly string da_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/da.min.js") ? Url("da.min.js") : Url("da.js");
                    public static readonly string de_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/de.min.js") ? Url("de.min.js") : Url("de.js");
                    public static readonly string el_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/el.min.js") ? Url("el.min.js") : Url("el.js");
                    public static readonly string en_au_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en-au.min.js") ? Url("en-au.min.js") : Url("en-au.js");
                    public static readonly string en_ca_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en-ca.min.js") ? Url("en-ca.min.js") : Url("en-ca.js");
                    public static readonly string en_gb_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en-gb.min.js") ? Url("en-gb.min.js") : Url("en-gb.js");
                    public static readonly string en_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en.min.js") ? Url("en.min.js") : Url("en.js");
                    public static readonly string eo_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/eo.min.js") ? Url("eo.min.js") : Url("eo.js");
                    public static readonly string es_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/es.min.js") ? Url("es.min.js") : Url("es.js");
                    public static readonly string et_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/et.min.js") ? Url("et.min.js") : Url("et.js");
                    public static readonly string eu_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/eu.min.js") ? Url("eu.min.js") : Url("eu.js");
                    public static readonly string fa_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fa.min.js") ? Url("fa.min.js") : Url("fa.js");
                    public static readonly string fi_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fi.min.js") ? Url("fi.min.js") : Url("fi.js");
                    public static readonly string fo_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fo.min.js") ? Url("fo.min.js") : Url("fo.js");
                    public static readonly string fr_ca_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fr-ca.min.js") ? Url("fr-ca.min.js") : Url("fr-ca.js");
                    public static readonly string fr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fr.min.js") ? Url("fr.min.js") : Url("fr.js");
                    public static readonly string gl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/gl.min.js") ? Url("gl.min.js") : Url("gl.js");
                    public static readonly string gu_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/gu.min.js") ? Url("gu.min.js") : Url("gu.js");
                    public static readonly string he_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/he.min.js") ? Url("he.min.js") : Url("he.js");
                    public static readonly string hi_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/hi.min.js") ? Url("hi.min.js") : Url("hi.js");
                    public static readonly string hr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/hr.min.js") ? Url("hr.min.js") : Url("hr.js");
                    public static readonly string hu_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/hu.min.js") ? Url("hu.min.js") : Url("hu.js");
                    public static readonly string id_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/id.min.js") ? Url("id.min.js") : Url("id.js");
                    public static readonly string is_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/is.min.js") ? Url("is.min.js") : Url("is.js");
                    public static readonly string it_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/it.min.js") ? Url("it.min.js") : Url("it.js");
                    public static readonly string ja_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ja.min.js") ? Url("ja.min.js") : Url("ja.js");
                    public static readonly string ka_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ka.min.js") ? Url("ka.min.js") : Url("ka.js");
                    public static readonly string km_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/km.min.js") ? Url("km.min.js") : Url("km.js");
                    public static readonly string ko_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ko.min.js") ? Url("ko.min.js") : Url("ko.js");
                    public static readonly string ku_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ku.min.js") ? Url("ku.min.js") : Url("ku.js");
                    public static readonly string lt_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lt.min.js") ? Url("lt.min.js") : Url("lt.js");
                    public static readonly string lv_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lv.min.js") ? Url("lv.min.js") : Url("lv.js");
                    public static readonly string mk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/mk.min.js") ? Url("mk.min.js") : Url("mk.js");
                    public static readonly string mn_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/mn.min.js") ? Url("mn.min.js") : Url("mn.js");
                    public static readonly string ms_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ms.min.js") ? Url("ms.min.js") : Url("ms.js");
                    public static readonly string nb_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/nb.min.js") ? Url("nb.min.js") : Url("nb.js");
                    public static readonly string nl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/nl.min.js") ? Url("nl.min.js") : Url("nl.js");
                    public static readonly string no_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/no.min.js") ? Url("no.min.js") : Url("no.js");
                    public static readonly string pl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pl.min.js") ? Url("pl.min.js") : Url("pl.js");
                    public static readonly string pt_br_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pt-br.min.js") ? Url("pt-br.min.js") : Url("pt-br.js");
                    public static readonly string pt_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pt.min.js") ? Url("pt.min.js") : Url("pt.js");
                    public static readonly string ro_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ro.min.js") ? Url("ro.min.js") : Url("ro.js");
                    public static readonly string ru_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ru.min.js") ? Url("ru.min.js") : Url("ru.js");
                    public static readonly string si_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/si.min.js") ? Url("si.min.js") : Url("si.js");
                    public static readonly string sk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sk.min.js") ? Url("sk.min.js") : Url("sk.js");
                    public static readonly string sl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sl.min.js") ? Url("sl.min.js") : Url("sl.js");
                    public static readonly string sq_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sq.min.js") ? Url("sq.min.js") : Url("sq.js");
                    public static readonly string sr_latn_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sr-latn.min.js") ? Url("sr-latn.min.js") : Url("sr-latn.js");
                    public static readonly string sr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sr.min.js") ? Url("sr.min.js") : Url("sr.js");
                    public static readonly string sv_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sv.min.js") ? Url("sv.min.js") : Url("sv.js");
                    public static readonly string th_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/th.min.js") ? Url("th.min.js") : Url("th.js");
                    public static readonly string tr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/tr.min.js") ? Url("tr.min.js") : Url("tr.js");
                    public static readonly string ug_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ug.min.js") ? Url("ug.min.js") : Url("ug.js");
                    public static readonly string uk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/uk.min.js") ? Url("uk.min.js") : Url("uk.js");
                    public static readonly string vi_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/vi.min.js") ? Url("vi.min.js") : Url("vi.js");
                    public static readonly string zh_cn_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/zh-cn.min.js") ? Url("zh-cn.min.js") : Url("zh-cn.js");
                    public static readonly string zh_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/zh.min.js") ? Url("zh.min.js") : Url("zh.js");
                }
            
                public static readonly string LICENSE_md = Url("LICENSE.md");
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class plugins {
                    private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class a11yhelp {
                        private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/a11yhelp";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class dialogs {
                            private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/a11yhelp/dialogs";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string a11yhelp_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/a11yhelp.min.js") ? Url("a11yhelp.min.js") : Url("a11yhelp.js");
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class lang {
                                private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/a11yhelp/dialogs/lang";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string _translationstatus_txt = Url("_translationstatus.txt");
                                public static readonly string ar_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ar.min.js") ? Url("ar.min.js") : Url("ar.js");
                                public static readonly string bg_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bg.min.js") ? Url("bg.min.js") : Url("bg.js");
                                public static readonly string ca_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ca.min.js") ? Url("ca.min.js") : Url("ca.js");
                                public static readonly string cs_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/cs.min.js") ? Url("cs.min.js") : Url("cs.js");
                                public static readonly string cy_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/cy.min.js") ? Url("cy.min.js") : Url("cy.js");
                                public static readonly string da_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/da.min.js") ? Url("da.min.js") : Url("da.js");
                                public static readonly string de_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/de.min.js") ? Url("de.min.js") : Url("de.js");
                                public static readonly string el_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/el.min.js") ? Url("el.min.js") : Url("el.js");
                                public static readonly string en_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en.min.js") ? Url("en.min.js") : Url("en.js");
                                public static readonly string eo_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/eo.min.js") ? Url("eo.min.js") : Url("eo.js");
                                public static readonly string es_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/es.min.js") ? Url("es.min.js") : Url("es.js");
                                public static readonly string et_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/et.min.js") ? Url("et.min.js") : Url("et.js");
                                public static readonly string fa_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fa.min.js") ? Url("fa.min.js") : Url("fa.js");
                                public static readonly string fi_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fi.min.js") ? Url("fi.min.js") : Url("fi.js");
                                public static readonly string fr_ca_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fr-ca.min.js") ? Url("fr-ca.min.js") : Url("fr-ca.js");
                                public static readonly string fr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fr.min.js") ? Url("fr.min.js") : Url("fr.js");
                                public static readonly string gl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/gl.min.js") ? Url("gl.min.js") : Url("gl.js");
                                public static readonly string gu_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/gu.min.js") ? Url("gu.min.js") : Url("gu.js");
                                public static readonly string he_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/he.min.js") ? Url("he.min.js") : Url("he.js");
                                public static readonly string hi_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/hi.min.js") ? Url("hi.min.js") : Url("hi.js");
                                public static readonly string hr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/hr.min.js") ? Url("hr.min.js") : Url("hr.js");
                                public static readonly string hu_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/hu.min.js") ? Url("hu.min.js") : Url("hu.js");
                                public static readonly string id_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/id.min.js") ? Url("id.min.js") : Url("id.js");
                                public static readonly string it_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/it.min.js") ? Url("it.min.js") : Url("it.js");
                                public static readonly string ja_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ja.min.js") ? Url("ja.min.js") : Url("ja.js");
                                public static readonly string km_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/km.min.js") ? Url("km.min.js") : Url("km.js");
                                public static readonly string ko_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ko.min.js") ? Url("ko.min.js") : Url("ko.js");
                                public static readonly string ku_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ku.min.js") ? Url("ku.min.js") : Url("ku.js");
                                public static readonly string lt_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lt.min.js") ? Url("lt.min.js") : Url("lt.js");
                                public static readonly string lv_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lv.min.js") ? Url("lv.min.js") : Url("lv.js");
                                public static readonly string mk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/mk.min.js") ? Url("mk.min.js") : Url("mk.js");
                                public static readonly string mn_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/mn.min.js") ? Url("mn.min.js") : Url("mn.js");
                                public static readonly string nb_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/nb.min.js") ? Url("nb.min.js") : Url("nb.js");
                                public static readonly string nl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/nl.min.js") ? Url("nl.min.js") : Url("nl.js");
                                public static readonly string no_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/no.min.js") ? Url("no.min.js") : Url("no.js");
                                public static readonly string pl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pl.min.js") ? Url("pl.min.js") : Url("pl.js");
                                public static readonly string pt_br_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pt-br.min.js") ? Url("pt-br.min.js") : Url("pt-br.js");
                                public static readonly string pt_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pt.min.js") ? Url("pt.min.js") : Url("pt.js");
                                public static readonly string ro_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ro.min.js") ? Url("ro.min.js") : Url("ro.js");
                                public static readonly string ru_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ru.min.js") ? Url("ru.min.js") : Url("ru.js");
                                public static readonly string si_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/si.min.js") ? Url("si.min.js") : Url("si.js");
                                public static readonly string sk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sk.min.js") ? Url("sk.min.js") : Url("sk.js");
                                public static readonly string sl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sl.min.js") ? Url("sl.min.js") : Url("sl.js");
                                public static readonly string sq_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sq.min.js") ? Url("sq.min.js") : Url("sq.js");
                                public static readonly string sr_latn_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sr-latn.min.js") ? Url("sr-latn.min.js") : Url("sr-latn.js");
                                public static readonly string sr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sr.min.js") ? Url("sr.min.js") : Url("sr.js");
                                public static readonly string sv_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sv.min.js") ? Url("sv.min.js") : Url("sv.js");
                                public static readonly string th_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/th.min.js") ? Url("th.min.js") : Url("th.js");
                                public static readonly string tr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/tr.min.js") ? Url("tr.min.js") : Url("tr.js");
                                public static readonly string ug_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ug.min.js") ? Url("ug.min.js") : Url("ug.js");
                                public static readonly string uk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/uk.min.js") ? Url("uk.min.js") : Url("uk.js");
                                public static readonly string vi_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/vi.min.js") ? Url("vi.min.js") : Url("vi.js");
                                public static readonly string zh_cn_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/zh-cn.min.js") ? Url("zh-cn.min.js") : Url("zh-cn.js");
                            }
                        
                        }
                    
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class about {
                        private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/about";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class dialogs {
                            private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/about/dialogs";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string about_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/about.min.js") ? Url("about.min.js") : Url("about.js");
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class hidpi {
                                private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/about/dialogs/hidpi";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string logo_ckeditor_png = Url("logo_ckeditor.png");
                            }
                        
                            public static readonly string logo_ckeditor_png = Url("logo_ckeditor.png");
                        }
                    
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class clipboard {
                        private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/clipboard";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class dialogs {
                            private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/clipboard/dialogs";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string paste_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/paste.min.js") ? Url("paste.min.js") : Url("paste.js");
                        }
                    
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class colordialog {
                        private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/colordialog";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class dialogs {
                            private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/colordialog/dialogs";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string colordialog_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/colordialog.min.js") ? Url("colordialog.min.js") : Url("colordialog.js");
                        }
                    
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class dialog {
                        private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/dialog";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string dialogDefinition_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dialogDefinition.min.js") ? Url("dialogDefinition.min.js") : Url("dialogDefinition.js");
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class div {
                        private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/div";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class dialogs {
                            private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/div/dialogs";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string div_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/div.min.js") ? Url("div.min.js") : Url("div.js");
                        }
                    
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class fakeobjects {
                        private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/fakeobjects";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class images {
                            private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/fakeobjects/images";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string spacer_gif = Url("spacer.gif");
                        }
                    
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class find {
                        private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/find";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class dialogs {
                            private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/find/dialogs";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string find_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/find.min.js") ? Url("find.min.js") : Url("find.js");
                        }
                    
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class flash {
                        private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/flash";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class dialogs {
                            private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/flash/dialogs";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string flash_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/flash.min.js") ? Url("flash.min.js") : Url("flash.js");
                        }
                    
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class images {
                            private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/flash/images";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string placeholder_png = Url("placeholder.png");
                        }
                    
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class forms {
                        private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/forms";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class dialogs {
                            private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/forms/dialogs";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string button_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/button.min.js") ? Url("button.min.js") : Url("button.js");
                            public static readonly string checkbox_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/checkbox.min.js") ? Url("checkbox.min.js") : Url("checkbox.js");
                            public static readonly string form_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/form.min.js") ? Url("form.min.js") : Url("form.js");
                            public static readonly string hiddenfield_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/hiddenfield.min.js") ? Url("hiddenfield.min.js") : Url("hiddenfield.js");
                            public static readonly string radio_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/radio.min.js") ? Url("radio.min.js") : Url("radio.js");
                            public static readonly string select_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/select.min.js") ? Url("select.min.js") : Url("select.js");
                            public static readonly string textarea_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/textarea.min.js") ? Url("textarea.min.js") : Url("textarea.js");
                            public static readonly string textfield_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/textfield.min.js") ? Url("textfield.min.js") : Url("textfield.js");
                        }
                    
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class images {
                            private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/forms/images";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string hiddenfield_gif = Url("hiddenfield.gif");
                        }
                    
                    }
                
                    public static readonly string icons_png = Url("icons.png");
                    public static readonly string icons_hidpi_png = Url("icons_hidpi.png");
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class iframe {
                        private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/iframe";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class dialogs {
                            private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/iframe/dialogs";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string iframe_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/iframe.min.js") ? Url("iframe.min.js") : Url("iframe.js");
                        }
                    
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class images {
                            private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/iframe/images";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string placeholder_png = Url("placeholder.png");
                        }
                    
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class image {
                        private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/image";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class dialogs {
                            private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/image/dialogs";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string image_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/image.min.js") ? Url("image.min.js") : Url("image.js");
                        }
                    
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class images {
                            private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/image/images";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string noimage_png = Url("noimage.png");
                        }
                    
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class link {
                        private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/link";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class dialogs {
                            private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/link/dialogs";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string anchor_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/anchor.min.js") ? Url("anchor.min.js") : Url("anchor.js");
                            public static readonly string link_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/link.min.js") ? Url("link.min.js") : Url("link.js");
                        }
                    
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class images {
                            private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/link/images";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string anchor_png = Url("anchor.png");
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class hidpi {
                                private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/link/images/hidpi";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string anchor_png = Url("anchor.png");
                            }
                        
                        }
                    
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class liststyle {
                        private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/liststyle";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class dialogs {
                            private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/liststyle/dialogs";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string liststyle_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/liststyle.min.js") ? Url("liststyle.min.js") : Url("liststyle.js");
                        }
                    
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class magicline {
                        private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/magicline";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class images {
                            private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/magicline/images";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class hidpi {
                                private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/magicline/images/hidpi";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string icon_png = Url("icon.png");
                            }
                        
                            public static readonly string icon_png = Url("icon.png");
                        }
                    
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class pagebreak {
                        private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/pagebreak";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class images {
                            private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/pagebreak/images";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string pagebreak_gif = Url("pagebreak.gif");
                        }
                    
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class pastefromword {
                        private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/pastefromword";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class filter {
                            private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/pastefromword/filter";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string default_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/default.min.js") ? Url("default.min.js") : Url("default.js");
                        }
                    
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class preview {
                        private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/preview";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string preview_html = Url("preview.html");
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class scayt {
                        private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/scayt";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class dialogs {
                            private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/scayt/dialogs";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string options_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/options.min.js") ? Url("options.min.js") : Url("options.js");
                            public static readonly string toolbar_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/toolbar.min.css") ? Url("toolbar.min.css") : Url("toolbar.css");
                                 
                        }
                    
                        public static readonly string LICENSE_md = Url("LICENSE.md");
                        public static readonly string README_md = Url("README.md");
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class showblocks {
                        private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/showblocks";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class images {
                            private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/showblocks/images";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string block_address_png = Url("block_address.png");
                            public static readonly string block_blockquote_png = Url("block_blockquote.png");
                            public static readonly string block_div_png = Url("block_div.png");
                            public static readonly string block_h1_png = Url("block_h1.png");
                            public static readonly string block_h2_png = Url("block_h2.png");
                            public static readonly string block_h3_png = Url("block_h3.png");
                            public static readonly string block_h4_png = Url("block_h4.png");
                            public static readonly string block_h5_png = Url("block_h5.png");
                            public static readonly string block_h6_png = Url("block_h6.png");
                            public static readonly string block_p_png = Url("block_p.png");
                            public static readonly string block_pre_png = Url("block_pre.png");
                        }
                    
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class smiley {
                        private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/smiley";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class dialogs {
                            private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/smiley/dialogs";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string smiley_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/smiley.min.js") ? Url("smiley.min.js") : Url("smiley.js");
                        }
                    
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class images {
                            private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/smiley/images";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string angel_smile_gif = Url("angel_smile.gif");
                            public static readonly string angry_smile_gif = Url("angry_smile.gif");
                            public static readonly string broken_heart_gif = Url("broken_heart.gif");
                            public static readonly string confused_smile_gif = Url("confused_smile.gif");
                            public static readonly string cry_smile_gif = Url("cry_smile.gif");
                            public static readonly string devil_smile_gif = Url("devil_smile.gif");
                            public static readonly string embaressed_smile_gif = Url("embaressed_smile.gif");
                            public static readonly string embarrassed_smile_gif = Url("embarrassed_smile.gif");
                            public static readonly string envelope_gif = Url("envelope.gif");
                            public static readonly string heart_gif = Url("heart.gif");
                            public static readonly string kiss_gif = Url("kiss.gif");
                            public static readonly string lightbulb_gif = Url("lightbulb.gif");
                            public static readonly string omg_smile_gif = Url("omg_smile.gif");
                            public static readonly string regular_smile_gif = Url("regular_smile.gif");
                            public static readonly string sad_smile_gif = Url("sad_smile.gif");
                            public static readonly string shades_smile_gif = Url("shades_smile.gif");
                            public static readonly string teeth_smile_gif = Url("teeth_smile.gif");
                            public static readonly string thumbs_down_gif = Url("thumbs_down.gif");
                            public static readonly string thumbs_up_gif = Url("thumbs_up.gif");
                            public static readonly string tongue_smile_gif = Url("tongue_smile.gif");
                            public static readonly string tounge_smile_gif = Url("tounge_smile.gif");
                            public static readonly string whatchutalkingabout_smile_gif = Url("whatchutalkingabout_smile.gif");
                            public static readonly string wink_smile_gif = Url("wink_smile.gif");
                        }
                    
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class specialchar {
                        private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/specialchar";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class dialogs {
                            private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/specialchar/dialogs";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class lang {
                                private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/specialchar/dialogs/lang";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string _translationstatus_txt = Url("_translationstatus.txt");
                                public static readonly string ar_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ar.min.js") ? Url("ar.min.js") : Url("ar.js");
                                public static readonly string bg_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bg.min.js") ? Url("bg.min.js") : Url("bg.js");
                                public static readonly string ca_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ca.min.js") ? Url("ca.min.js") : Url("ca.js");
                                public static readonly string cs_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/cs.min.js") ? Url("cs.min.js") : Url("cs.js");
                                public static readonly string cy_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/cy.min.js") ? Url("cy.min.js") : Url("cy.js");
                                public static readonly string de_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/de.min.js") ? Url("de.min.js") : Url("de.js");
                                public static readonly string el_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/el.min.js") ? Url("el.min.js") : Url("el.js");
                                public static readonly string en_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en.min.js") ? Url("en.min.js") : Url("en.js");
                                public static readonly string eo_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/eo.min.js") ? Url("eo.min.js") : Url("eo.js");
                                public static readonly string es_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/es.min.js") ? Url("es.min.js") : Url("es.js");
                                public static readonly string et_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/et.min.js") ? Url("et.min.js") : Url("et.js");
                                public static readonly string fa_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fa.min.js") ? Url("fa.min.js") : Url("fa.js");
                                public static readonly string fi_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fi.min.js") ? Url("fi.min.js") : Url("fi.js");
                                public static readonly string fr_ca_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fr-ca.min.js") ? Url("fr-ca.min.js") : Url("fr-ca.js");
                                public static readonly string fr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fr.min.js") ? Url("fr.min.js") : Url("fr.js");
                                public static readonly string gl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/gl.min.js") ? Url("gl.min.js") : Url("gl.js");
                                public static readonly string he_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/he.min.js") ? Url("he.min.js") : Url("he.js");
                                public static readonly string hr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/hr.min.js") ? Url("hr.min.js") : Url("hr.js");
                                public static readonly string hu_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/hu.min.js") ? Url("hu.min.js") : Url("hu.js");
                                public static readonly string id_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/id.min.js") ? Url("id.min.js") : Url("id.js");
                                public static readonly string it_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/it.min.js") ? Url("it.min.js") : Url("it.js");
                                public static readonly string ja_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ja.min.js") ? Url("ja.min.js") : Url("ja.js");
                                public static readonly string ku_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ku.min.js") ? Url("ku.min.js") : Url("ku.js");
                                public static readonly string lv_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lv.min.js") ? Url("lv.min.js") : Url("lv.js");
                                public static readonly string nb_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/nb.min.js") ? Url("nb.min.js") : Url("nb.js");
                                public static readonly string nl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/nl.min.js") ? Url("nl.min.js") : Url("nl.js");
                                public static readonly string no_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/no.min.js") ? Url("no.min.js") : Url("no.js");
                                public static readonly string pl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pl.min.js") ? Url("pl.min.js") : Url("pl.js");
                                public static readonly string pt_br_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pt-br.min.js") ? Url("pt-br.min.js") : Url("pt-br.js");
                                public static readonly string pt_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pt.min.js") ? Url("pt.min.js") : Url("pt.js");
                                public static readonly string ru_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ru.min.js") ? Url("ru.min.js") : Url("ru.js");
                                public static readonly string si_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/si.min.js") ? Url("si.min.js") : Url("si.js");
                                public static readonly string sk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sk.min.js") ? Url("sk.min.js") : Url("sk.js");
                                public static readonly string sl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sl.min.js") ? Url("sl.min.js") : Url("sl.js");
                                public static readonly string sq_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sq.min.js") ? Url("sq.min.js") : Url("sq.js");
                                public static readonly string sv_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sv.min.js") ? Url("sv.min.js") : Url("sv.js");
                                public static readonly string th_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/th.min.js") ? Url("th.min.js") : Url("th.js");
                                public static readonly string tr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/tr.min.js") ? Url("tr.min.js") : Url("tr.js");
                                public static readonly string ug_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ug.min.js") ? Url("ug.min.js") : Url("ug.js");
                                public static readonly string uk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/uk.min.js") ? Url("uk.min.js") : Url("uk.js");
                                public static readonly string vi_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/vi.min.js") ? Url("vi.min.js") : Url("vi.js");
                                public static readonly string zh_cn_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/zh-cn.min.js") ? Url("zh-cn.min.js") : Url("zh-cn.js");
                            }
                        
                            public static readonly string specialchar_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/specialchar.min.js") ? Url("specialchar.min.js") : Url("specialchar.js");
                        }
                    
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class table {
                        private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/table";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class dialogs {
                            private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/table/dialogs";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string table_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/table.min.js") ? Url("table.min.js") : Url("table.js");
                        }
                    
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class tabletools {
                        private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/tabletools";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class dialogs {
                            private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/tabletools/dialogs";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string tableCell_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/tableCell.min.js") ? Url("tableCell.min.js") : Url("tableCell.js");
                        }
                    
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class templates {
                        private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/templates";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class dialogs {
                            private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/templates/dialogs";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string templates_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/templates.min.css") ? Url("templates.min.css") : Url("templates.css");
                                 
                            public static readonly string templates_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/templates.min.js") ? Url("templates.min.js") : Url("templates.js");
                        }
                    
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class templates_ {
                            private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/templates/templates";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string default_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/default.min.js") ? Url("default.min.js") : Url("default.js");
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class images {
                                private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/templates/templates/images";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string template1_gif = Url("template1.gif");
                                public static readonly string template2_gif = Url("template2.gif");
                                public static readonly string template3_gif = Url("template3.gif");
                            }
                        
                        }
                    
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class wsc {
                        private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/wsc";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class dialogs {
                            private const string URLPATH = "~/Scripts/plugin/ckeditor/plugins/wsc/dialogs";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string ciframe_html = Url("ciframe.html");
                            public static readonly string tmp_html = Url("tmp.html");
                            public static readonly string tmpFrameset_html = Url("tmpFrameset.html");
                            public static readonly string wsc_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/wsc.min.css") ? Url("wsc.min.css") : Url("wsc.css");
                                 
                            public static readonly string wsc_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/wsc.min.js") ? Url("wsc.min.js") : Url("wsc.js");
                            public static readonly string wsc_ie_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/wsc_ie.min.js") ? Url("wsc_ie.min.js") : Url("wsc_ie.js");
                        }
                    
                        public static readonly string LICENSE_md = Url("LICENSE.md");
                        public static readonly string README_md = Url("README.md");
                    }
                
                }
            
                public static readonly string README_md = Url("README.md");
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class samples {
                    private const string URLPATH = "~/Scripts/plugin/ckeditor/samples";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string ajax_html = Url("ajax.html");
                    public static readonly string api_html = Url("api.html");
                    public static readonly string appendto_html = Url("appendto.html");
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class assets {
                        private const string URLPATH = "~/Scripts/plugin/ckeditor/samples/assets";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class inlineall {
                            private const string URLPATH = "~/Scripts/plugin/ckeditor/samples/assets/inlineall";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string logo_png = Url("logo.png");
                        }
                    
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class outputxhtml {
                            private const string URLPATH = "~/Scripts/plugin/ckeditor/samples/assets/outputxhtml";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string outputxhtml_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/outputxhtml.min.css") ? Url("outputxhtml.min.css") : Url("outputxhtml.css");
                                 
                        }
                    
                        public static readonly string posteddata_php = Url("posteddata.php");
                        public static readonly string sample_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sample.min.css") ? Url("sample.min.css") : Url("sample.css");
                             
                        public static readonly string sample_jpg = Url("sample.jpg");
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class uilanguages {
                            private const string URLPATH = "~/Scripts/plugin/ckeditor/samples/assets/uilanguages";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string languages_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/languages.min.js") ? Url("languages.min.js") : Url("languages.js");
                        }
                    
                    }
                
                    public static readonly string datafiltering_html = Url("datafiltering.html");
                    public static readonly string divreplace_html = Url("divreplace.html");
                    public static readonly string index_html = Url("index.html");
                    public static readonly string inlineall_html = Url("inlineall.html");
                    public static readonly string inlinebycode_html = Url("inlinebycode.html");
                    public static readonly string inlinetextarea_html = Url("inlinetextarea.html");
                    public static readonly string jquery_html = Url("jquery.html");
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class plugins {
                        private const string URLPATH = "~/Scripts/plugin/ckeditor/samples/plugins";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class dialog {
                            private const string URLPATH = "~/Scripts/plugin/ckeditor/samples/plugins/dialog";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class assets {
                                private const string URLPATH = "~/Scripts/plugin/ckeditor/samples/plugins/dialog/assets";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string my_dialog_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/my_dialog.min.js") ? Url("my_dialog.min.js") : Url("my_dialog.js");
                            }
                        
                            public static readonly string dialog_html = Url("dialog.html");
                        }
                    
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class enterkey {
                            private const string URLPATH = "~/Scripts/plugin/ckeditor/samples/plugins/enterkey";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string enterkey_html = Url("enterkey.html");
                        }
                    
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class htmlwriter {
                            private const string URLPATH = "~/Scripts/plugin/ckeditor/samples/plugins/htmlwriter";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class assets {
                                private const string URLPATH = "~/Scripts/plugin/ckeditor/samples/plugins/htmlwriter/assets";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                                public static class outputforflash {
                                    private const string URLPATH = "~/Scripts/plugin/ckeditor/samples/plugins/htmlwriter/assets/outputforflash";
                                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                    public static readonly string outputforflash_fla = Url("outputforflash.fla");
                                    public static readonly string outputforflash_swf = Url("outputforflash.swf");
                                    public static readonly string swfobject_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/swfobject.min.js") ? Url("swfobject.min.js") : Url("swfobject.js");
                                }
                            
                            }
                        
                            public static readonly string outputforflash_html = Url("outputforflash.html");
                            public static readonly string outputhtml_html = Url("outputhtml.html");
                        }
                    
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class magicline {
                            private const string URLPATH = "~/Scripts/plugin/ckeditor/samples/plugins/magicline";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string magicline_html = Url("magicline.html");
                        }
                    
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class toolbar {
                            private const string URLPATH = "~/Scripts/plugin/ckeditor/samples/plugins/toolbar";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string toolbar_html = Url("toolbar.html");
                        }
                    
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class wysiwygarea {
                            private const string URLPATH = "~/Scripts/plugin/ckeditor/samples/plugins/wysiwygarea";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string fullpage_html = Url("fullpage.html");
                        }
                    
                    }
                
                    public static readonly string readonly_html = Url("readonly.html");
                    public static readonly string replacebyclass_html = Url("replacebyclass.html");
                    public static readonly string replacebycode_html = Url("replacebycode.html");
                    public static readonly string sample_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sample.min.css") ? Url("sample.min.css") : Url("sample.css");
                         
                    public static readonly string sample_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sample.min.js") ? Url("sample.min.js") : Url("sample.js");
                    public static readonly string sample_posteddata_php = Url("sample_posteddata.php");
                    public static readonly string tabindex_html = Url("tabindex.html");
                    public static readonly string uicolor_html = Url("uicolor.html");
                    public static readonly string uilanguages_html = Url("uilanguages.html");
                    public static readonly string xhtmlstyle_html = Url("xhtmlstyle.html");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class skins {
                    private const string URLPATH = "~/Scripts/plugin/ckeditor/skins";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class moono {
                        private const string URLPATH = "~/Scripts/plugin/ckeditor/skins/moono";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string dialog_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dialog.min.css") ? Url("dialog.min.css") : Url("dialog.css");
                             
                        public static readonly string dialog_ie_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dialog_ie.min.css") ? Url("dialog_ie.min.css") : Url("dialog_ie.css");
                             
                        public static readonly string dialog_ie7_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dialog_ie7.min.css") ? Url("dialog_ie7.min.css") : Url("dialog_ie7.css");
                             
                        public static readonly string dialog_ie8_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dialog_ie8.min.css") ? Url("dialog_ie8.min.css") : Url("dialog_ie8.css");
                             
                        public static readonly string dialog_iequirks_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dialog_iequirks.min.css") ? Url("dialog_iequirks.min.css") : Url("dialog_iequirks.css");
                             
                        public static readonly string dialog_opera_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dialog_opera.min.css") ? Url("dialog_opera.min.css") : Url("dialog_opera.css");
                             
                        public static readonly string editor_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor.min.css") ? Url("editor.min.css") : Url("editor.css");
                             
                        public static readonly string editor_gecko_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_gecko.min.css") ? Url("editor_gecko.min.css") : Url("editor_gecko.css");
                             
                        public static readonly string editor_ie_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_ie.min.css") ? Url("editor_ie.min.css") : Url("editor_ie.css");
                             
                        public static readonly string editor_ie7_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_ie7.min.css") ? Url("editor_ie7.min.css") : Url("editor_ie7.css");
                             
                        public static readonly string editor_ie8_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_ie8.min.css") ? Url("editor_ie8.min.css") : Url("editor_ie8.css");
                             
                        public static readonly string editor_iequirks_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_iequirks.min.css") ? Url("editor_iequirks.min.css") : Url("editor_iequirks.css");
                             
                        public static readonly string icons_png = Url("icons.png");
                        public static readonly string icons_hidpi_png = Url("icons_hidpi.png");
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class images {
                            private const string URLPATH = "~/Scripts/plugin/ckeditor/skins/moono/images";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string arrow_png = Url("arrow.png");
                            public static readonly string close_png = Url("close.png");
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class hidpi {
                                private const string URLPATH = "~/Scripts/plugin/ckeditor/skins/moono/images/hidpi";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string close_png = Url("close.png");
                                public static readonly string lock_open_png = Url("lock-open.png");
                                public static readonly string lock_png = Url("lock.png");
                                public static readonly string refresh_png = Url("refresh.png");
                            }
                        
                            public static readonly string lock_open_png = Url("lock-open.png");
                            public static readonly string lock_png = Url("lock.png");
                            public static readonly string refresh_png = Url("refresh.png");
                        }
                    
                        public static readonly string readme_md = Url("readme.md");
                    }
                
                }
            
                public static readonly string styles_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/styles.min.js") ? Url("styles.min.js") : Url("styles.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class clockpicker {
                private const string URLPATH = "~/Scripts/plugin/clockpicker";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string clockpicker_min_js = Url("clockpicker.min.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class colorpicker {
                private const string URLPATH = "~/Scripts/plugin/colorpicker";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string bootstrap_colorpicker_min_js = Url("bootstrap-colorpicker.min.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class datatable_responsive {
                private const string URLPATH = "~/Scripts/plugin/datatable-responsive";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string datatables_responsive_min_js = Url("datatables.responsive.min.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class datatables {
                private const string URLPATH = "~/Scripts/plugin/datatables";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string dataTables_bootstrap_min_js = Url("dataTables.bootstrap.min.js");
                public static readonly string dataTables_colReorder_min_js = Url("dataTables.colReorder.min.js");
                public static readonly string dataTables_colVis_min_js = Url("dataTables.colVis.min.js");
                public static readonly string dataTables_tableTools_min_js = Url("dataTables.tableTools.min.js");
                public static readonly string jquery_dataTables_min_js = Url("jquery.dataTables.min.js");
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class swf {
                    private const string URLPATH = "~/Scripts/plugin/datatables/swf";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string copy_csv_xls_swf = Url("copy_csv_xls.swf");
                    public static readonly string copy_csv_xls_pdf_swf = Url("copy_csv_xls_pdf.swf");
                }
            
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class delete_table_row {
                private const string URLPATH = "~/Scripts/plugin/delete-table-row";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string delete_table_row_min_js = Url("delete-table-row.min.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class dropzone {
                private const string URLPATH = "~/Scripts/plugin/dropzone";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string dropzone_amd_module_min_js = Url("dropzone-amd-module.min.js");
                public static readonly string dropzone_min_js = Url("dropzone.min.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class dygraphs {
                private const string URLPATH = "~/Scripts/plugin/dygraphs";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string demo_data_min_js = Url("demo-data.min.js");
                public static readonly string dygraph_combined_min_js = Url("dygraph-combined.min.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class easy_pie_chart {
                private const string URLPATH = "~/Scripts/plugin/easy-pie-chart";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string jquery_easy_pie_chart_min_js = Url("jquery.easy-pie-chart.min.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class fastclick {
                private const string URLPATH = "~/Scripts/plugin/fastclick";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string fastclick_min_js = Url("fastclick.min.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class flot {
                private const string URLPATH = "~/Scripts/plugin/flot";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string jquery_flot_cust_min_js = Url("jquery.flot.cust.min.js");
                public static readonly string jquery_flot_fillbetween_min_js = Url("jquery.flot.fillbetween.min.js");
                public static readonly string jquery_flot_orderBar_min_js = Url("jquery.flot.orderBar.min.js");
                public static readonly string jquery_flot_pie_min_js = Url("jquery.flot.pie.min.js");
                public static readonly string jquery_flot_resize_min_js = Url("jquery.flot.resize.min.js");
                public static readonly string jquery_flot_tooltip_min_js = Url("jquery.flot.tooltip.min.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class flot_new {
                private const string URLPATH = "~/Scripts/plugin/flot-new";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string jquery_flot_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.flot.min.js") ? Url("jquery.flot.min.js") : Url("jquery.flot.js");
                public static readonly string jquery_flot_pie_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.flot.pie.min.js") ? Url("jquery.flot.pie.min.js") : Url("jquery.flot.pie.js");
                public static readonly string jquery_flot_resize_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.flot.resize.min.js") ? Url("jquery.flot.resize.min.js") : Url("jquery.flot.resize.js");
                public static readonly string jquery_flot_stack_min_js = Url("jquery.flot.stack.min.js");
                public static readonly string jquery_flot_time_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.flot.time.min.js") ? Url("jquery.flot.time.min.js") : Url("jquery.flot.time.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class fuelux {
                private const string URLPATH = "~/Scripts/plugin/fuelux";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class wizard {
                    private const string URLPATH = "~/Scripts/plugin/fuelux/wizard";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string wizard_min_js = Url("wizard.min.js");
                }
            
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class fullcalendar {
                private const string URLPATH = "~/Scripts/plugin/fullcalendar";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string jquery_fullcalendar_min_js = Url("jquery.fullcalendar.min.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class ie_placeholder {
                private const string URLPATH = "~/Scripts/plugin/ie-placeholder";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string jquery_placeholder_min_js = Url("jquery.placeholder.min.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class ion_slider {
                private const string URLPATH = "~/Scripts/plugin/ion-slider";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string ion_rangeSlider_min_js = Url("ion.rangeSlider.min.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class jcrop {
                private const string URLPATH = "~/Scripts/plugin/jcrop";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string jquery_color_min_js = Url("jquery.color.min.js");
                public static readonly string jquery_Jcrop_min_js = Url("jquery.Jcrop.min.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class jqgrid {
                private const string URLPATH = "~/Scripts/plugin/jqgrid";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string grid_locale_en_min_js = Url("grid.locale-en.min.js");
                public static readonly string jquery_jqGrid_min_js = Url("jquery.jqGrid.min.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class jquery {
                private const string URLPATH = "~/Scripts/plugin/jquery";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string jquery_1_8_2_intellisense_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-1.8.2.intellisense.min.js") ? Url("jquery-1.8.2.intellisense.min.js") : Url("jquery-1.8.2.intellisense.js");
                public static readonly string jquery_1_8_2_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-1.8.2.min.js") ? Url("jquery-1.8.2.min.js") : Url("jquery-1.8.2.js");
                public static readonly string jquery_1_8_2_min_js = Url("jquery-1.8.2.min.js");
                public static readonly string jquery_ui_1_8_24_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-ui-1.8.24.min.js") ? Url("jquery-ui-1.8.24.min.js") : Url("jquery-ui-1.8.24.js");
                public static readonly string jquery_cookie_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.cookie.min.js") ? Url("jquery.cookie.min.js") : Url("jquery.cookie.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class jquery_form {
                private const string URLPATH = "~/Scripts/plugin/jquery-form";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string jquery_form_min_js = Url("jquery-form.min.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class jquery_nestable {
                private const string URLPATH = "~/Scripts/plugin/jquery-nestable";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string jquery_nestable_min_js = Url("jquery.nestable.min.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class jquery_touch {
                private const string URLPATH = "~/Scripts/plugin/jquery-touch";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string jquery_ui_touch_punch_min_js = Url("jquery.ui.touch-punch.min.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class jquery_validate {
                private const string URLPATH = "~/Scripts/plugin/jquery-validate";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string jquery_unobtrusive_ajax_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.unobtrusive-ajax.min.js") ? Url("jquery.unobtrusive-ajax.min.js") : Url("jquery.unobtrusive-ajax.js");
                public static readonly string jquery_unobtrusive_ajax_min_js = Url("jquery.unobtrusive-ajax.min.js");
                public static readonly string jquery_validate_vsdoc_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate-vsdoc.min.js") ? Url("jquery.validate-vsdoc.min.js") : Url("jquery.validate-vsdoc.js");
                public static readonly string jquery_validate_datepicker_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate.datepicker.min.js") ? Url("jquery.validate.datepicker.min.js") : Url("jquery.validate.datepicker.js");
                public static readonly string jquery_validate_globalize_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate.globalize.min.js") ? Url("jquery.validate.globalize.min.js") : Url("jquery.validate.globalize.js");
                public static readonly string jquery_validate_globalize_min_js = Url("jquery.validate.globalize.min.js");
                public static readonly string jquery_validate_globalize_min_js_map = Url("jquery.validate.globalize.min.js.map");
                public static readonly string jquery_validate_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate.min.js") ? Url("jquery.validate.min.js") : Url("jquery.validate.js");
                public static readonly string jquery_validate_min_js = Url("jquery.validate.min.js");
                public static readonly string jquery_validate_unobtrusive_custom_for_bootstrap_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate.unobtrusive-custom-for-bootstrap.min.js") ? Url("jquery.validate.unobtrusive-custom-for-bootstrap.min.js") : Url("jquery.validate.unobtrusive-custom-for-bootstrap.js");
                public static readonly string jquery_validate_unobtrusive_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate.unobtrusive.min.js") ? Url("jquery.validate.unobtrusive.min.js") : Url("jquery.validate.unobtrusive.js");
                public static readonly string jquery_validate_unobtrusive_min_js = Url("jquery.validate.unobtrusive.min.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class js_migrate {
                private const string URLPATH = "~/Scripts/plugin/js-migrate";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string jquery_migrate_1_2_1_min_js = Url("jquery-migrate-1.2.1.min.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class knob {
                private const string URLPATH = "~/Scripts/plugin/knob";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string jquery_knob_min_js = Url("jquery.knob.min.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class markdown {
                private const string URLPATH = "~/Scripts/plugin/markdown";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string bootstrap_markdown_min_js = Url("bootstrap-markdown.min.js");
                public static readonly string markdown_min_js = Url("markdown.min.js");
                public static readonly string to_markdown_min_js = Url("to-markdown.min.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class masked_input {
                private const string URLPATH = "~/Scripts/plugin/masked-input";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string jquery_maskedinput_min_js = Url("jquery.maskedinput.min.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class maxlength {
                private const string URLPATH = "~/Scripts/plugin/maxlength";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string bootstrap_maxlength_min_js = Url("bootstrap-maxlength.min.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class modernizr {
                private const string URLPATH = "~/Scripts/plugin/modernizr";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string modernizr_2_6_2_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/modernizr-2.6.2.min.js") ? Url("modernizr-2.6.2.min.js") : Url("modernizr-2.6.2.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class morris {
                private const string URLPATH = "~/Scripts/plugin/morris";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string morris_chart_settings_min_js = Url("morris-chart-settings.min.js");
                public static readonly string morris_min_js = Url("morris.min.js");
                public static readonly string raphael_min_js = Url("raphael.min.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class msie_fix {
                private const string URLPATH = "~/Scripts/plugin/msie-fix";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string jquery_mb_browser_min_js = Url("jquery.mb.browser.min.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class multiselect {
                private const string URLPATH = "~/Scripts/plugin/multiselect";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string bootstrap_multiselect_min_js = Url("bootstrap-multiselect.min.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class noUiSlider {
                private const string URLPATH = "~/Scripts/plugin/noUiSlider";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string jquery_nouislider_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.nouislider.min.css") ? Url("jquery.nouislider.min.css") : Url("jquery.nouislider.css");
                     
                public static readonly string jquery_nouislider_min_js = Url("jquery.nouislider.min.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class pace {
                private const string URLPATH = "~/Scripts/plugin/pace";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string pace_min_js = Url("pace.min.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class select2 {
                private const string URLPATH = "~/Scripts/plugin/select2";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string readme_txt = Url("readme.txt");
                public static readonly string select2_min_js = Url("select2.min.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class selectToUISlider {
                private const string URLPATH = "~/Scripts/plugin/selectToUISlider";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string selectToUISlider_jQuery_min_js = Url("selectToUISlider.jQuery.min.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class slimscroll {
                private const string URLPATH = "~/Scripts/plugin/slimscroll";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string jquery_slimscroll_min_js = Url("jquery.slimscroll.min.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class sparkline {
                private const string URLPATH = "~/Scripts/plugin/sparkline";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string jquery_sparkline_min_js = Url("jquery.sparkline.min.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class summernote {
                private const string URLPATH = "~/Scripts/plugin/summernote";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string summernote_min_js = Url("summernote.min.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class superbox {
                private const string URLPATH = "~/Scripts/plugin/superbox";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string superbox_min_js = Url("superbox.min.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class throttle_denounce {
                private const string URLPATH = "~/Scripts/plugin/throttle-denounce";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string jquery_ba_throttle_debounce_min_js = Url("jquery.ba-throttle-debounce.min.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class typeahead {
                private const string URLPATH = "~/Scripts/plugin/typeahead";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string typeahead_min_js = Url("typeahead.min.js");
                public static readonly string typeaheadjs_min_js = Url("typeaheadjs.min.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class vectormap {
                private const string URLPATH = "~/Scripts/plugin/vectormap";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string jquery_jvectormap_1_1_1_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-jvectormap-1.1.1.min.css") ? Url("jquery-jvectormap-1.1.1.min.css") : Url("jquery-jvectormap-1.1.1.css");
                     
                public static readonly string jquery_jvectormap_1_1_1_min_js = Url("jquery-jvectormap-1.1.1.min.js");
                public static readonly string jquery_jvectormap_1_2_2_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-jvectormap-1.2.2.min.css") ? Url("jquery-jvectormap-1.2.2.min.css") : Url("jquery-jvectormap-1.2.2.css");
                     
                public static readonly string jquery_jvectormap_1_2_2_min_js = Url("jquery-jvectormap-1.2.2.min.js");
                public static readonly string jquery_jvectormap_world_mill_en_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-jvectormap-world-mill-en.min.js") ? Url("jquery-jvectormap-world-mill-en.min.js") : Url("jquery-jvectormap-world-mill-en.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class x_editable {
                private const string URLPATH = "~/Scripts/plugin/x-editable";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string jquery_mockjax_min_js = Url("jquery.mockjax.min.js");
                public static readonly string moment_min_js = Url("moment.min.js");
                public static readonly string x_editable_min_js = Url("x-editable.min.js");
            }
        
        }
    
        public static readonly string prettify_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/prettify.min.js") ? Url("prettify.min.js") : Url("prettify.js");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class ProtectedScripts {
            private const string URLPATH = "~/Scripts/ProtectedScripts";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string draw_bar_chart_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/draw-bar-chart.min.js") ? Url("draw-bar-chart.min.js") : Url("draw-bar-chart.js");
            public static readonly string draw_pie_chart_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/draw-pie-chart.min.js") ? Url("draw-pie-chart.min.js") : Url("draw-pie-chart.js");
            public static readonly string draw_stacking_bar_chart_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/draw-stacking-bar-chart.min.js") ? Url("draw-stacking-bar-chart.min.js") : Url("draw-stacking-bar-chart.js");
            public static readonly string vieworder_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/vieworder.min.js") ? Url("vieworder.min.js") : Url("vieworder.js");
            public static readonly string web_business_add_edit_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/web.business-add-edit.min.js") ? Url("web.business-add-edit.min.js") : Url("web.business-add-edit.js");
            public static readonly string web_calendar_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/web.calendar.min.js") ? Url("web.calendar.min.js") : Url("web.calendar.js");
            public static readonly string web_changepassword_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/web.changepassword.min.js") ? Url("web.changepassword.min.js") : Url("web.changepassword.js");
            public static readonly string web_common_add_edit_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/web.common-add-edit.min.js") ? Url("web.common-add-edit.min.js") : Url("web.common-add-edit.js");
            public static readonly string web_common_func_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/web.common-func.min.js") ? Url("web.common-func.min.js") : Url("web.common-func.js");
            public static readonly string web_common_index_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/web.common-index.min.js") ? Url("web.common-index.min.js") : Url("web.common-index.js");
            public static readonly string web_common_set_component_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/web.common-set-component.min.js") ? Url("web.common-set-component.min.js") : Url("web.common-set-component.js");
            public static readonly string web_dashboard_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/web.dashboard.min.js") ? Url("web.dashboard.min.js") : Url("web.dashboard.js");
            public static readonly string web_file_history_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/web.file-history.min.js") ? Url("web.file-history.min.js") : Url("web.file-history.js");
            public static readonly string web_file_upload_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/web.file-upload.min.js") ? Url("web.file-upload.min.js") : Url("web.file-upload.js");
            public static readonly string web_helpdesk_add_edit_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/web.helpdesk-add-edit.min.js") ? Url("web.helpdesk-add-edit.min.js") : Url("web.helpdesk-add-edit.js");
            public static readonly string web_helpdesk_index_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/web.helpdesk-index.min.js") ? Url("web.helpdesk-index.min.js") : Url("web.helpdesk-index.js");
            public static readonly string web_helpdeskticket_add_edit_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/web.helpdeskticket-add-edit.min.js") ? Url("web.helpdeskticket-add-edit.min.js") : Url("web.helpdeskticket-add-edit.js");
            public static readonly string web_navigate_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/web.navigate.min.js") ? Url("web.navigate.min.js") : Url("web.navigate.js");
            public static readonly string web_onlinehelp_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/web.onlinehelp.min.js") ? Url("web.onlinehelp.min.js") : Url("web.onlinehelp.js");
            public static readonly string web_profile_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/web.profile.min.js") ? Url("web.profile.min.js") : Url("web.profile.js");
            public static readonly string web_user_rights_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/web.user-rights.min.js") ? Url("web.user-rights.min.js") : Url("web.user-rights.js");
            public static readonly string web_user_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/web.user.min.js") ? Url("web.user.min.js") : Url("web.user.js");
            public static readonly string web_util_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/web.util.min.js") ? Url("web.util.min.js") : Url("web.util.js");
        }
    
        public static readonly string pwdwidget_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pwdwidget.min.js") ? Url("pwdwidget.min.js") : Url("pwdwidget.js");
        public static readonly string respond_min_js = Url("respond.min.js");
        public static readonly string select2_min_js = Url("select2.min.js");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class smartwidgets {
            private const string URLPATH = "~/Scripts/smartwidgets";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string jarvis_widget_min_js = Url("jarvis.widget.min.js");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class speech {
            private const string URLPATH = "~/Scripts/speech";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string voicecommand_min_js = Url("voicecommand.min.js");
        }
    
        public static readonly string spin_min_js = Url("spin.min.js");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class T4MvcJs {
            private const string URLPATH = "~/Scripts/T4MvcJs";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string T4MVC_source_t4 = Url("T4MVC.source.t4");
            public static readonly string T4MVC_tt_settings_t4 = Url("T4MVC.tt.settings.t4");
            public static readonly string T4MvcJs_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/T4MvcJs.min.js") ? Url("T4MvcJs.min.js") : Url("T4MvcJs.js");
            public static readonly string T4MvcJs_tt = Url("T4MvcJs.tt");
            public static readonly string T4MvcJs1_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/T4MvcJs1.min.js") ? Url("T4MvcJs1.min.js") : Url("T4MvcJs1.js");
        }
    
        public static readonly string typeahead_bs2_min_js = Url("typeahead-bs2.min.js");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class x_editable {
            private const string URLPATH = "~/Scripts/x-editable";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string ace_editable_min_js = Url("ace-editable.min.js");
            public static readonly string bootstrap_editable_min_js = Url("bootstrap-editable.min.js");
        }
    
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Content {
        private const string URLPATH = "~/Content";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class avatars {
            private const string URLPATH = "~/Content/avatars";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string avatar_png = Url("avatar.png");
            public static readonly string avatar1_png = Url("avatar1.png");
            public static readonly string avatar2_png = Url("avatar2.png");
            public static readonly string avatar3_png = Url("avatar3.png");
            public static readonly string avatar4_png = Url("avatar4.png");
            public static readonly string avatar5_png = Url("avatar5.png");
            public static readonly string profile_pic_jpg = Url("profile-pic.jpg");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class bootstrap_4_4_1 {
            private const string URLPATH = "~/Content/bootstrap-4.4.1";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string bootstrap_grid_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-grid.min.css") ? Url("bootstrap-grid.min.css") : Url("bootstrap-grid.css");
                 
            public static readonly string bootstrap_grid_css_map = Url("bootstrap-grid.css.map");
            public static readonly string bootstrap_grid_min_css = Url("bootstrap-grid.min.css");
            public static readonly string bootstrap_grid_min_css_map = Url("bootstrap-grid.min.css.map");
            public static readonly string bootstrap_reboot_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-reboot.min.css") ? Url("bootstrap-reboot.min.css") : Url("bootstrap-reboot.css");
                 
            public static readonly string bootstrap_reboot_css_map = Url("bootstrap-reboot.css.map");
            public static readonly string bootstrap_reboot_min_css = Url("bootstrap-reboot.min.css");
            public static readonly string bootstrap_reboot_min_css_map = Url("bootstrap-reboot.min.css.map");
            public static readonly string bootstrap_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap.min.css") ? Url("bootstrap.min.css") : Url("bootstrap.css");
                 
            public static readonly string bootstrap_css_map = Url("bootstrap.css.map");
            public static readonly string bootstrap_min_css = Url("bootstrap.min.css");
            public static readonly string bootstrap_min_css_map = Url("bootstrap.min.css.map");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class bootstrap_4_5_0 {
            private const string URLPATH = "~/Content/bootstrap-4.5.0";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string bootstrap_grid_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-grid.min.css") ? Url("bootstrap-grid.min.css") : Url("bootstrap-grid.css");
                 
            public static readonly string bootstrap_grid_css_map = Url("bootstrap-grid.css.map");
            public static readonly string bootstrap_grid_min_css = Url("bootstrap-grid.min.css");
            public static readonly string bootstrap_grid_min_css_map = Url("bootstrap-grid.min.css.map");
            public static readonly string bootstrap_reboot_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-reboot.min.css") ? Url("bootstrap-reboot.min.css") : Url("bootstrap-reboot.css");
                 
            public static readonly string bootstrap_reboot_css_map = Url("bootstrap-reboot.css.map");
            public static readonly string bootstrap_reboot_min_css = Url("bootstrap-reboot.min.css");
            public static readonly string bootstrap_reboot_min_css_map = Url("bootstrap-reboot.min.css.map");
            public static readonly string bootstrap_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap.min.css") ? Url("bootstrap.min.css") : Url("bootstrap.css");
                 
            public static readonly string bootstrap_css_map = Url("bootstrap.css.map");
            public static readonly string bootstrap_min_css = Url("bootstrap.min.css");
            public static readonly string bootstrap_min_css_map = Url("bootstrap.min.css.map");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class css {
            private const string URLPATH = "~/Content/css";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string bootstrap_duallistbox_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-duallistbox.min.css") ? Url("bootstrap-duallistbox.min.css") : Url("bootstrap-duallistbox.css");
                 
            public static readonly string bootstrap_responsive_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-responsive.min.css") ? Url("bootstrap-responsive.min.css") : Url("bootstrap-responsive.css");
                 
            public static readonly string bootstrap_switch_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-switch.min.css") ? Url("bootstrap-switch.min.css") : Url("bootstrap-switch.css");
                 
            public static readonly string bootstrap_timepicker_min_css = Url("bootstrap-timepicker.min.css");
            public static readonly string bootstrap_min_css = Url("bootstrap.min.css");
            public static readonly string demo_min_css = Url("demo.min.css");
            public static readonly string font_awesome_min_css = Url("font-awesome.min.css");
            public static readonly string invoice_min_css = Url("invoice.min.css");
            public static readonly string jquery_ui_multidatespicker_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-ui.multidatespicker.min.css") ? Url("jquery-ui.multidatespicker.min.css") : Url("jquery-ui.multidatespicker.css");
                 
            public static readonly string lockscreen_min_css = Url("lockscreen.min.css");
            public static readonly string smartadmin_production_plugins_min_css = Url("smartadmin-production-plugins.min.css");
            public static readonly string smartadmin_production_min_css = Url("smartadmin-production.min.css");
            public static readonly string smartadmin_rtl_min_css = Url("smartadmin-rtl.min.css");
            public static readonly string smartadmin_skins_min_css = Url("smartadmin-skins.min.css");
            public static readonly string your_style_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/your_style.min.css") ? Url("your_style.min.css") : Url("your_style.css");
                 
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class dataTables {
            private const string URLPATH = "~/Content/dataTables";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string buttons_bootstrap_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/buttons.bootstrap.min.css") ? Url("buttons.bootstrap.min.css") : Url("buttons.bootstrap.css");
                 
            public static readonly string buttons_bootstrap4_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/buttons.bootstrap4.min.css") ? Url("buttons.bootstrap4.min.css") : Url("buttons.bootstrap4.css");
                 
            public static readonly string buttons_dataTables_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/buttons.dataTables.min.css") ? Url("buttons.dataTables.min.css") : Url("buttons.dataTables.css");
                 
            public static readonly string buttons_foundation_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/buttons.foundation.min.css") ? Url("buttons.foundation.min.css") : Url("buttons.foundation.css");
                 
            public static readonly string colReorder_bootstrap_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/colReorder.bootstrap.min.css") ? Url("colReorder.bootstrap.min.css") : Url("colReorder.bootstrap.css");
                 
            public static readonly string colReorder_bootstrap4_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/colReorder.bootstrap4.min.css") ? Url("colReorder.bootstrap4.min.css") : Url("colReorder.bootstrap4.css");
                 
            public static readonly string colReorder_dataTables_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/colReorder.dataTables.min.css") ? Url("colReorder.dataTables.min.css") : Url("colReorder.dataTables.css");
                 
            public static readonly string colReorder_foundation_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/colReorder.foundation.min.css") ? Url("colReorder.foundation.min.css") : Url("colReorder.foundation.css");
                 
            public static readonly string dataTables_bootstrap_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dataTables.bootstrap.min.css") ? Url("dataTables.bootstrap.min.css") : Url("dataTables.bootstrap.css");
                 
            public static readonly string dataTables_bootstrap4_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dataTables.bootstrap4.min.css") ? Url("dataTables.bootstrap4.min.css") : Url("dataTables.bootstrap4.css");
                 
            public static readonly string dataTables_foundation_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dataTables.foundation.min.css") ? Url("dataTables.foundation.min.css") : Url("dataTables.foundation.css");
                 
            public static readonly string jquery_dataTables_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.dataTables.min.css") ? Url("jquery.dataTables.min.css") : Url("jquery.dataTables.css");
                 
            public static readonly string responsive_bootstrap_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/responsive.bootstrap.min.css") ? Url("responsive.bootstrap.min.css") : Url("responsive.bootstrap.css");
                 
            public static readonly string responsive_bootstrap4_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/responsive.bootstrap4.min.css") ? Url("responsive.bootstrap4.min.css") : Url("responsive.bootstrap4.css");
                 
            public static readonly string responsive_dataTables_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/responsive.dataTables.min.css") ? Url("responsive.dataTables.min.css") : Url("responsive.dataTables.css");
                 
            public static readonly string responsive_foundation_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/responsive.foundation.min.css") ? Url("responsive.foundation.min.css") : Url("responsive.foundation.css");
                 
            public static readonly string searchPanes_bootstrap_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/searchPanes.bootstrap.min.css") ? Url("searchPanes.bootstrap.min.css") : Url("searchPanes.bootstrap.css");
                 
            public static readonly string searchPanes_bootstrap4_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/searchPanes.bootstrap4.min.css") ? Url("searchPanes.bootstrap4.min.css") : Url("searchPanes.bootstrap4.css");
                 
            public static readonly string searchPanes_dataTables_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/searchPanes.dataTables.min.css") ? Url("searchPanes.dataTables.min.css") : Url("searchPanes.dataTables.css");
                 
            public static readonly string searchPanes_foundation_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/searchPanes.foundation.min.css") ? Url("searchPanes.foundation.min.css") : Url("searchPanes.foundation.css");
                 
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class fonts {
            private const string URLPATH = "~/Content/fonts";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string fontawesome_webfont_eot = Url("fontawesome-webfont.eot");
            public static readonly string fontawesome_webfont_svg = Url("fontawesome-webfont.svg");
            public static readonly string fontawesome_webfont_ttf = Url("fontawesome-webfont.ttf");
            public static readonly string fontawesome_webfont_woff = Url("fontawesome-webfont.woff");
            public static readonly string FontAwesome_otf = Url("FontAwesome.otf");
            public static readonly string glyphicons_halflings_regular_eot = Url("glyphicons-halflings-regular.eot");
            public static readonly string glyphicons_halflings_regular_svg = Url("glyphicons-halflings-regular.svg");
            public static readonly string glyphicons_halflings_regular_ttf = Url("glyphicons-halflings-regular.ttf");
            public static readonly string glyphicons_halflings_regular_woff = Url("glyphicons-halflings-regular.woff");
            public static readonly string RobotoMono_Regular_ttf = Url("RobotoMono-Regular.ttf");
        }
    
        public static readonly string fullcalendar_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fullcalendar.min.css") ? Url("fullcalendar.min.css") : Url("fullcalendar.css");
             
        public static readonly string fullcalendar_min_css = Url("fullcalendar.min.css");
        public static readonly string fullcalendar_print_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fullcalendar.print.min.css") ? Url("fullcalendar.print.min.css") : Url("fullcalendar.print.css");
             
        public static readonly string fullcalendar_print_min_css = Url("fullcalendar.print.min.css");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class images {
            private const string URLPATH = "~/Content/images";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string back_disabled_png = Url("back_disabled.png");
            public static readonly string back_enabled_png = Url("back_enabled.png");
            public static readonly string back_enabled_hover_png = Url("back_enabled_hover.png");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class flags {
                private const string URLPATH = "~/Content/images/flags";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string blank_gif = Url("blank.gif");
                public static readonly string de_png = Url("de.png");
                public static readonly string es_png = Url("es.png");
                public static readonly string flags_png = Url("flags.png");
                public static readonly string us_png = Url("us.png");
            }
        
            public static readonly string forward_disabled_png = Url("forward_disabled.png");
            public static readonly string forward_enabled_png = Url("forward_enabled.png");
            public static readonly string forward_enabled_hover_png = Url("forward_enabled_hover.png");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class gallery {
                private const string URLPATH = "~/Content/images/gallery";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            }
        
            public static readonly string sort_asc_png = Url("sort_asc.png");
            public static readonly string sort_asc_disabled_png = Url("sort_asc_disabled.png");
            public static readonly string sort_both_png = Url("sort_both.png");
            public static readonly string sort_desc_png = Url("sort_desc.png");
            public static readonly string sort_desc_disabled_png = Url("sort_desc_disabled.png");
            public static readonly string spritemap_png = Url("spritemap.png");
            public static readonly string spritemap_2x_png = Url("spritemap@2x.png");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class img {
            private const string URLPATH = "~/Content/img";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string ajax_loader_gif = Url("ajax-loader.gif");
            public static readonly string alpha_png = Url("alpha.png");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class avatars {
                private const string URLPATH = "~/Content/img/avatars";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string _1_png = Url("1.png");
                public static readonly string _2_png = Url("2.png");
                public static readonly string _3_png = Url("3.png");
                public static readonly string _4_png = Url("4.png");
                public static readonly string _5_png = Url("5.png");
                public static readonly string copyright_txt = Url("copyright.txt");
                public static readonly string female_png = Url("female.png");
                public static readonly string index_php = Url("index.php");
                public static readonly string male_png = Url("male.png");
                public static readonly string sunny_big_png = Url("sunny-big.png");
                public static readonly string sunny_png = Url("sunny.png");
            }
        
            public static readonly string blank_gif = Url("blank.gif");
            public static readonly string clear_png = Url("clear.png");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class demo {
                private const string URLPATH = "~/Content/img/demo";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string _64x64_png = Url("64x64.png");
                public static readonly string basic_png = Url("basic.png");
                public static readonly string copyright_txt = Url("copyright.txt");
                public static readonly string demo_smartbig_alert_png = Url("demo-smartbig-alert.png");
                public static readonly string demo_smartmedium_alert_png = Url("demo-smartmedium-alert.png");
                public static readonly string demo_smartsmall_alert_png = Url("demo-smartsmall-alert.png");
                public static readonly string hero_png = Url("hero.png");
                public static readonly string image_placeholder_64x64_png = Url("image-placeholder-64x64.png");
                public static readonly string index_php = Url("index.php");
                public static readonly string iphoneview_png = Url("iphoneview.png");
                public static readonly string m1_jpg = Url("m1.jpg");
                public static readonly string m2_jpg = Url("m2.jpg");
                public static readonly string m3_jpg = Url("m3.jpg");
                public static readonly string newsletter_png = Url("newsletter.png");
                public static readonly string responseimg_png = Url("responseimg.png");
                public static readonly string s1_jpg = Url("s1.jpg");
                public static readonly string s2_jpg = Url("s2.jpg");
                public static readonly string s3_jpg = Url("s3.jpg");
                public static readonly string sa_demo_png = Url("sa-demo.png");
                public static readonly string sample_jpg = Url("sample.jpg");
                public static readonly string sidebar_png = Url("sidebar.png");
                public static readonly string sidebarhero_png = Url("sidebarhero.png");
                public static readonly string site_1_jpg = Url("site-1.jpg");
                public static readonly string site_2_jpg = Url("site-2.jpg");
                public static readonly string widget_colorpicker_png = Url("widget-colorpicker.png");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class dropzone {
                private const string URLPATH = "~/Content/img/dropzone";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string index_php = Url("index.php");
                public static readonly string spritemap_png = Url("spritemap.png");
                public static readonly string spritemap_2x_png = Url("spritemap@2x.png");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class favicon {
                private const string URLPATH = "~/Content/img/favicon";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string _1favicon_ico = Url("1favicon.ico");
                public static readonly string favicon_ico = Url("favicon.ico");
                public static readonly string favicon_png = Url("favicon.png");
                public static readonly string index_php = Url("index.php");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class flags {
                private const string URLPATH = "~/Content/img/flags";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string de_png = Url("de.png");
                public static readonly string es_png = Url("es.png");
                public static readonly string flags_png = Url("flags.png");
                public static readonly string us_png = Url("us.png");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class gradient {
                private const string URLPATH = "~/Content/img/gradient";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string index_php = Url("index.php");
                public static readonly string login_png = Url("login.png");
            }
        
            public static readonly string hue_png = Url("hue.png");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class invoice {
                private const string URLPATH = "~/Content/img/invoice";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string americanexpress_png = Url("americanexpress.png");
                public static readonly string index_php = Url("index.php");
                public static readonly string license_txt = Url("license.txt");
                public static readonly string mastercard_png = Url("mastercard.png");
                public static readonly string paypal_png = Url("paypal.png");
                public static readonly string visa_png = Url("visa.png");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class jcrop {
                private const string URLPATH = "~/Content/img/jcrop";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string Jcrop_gif = Url("Jcrop.gif");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class jqueryui {
                private const string URLPATH = "~/Content/img/jqueryui";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string index_php = Url("index.php");
                public static readonly string ui_bg_flat_0_999999_40x100_png = Url("ui-bg_flat_0_999999_40x100.png");
                public static readonly string ui_bg_flat_0_aaaaaa_40x100_png = Url("ui-bg_flat_0_aaaaaa_40x100.png");
                public static readonly string ui_bg_glass_55_fbf9ee_1x400_png = Url("ui-bg_glass_55_fbf9ee_1x400.png");
                public static readonly string ui_bg_glass_65_ffffff_1x400_png = Url("ui-bg_glass_65_ffffff_1x400.png");
                public static readonly string ui_bg_glass_75_dadada_1x400_png = Url("ui-bg_glass_75_dadada_1x400.png");
                public static readonly string ui_bg_glass_75_e6e6e6_1x400_png = Url("ui-bg_glass_75_e6e6e6_1x400.png");
                public static readonly string ui_bg_glass_75_ffffff_1x400_png = Url("ui-bg_glass_75_ffffff_1x400.png");
                public static readonly string ui_bg_highlight_soft_75_cccccc_1x100_png = Url("ui-bg_highlight-soft_75_cccccc_1x100.png");
                public static readonly string ui_bg_inset_soft_95_fef1ec_1x100_png = Url("ui-bg_inset-soft_95_fef1ec_1x100.png");
                public static readonly string ui_icons_222222_256x240_png = Url("ui-icons_222222_256x240.png");
                public static readonly string ui_icons_2e83ff_256x240_png = Url("ui-icons_2e83ff_256x240.png");
                public static readonly string ui_icons_428bca_256x240_png = Url("ui-icons_428bca_256x240.png");
                public static readonly string ui_icons_454545_256x240_png = Url("ui-icons_454545_256x240.png");
                public static readonly string ui_icons_555555_256x240_png = Url("ui-icons_555555_256x240.png");
                public static readonly string ui_icons_888888_256x240_png = Url("ui-icons_888888_256x240.png");
                public static readonly string ui_icons_999999_256x240_png = Url("ui-icons_999999_256x240.png");
                public static readonly string ui_icons_cd0a0a_256x240_png = Url("ui-icons_cd0a0a_256x240.png");
                public static readonly string ui_icons_f0ad4e_256x240_png = Url("ui-icons_f0ad4e_256x240.png");
                public static readonly string ui_icons_f6cf3b_256x240_png = Url("ui-icons_f6cf3b_256x240.png");
                public static readonly string ui_icons_ffffff_256x240_png = Url("ui-icons_ffffff_256x240.png");
            }
        
            public static readonly string loading_gif = Url("loading.gif");
            public static readonly string logo_blacknwhite_png = Url("logo-blacknwhite.png");
            public static readonly string logo_blue_png = Url("logo-blue.png");
            public static readonly string logo_o_png = Url("logo-o.png");
            public static readonly string logo_pale_png = Url("logo-pale.png");
            public static readonly string logo_white_png = Url("logo-white.png");
            public static readonly string logo_png = Url("logo.png");
            public static readonly string logo1_png = Url("logo1.png");
            public static readonly string mappin_default_png = Url("mappin-default.png");
            public static readonly string minus_png = Url("minus.png");
            public static readonly string mybg_png = Url("mybg.png");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class pattern {
                private const string URLPATH = "~/Content/img/pattern";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string divider_jpg = Url("divider.jpg");
                public static readonly string graphy_xs_png = Url("graphy-xs.png");
                public static readonly string graphy_png = Url("graphy.png");
                public static readonly string index_php = Url("index.php");
                public static readonly string license_info_txt = Url("license-info.txt");
                public static readonly string lightpaperfibers_png = Url("lightpaperfibers.png");
                public static readonly string movable_png = Url("movable.png");
                public static readonly string nistri_xs_png = Url("nistri-xs.png");
                public static readonly string nistri_png = Url("nistri.png");
                public static readonly string overlay_pattern_png = Url("overlay-pattern.png");
                public static readonly string paper_xs_png = Url("paper-xs.png");
                public static readonly string paper_png = Url("paper.png");
                public static readonly string pattern_png = Url("pattern.png");
                public static readonly string sneaker_mesh_fabric_xs_png = Url("sneaker_mesh_fabric-xs.png");
                public static readonly string sneaker_mesh_fabric_png = Url("sneaker_mesh_fabric.png");
                public static readonly string tileable_wood_texture_xs_png = Url("tileable_wood_texture-xs.png");
                public static readonly string tileable_wood_texture_png = Url("tileable_wood_texture.png");
            }
        
            public static readonly string plus_png = Url("plus.png");
            public static readonly string ribbon_png = Url("ribbon.png");
            public static readonly string sa_dark_png = Url("sa-dark.png");
            public static readonly string sa_default_png = Url("sa-default.png");
            public static readonly string saturation_png = Url("saturation.png");
            public static readonly string select2_spinner_gif = Url("select2-spinner.gif");
            public static readonly string smartasset_png = Url("smartasset.png");
            public static readonly string sort_asc_png = Url("sort_asc.png");
            public static readonly string sort_asc_disabled_png = Url("sort_asc_disabled.png");
            public static readonly string sort_both_png = Url("sort_both.png");
            public static readonly string sort_desc_png = Url("sort_desc.png");
            public static readonly string sort_desc_disabled_png = Url("sort_desc_disabled.png");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class splash {
                private const string URLPATH = "~/Content/img/splash";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string ipad_landscape_png = Url("ipad-landscape.png");
                public static readonly string ipad_portrait_png = Url("ipad-portrait.png");
                public static readonly string iphone_png = Url("iphone.png");
                public static readonly string sptouch_icon_iphone_png = Url("sptouch-icon-iphone.png");
                public static readonly string touch_icon_ipad_retina_png = Url("touch-icon-ipad-retina.png");
                public static readonly string touch_icon_ipad_png = Url("touch-icon-ipad.png");
                public static readonly string touch_icon_iphone_retina_png = Url("touch-icon-iphone-retina.png");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class superbox {
                private const string URLPATH = "~/Content/img/superbox";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string index_php = Url("index.php");
                public static readonly string superbox_full_1_jpg = Url("superbox-full-1.jpg");
                public static readonly string superbox_full_10_jpg = Url("superbox-full-10.jpg");
                public static readonly string superbox_full_11_jpg = Url("superbox-full-11.jpg");
                public static readonly string superbox_full_12_jpg = Url("superbox-full-12.jpg");
                public static readonly string superbox_full_13_jpg = Url("superbox-full-13.jpg");
                public static readonly string superbox_full_14_jpg = Url("superbox-full-14.jpg");
                public static readonly string superbox_full_15_jpg = Url("superbox-full-15.jpg");
                public static readonly string superbox_full_16_jpg = Url("superbox-full-16.jpg");
                public static readonly string superbox_full_17_jpg = Url("superbox-full-17.jpg");
                public static readonly string superbox_full_18_jpg = Url("superbox-full-18.jpg");
                public static readonly string superbox_full_19_jpg = Url("superbox-full-19.jpg");
                public static readonly string superbox_full_2_jpg = Url("superbox-full-2.jpg");
                public static readonly string superbox_full_20_bw_jpg = Url("superbox-full-20-bw.jpg");
                public static readonly string superbox_full_20_jpg = Url("superbox-full-20.jpg");
                public static readonly string superbox_full_21_jpg = Url("superbox-full-21.jpg");
                public static readonly string superbox_full_22_jpg = Url("superbox-full-22.jpg");
                public static readonly string superbox_full_23_jpg = Url("superbox-full-23.jpg");
                public static readonly string superbox_full_24_jpg = Url("superbox-full-24.jpg");
                public static readonly string superbox_full_3_jpg = Url("superbox-full-3.jpg");
                public static readonly string superbox_full_4_jpg = Url("superbox-full-4.jpg");
                public static readonly string superbox_full_5_jpg = Url("superbox-full-5.jpg");
                public static readonly string superbox_full_6_jpg = Url("superbox-full-6.jpg");
                public static readonly string superbox_full_7_jpg = Url("superbox-full-7.jpg");
                public static readonly string superbox_full_8_jpg = Url("superbox-full-8.jpg");
                public static readonly string superbox_full_9_jpg = Url("superbox-full-9.jpg");
                public static readonly string superbox_thumb_1_jpg = Url("superbox-thumb-1.jpg");
                public static readonly string superbox_thumb_10_jpg = Url("superbox-thumb-10.jpg");
                public static readonly string superbox_thumb_11_jpg = Url("superbox-thumb-11.jpg");
                public static readonly string superbox_thumb_12_jpg = Url("superbox-thumb-12.jpg");
                public static readonly string superbox_thumb_13_jpg = Url("superbox-thumb-13.jpg");
                public static readonly string superbox_thumb_14_jpg = Url("superbox-thumb-14.jpg");
                public static readonly string superbox_thumb_15_jpg = Url("superbox-thumb-15.jpg");
                public static readonly string superbox_thumb_16_jpg = Url("superbox-thumb-16.jpg");
                public static readonly string superbox_thumb_17_jpg = Url("superbox-thumb-17.jpg");
                public static readonly string superbox_thumb_18_jpg = Url("superbox-thumb-18.jpg");
                public static readonly string superbox_thumb_19_jpg = Url("superbox-thumb-19.jpg");
                public static readonly string superbox_thumb_2_jpg = Url("superbox-thumb-2.jpg");
                public static readonly string superbox_thumb_20_jpg = Url("superbox-thumb-20.jpg");
                public static readonly string superbox_thumb_21_jpg = Url("superbox-thumb-21.jpg");
                public static readonly string superbox_thumb_22_jpg = Url("superbox-thumb-22.jpg");
                public static readonly string superbox_thumb_23_jpg = Url("superbox-thumb-23.jpg");
                public static readonly string superbox_thumb_24_jpg = Url("superbox-thumb-24.jpg");
                public static readonly string superbox_thumb_3_jpg = Url("superbox-thumb-3.jpg");
                public static readonly string superbox_thumb_4_jpg = Url("superbox-thumb-4.jpg");
                public static readonly string superbox_thumb_5_jpg = Url("superbox-thumb-5.jpg");
                public static readonly string superbox_thumb_6_jpg = Url("superbox-thumb-6.jpg");
                public static readonly string superbox_thumb_7_jpg = Url("superbox-thumb-7.jpg");
                public static readonly string superbox_thumb_8_jpg = Url("superbox-thumb-8.jpg");
                public static readonly string superbox_thumb_9_jpg = Url("superbox-thumb-9.jpg");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class versions {
                private const string URLPATH = "~/Content/img/versions";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string ajaxversion_png = Url("ajaxversion.png");
                public static readonly string angularversion_png = Url("angularversion.png");
                public static readonly string htmlversion_png = Url("htmlversion.png");
                public static readonly string phpversion_png = Url("phpversion.png");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class voicecommand {
                private const string URLPATH = "~/Content/img/voicecommand";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string active_btn_gif = Url("active-btn.gif");
            }
        
            public static readonly string vt_menu_png = Url("vt-menu.png");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class Login {
            private const string URLPATH = "~/Content/Login";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string ClosingImg_jpg = Url("ClosingImg.jpg");
            public static readonly string CurrentRFQImg_jpg = Url("CurrentRFQImg.jpg");
            public static readonly string image_slider_2au_png = Url("image-slider-2au.png");
            public static readonly string image_slider_2s_png = Url("image-slider-2s.png");
            public static readonly string image_slider_2tr_png = Url("image-slider-2tr.png");
            public static readonly string image_slider_5a_png = Url("image-slider-5a.png");
            public static readonly string ImgClosingRFQ_jpg = Url("ImgClosingRFQ.jpg");
            public static readonly string ImgCurrentRFQ_jpg = Url("ImgCurrentRFQ.jpg");
            public static readonly string ImgNewRFQ_jpg = Url("ImgNewRFQ.jpg");
            public static readonly string login_slide_1_png = Url("login-slide-1.png");
            public static readonly string Loginbackground_png = Url("Loginbackground.png");
            public static readonly string LoginSliderImage1_png = Url("LoginSliderImage1.png");
            public static readonly string LoginSliderImage2_png = Url("LoginSliderImage2.png");
            public static readonly string logo_png = Url("logo.png");
            public static readonly string LogoTitle_png = Url("LogoTitle.png");
            public static readonly string LogoTitle1_png = Url("LogoTitle1.png");
            public static readonly string NewRFQImg_jpg = Url("NewRFQImg.jpg");
            public static readonly string RFQBackground_png = Url("RFQBackground.png");
            public static readonly string SligerLogo_png = Url("SligerLogo.png");
            public static readonly string SmartAsset3_png = Url("SmartAsset3.png");
            public static readonly string SmartAssetLogo1_png = Url("SmartAssetLogo1.png");
            public static readonly string utw_png = Url("utw.png");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class Templates {
            private const string URLPATH = "~/Content/Templates";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string Order_docx = Url("Order.docx");
            public static readonly string PFI_docx = Url("PFI.docx");
            public static readonly string Receipt_docx = Url("Receipt.docx");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class themes {
            private const string URLPATH = "~/Content/themes";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class @base {
                private const string URLPATH = "~/Content/themes/base";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string accordion_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/accordion.min.css") ? Url("accordion.min.css") : Url("accordion.css");
                     
                public static readonly string all_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/all.min.css") ? Url("all.min.css") : Url("all.css");
                     
                public static readonly string autocomplete_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/autocomplete.min.css") ? Url("autocomplete.min.css") : Url("autocomplete.css");
                     
                public static readonly string base_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/base.min.css") ? Url("base.min.css") : Url("base.css");
                     
                public static readonly string button_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/button.min.css") ? Url("button.min.css") : Url("button.css");
                     
                public static readonly string core_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/core.min.css") ? Url("core.min.css") : Url("core.css");
                     
                public static readonly string datepicker_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/datepicker.min.css") ? Url("datepicker.min.css") : Url("datepicker.css");
                     
                public static readonly string dialog_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dialog.min.css") ? Url("dialog.min.css") : Url("dialog.css");
                     
                public static readonly string draggable_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/draggable.min.css") ? Url("draggable.min.css") : Url("draggable.css");
                     
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class images {
                    private const string URLPATH = "~/Content/themes/base/images";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string ui_bg_flat_0_aaaaaa_40x100_png = Url("ui-bg_flat_0_aaaaaa_40x100.png");
                    public static readonly string ui_bg_flat_75_ffffff_40x100_png = Url("ui-bg_flat_75_ffffff_40x100.png");
                    public static readonly string ui_bg_glass_55_fbf9ee_1x400_png = Url("ui-bg_glass_55_fbf9ee_1x400.png");
                    public static readonly string ui_bg_glass_65_ffffff_1x400_png = Url("ui-bg_glass_65_ffffff_1x400.png");
                    public static readonly string ui_bg_glass_75_dadada_1x400_png = Url("ui-bg_glass_75_dadada_1x400.png");
                    public static readonly string ui_bg_glass_75_e6e6e6_1x400_png = Url("ui-bg_glass_75_e6e6e6_1x400.png");
                    public static readonly string ui_bg_glass_95_fef1ec_1x400_png = Url("ui-bg_glass_95_fef1ec_1x400.png");
                    public static readonly string ui_bg_highlight_soft_75_cccccc_1x100_png = Url("ui-bg_highlight-soft_75_cccccc_1x100.png");
                    public static readonly string ui_icons_222222_256x240_png = Url("ui-icons_222222_256x240.png");
                    public static readonly string ui_icons_2e83ff_256x240_png = Url("ui-icons_2e83ff_256x240.png");
                    public static readonly string ui_icons_444444_256x240_png = Url("ui-icons_444444_256x240.png");
                    public static readonly string ui_icons_454545_256x240_png = Url("ui-icons_454545_256x240.png");
                    public static readonly string ui_icons_555555_256x240_png = Url("ui-icons_555555_256x240.png");
                    public static readonly string ui_icons_777620_256x240_png = Url("ui-icons_777620_256x240.png");
                    public static readonly string ui_icons_777777_256x240_png = Url("ui-icons_777777_256x240.png");
                    public static readonly string ui_icons_888888_256x240_png = Url("ui-icons_888888_256x240.png");
                    public static readonly string ui_icons_cc0000_256x240_png = Url("ui-icons_cc0000_256x240.png");
                    public static readonly string ui_icons_cd0a0a_256x240_png = Url("ui-icons_cd0a0a_256x240.png");
                    public static readonly string ui_icons_ffffff_256x240_png = Url("ui-icons_ffffff_256x240.png");
                }
            
                public static readonly string jquery_ui_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-ui.min.css") ? Url("jquery-ui.min.css") : Url("jquery-ui.css");
                     
                public static readonly string jquery_ui_min_css = Url("jquery-ui.min.css");
                public static readonly string menu_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/menu.min.css") ? Url("menu.min.css") : Url("menu.css");
                     
                public static readonly string progressbar_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/progressbar.min.css") ? Url("progressbar.min.css") : Url("progressbar.css");
                     
                public static readonly string resizable_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/resizable.min.css") ? Url("resizable.min.css") : Url("resizable.css");
                     
                public static readonly string selectable_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/selectable.min.css") ? Url("selectable.min.css") : Url("selectable.css");
                     
                public static readonly string selectmenu_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/selectmenu.min.css") ? Url("selectmenu.min.css") : Url("selectmenu.css");
                     
                public static readonly string slider_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/slider.min.css") ? Url("slider.min.css") : Url("slider.css");
                     
                public static readonly string sortable_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sortable.min.css") ? Url("sortable.min.css") : Url("sortable.css");
                     
                public static readonly string spinner_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/spinner.min.css") ? Url("spinner.min.css") : Url("spinner.css");
                     
                public static readonly string tabs_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/tabs.min.css") ? Url("tabs.min.css") : Url("tabs.css");
                     
                public static readonly string theme_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/theme.min.css") ? Url("theme.min.css") : Url("theme.css");
                     
                public static readonly string tooltip_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/tooltip.min.css") ? Url("tooltip.min.css") : Url("tooltip.css");
                     
            }
        
        }
    
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static partial class Bundles
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static partial class Scripts {}
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static partial class Styles {}
    }
}

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal static class T4MVCHelpers {
    // You can change the ProcessVirtualPath method to modify the path that gets returned to the client.
    // e.g. you can prepend a domain, or append a query string:
    //      return "http://localhost" + path + "?foo=bar";
    private static string ProcessVirtualPathDefault(string virtualPath) {
        // The path that comes in starts with ~/ and must first be made absolute
        string path = VirtualPathUtility.ToAbsolute(virtualPath);
        
        // Add your own modifications here before returning the path
        return path;
    }

    // Calling ProcessVirtualPath through delegate to allow it to be replaced for unit testing
    public static Func<string, string> ProcessVirtualPath = ProcessVirtualPathDefault;

    // Calling T4Extension.TimestampString through delegate to allow it to be replaced for unit testing and other purposes
    public static Func<string, string> TimestampString = System.Web.Mvc.T4Extensions.TimestampString;

    // Logic to determine if the app is running in production or dev environment
    public static bool IsProduction() { 
        return (HttpContext.Current != null && !HttpContext.Current.IsDebuggingEnabled); 
    }
}





#endregion T4MVC
#pragma warning restore 1591


