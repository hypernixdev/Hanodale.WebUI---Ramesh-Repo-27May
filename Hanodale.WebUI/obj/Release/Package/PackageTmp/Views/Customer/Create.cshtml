@model Hanodale.WebUI.Models.CustomerModel
@using Hanodale.Utility.Globalize
@using Hanodale.WebUI
@using System.Web.Optimization
@{
    ViewBag.Title = "Create";
    Layout = null;
}

<!-- Hidden Variable -->
<input type="hidden" id="MSG_CONFIRM_SAVE" value="@Html.GetGlobalResource("MSG_CONFIRM_SAVE")">
<input type="hidden" id="MSG_CONFIRM_UPDATE" value="@Html.GetGlobalResource("MSG_CONFIRM_UPDATE")">
@*<input type="hidden" id="form-congif" value="customer" data-readOnly="@Model.readOnly">*@
<input type="hidden" id="form-congif" value="customer" data-readOnly="">

<!-- Hidden Variable -->

<div class="widget-body">
</div>

<div id="content" style="opacity: 1; border: none">

    @*
        <div class="row-flex">
            <div class="col-xs-12 col-sm-7 col-md-7 col-lg-4">
                <h1 class="page-title txt-color-blueDark">
                    <i class="fa fa-edit fa-fw "></i>

                    @if (Model.isEdit && !Model.readOnly)
                    {
                        @Html.GetGlobalResource("PAGE_HEADER_EDIT_CUSTOMER")
                    }
                    else if (!Model.isEdit && !Model.readOnly)
                    {
                        @Html.GetGlobalResource("PAGE_HEADER_CREATE_CUSTOMER")
                    }
                    else if (Model.readOnly)
                    {
                        @Html.GetGlobalResource("PAGE_HEADER_VIEW_CUSTOMER")
                    }
                </h1>
            </div>
        </div>
    *@


    <div class="formSpliter"></div>
    <!-- widget grid -->
    <section id="widget-grid" class="">

        <div class="row">
            <div id="message" class="alert alert-success" style="display: none"></div>
            @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "validation-form", @class = "form-horizontal" }))
            {@Html.AntiForgeryToken()
            @Html.ValidationSummary(true)
            @Html.HiddenFor(model => model.id)

            @Html.HiddenFor(model => model.code, new { id = "customId", name = "customName" })

            <article class="col-sm-12 col-md-12 col-lg-12 sortable-grid ui-sortable">

                <!-- Widget ID (each widget will need unique ID)-->
                <!-- end widget -->

                <div class="jarviswidget jarviswidget-sortable" id="wid-id-1" data-widget-colorbutton="false" data-widget-editbutton="false" data-widget-custombutton="false" style="" role="widget">

                    <header role="heading">
                        <div class="jarviswidget-ctrls" role="menu"><a href="javascript:void(0);" class="button-icon jarviswidget-fullscreen-btn" rel="tooltip" title="" data-placement="bottom" data-original-title="Fullscreen"><i class="fa fa-expand "></i></a></div>

                        <span class="widget-icon"><i class="fa fa-edit"></i></span>
                        <h2>@Html.GetGlobalResource("CUSTOMER_INFO")</h2>
                        <span class="jarviswidget-loader"><i class="fa fa-refresh fa-spin"></i></span>
                    </header>

                    <!-- widget div-->
                    <div role="content">

                        <!-- widget edit box -->
                        <div class="jarviswidget-editbox">
                            <!-- This area used as dropdown edit box -->

                        </div>
                        <!-- end widget edit box -->
                        <!-- widget content -->
                        <div class="widget-body no-padding">


                            <fieldset>
                                <div class="smart-form">
                                    @if (Model.code_Metadata.visibilityInCreate)
                                    {
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.code, new { @class = "col-xs-12 col-sm-3 col-md-3 col-lg-2 control-label", })

                                            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-5">
                                                <div class="clearfix">
                                                    <label class="input">
                                                        <i class="icon-append fa fa-pencil"></i>
                                                        @Html.EditorFor(model => model.code, new { @readonly = "readonly", @class = "form-control" + Model.code_Metadata.mandatoryClass, @placeholder = @Html.DisplayNameFor(m => m.code) })
                                                        @Html.ValidationMessageFor(m => m.code)
                                                    </label>
                                                </div>
                                            </div>
                                        </div>
                                    }

                                    @if (Model.custID_Metadata.visibilityInCreate)
                                    {
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.custID, new { @class = "col-xs-12 col-sm-3 col-md-3 col-lg-2 control-label", })

                                            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-5">
                                                <div class="clearfix">
                                                    <label class="input">
                                                        <i class="icon-append fa fa-pencil"></i>
                                                        @Html.EditorFor(model => model.custID, new { @readonly = "readonly", @class = "form-control" + Model.custID_Metadata.mandatoryClass, @placeholder = @Html.DisplayNameFor(m => m.custID) })
                                                        @Html.ValidationMessageFor(m => m.custID)
                                                    </label>
                                                </div>
                                            </div>
                                        </div>
                                    }

                                    @if (Model.name_Metadata.visibilityInCreate)
                                    {
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.name, new { @class = "col-xs-12 col-sm-3 col-md-3 col-lg-2 control-label", })

                                            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-5">
                                                <div class="clearfix">
                                                    <label class="input">
                                                        <i class="icon-append fa fa-pencil"></i>
                                                        @Html.EditorFor(model => model.name, new { @readonly = "readonly", @class = "form-control" + Model.name_Metadata.mandatoryClass, @placeholder = @Html.DisplayNameFor(m => m.name) })
                                                        @Html.ValidationMessageFor(m => m.name)
                                                    </label>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    @if (Model.address1_Metadata.visibilityInCreate)
                                    {
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.address1, new { @class = "col-xs-12 col-sm-3 col-md-3 col-lg-2 control-label", })

                                            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-5">
                                                <div class="clearfix">
                                                    <label class="input">
                                                        <i class="icon-append fa fa-pencil"></i>
                                                        @Html.EditorFor(model => model.address1, new { @readonly = "readonly", @class = "form-control" + Model.address1_Metadata.mandatoryClass, @placeholder = @Html.DisplayNameFor(m => m.address1) })
                                                        @Html.ValidationMessageFor(m => m.address1)
                                                    </label>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    @if (Model.address2_Metadata.visibilityInCreate)
                                    {
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.address2, new { @class = "col-xs-12 col-sm-3 col-md-3 col-lg-2 control-label", })

                                            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-5">
                                                <div class="clearfix">
                                                    <label class="input">
                                                        <i class="icon-append fa fa-pencil"></i>
                                                        @Html.EditorFor(model => model.address2, new { @class = "form-control" + Model.address2_Metadata.mandatoryClass, @placeholder = @Html.DisplayNameFor(m => m.address2), @readonly = "readonly" })
                                                        @Html.ValidationMessageFor(m => m.address2)
                                                    </label>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    @if (Model.groupCode_Metadata.visibilityInCreate)
                                    {
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.groupCode, new { @class = "col-xs-12 col-sm-3 col-md-3 col-lg-2 control-label", })

                                            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-5">
                                                <div class="clearfix">
                                                    <label class="input">
                                                        <i class="icon-append fa fa-pencil"></i>
                                                        @Html.EditorFor(model => model.groupCode, new { id = "groupCode", @class = "form-control" + Model.groupCode_Metadata.mandatoryClass, @placeholder = @Html.DisplayNameFor(m => m.groupCode), @readonly = "readonly" })
                                                        @Html.ValidationMessageFor(m => m.groupCode)
                                                    </label>
                                                </div>
                                            </div>
                                        </div>
                                    }

                                </div>
                            </fieldset>

                        </div>
                        <!-- end widget content -->

                    </div>
                    <!-- end widget div -->

                </div>
            </article>


            <div id="shipToContent" style="width:100%">
                <div class="title-section">
                    <h2 class="title">Ship To Address List</h2>
                </div>

                <table id="shippingAddressTable" class="table table-striped table-bordered" style="width:100%">

                    <thead>
                        <tr>
                            <th>Ship To Num</th>
                            <th>Name</th>
                            <th>Address1</th>
                            <th>Address2</th>
                            <th>Address3</th>
                            <th>City</th>
                            <th>State</th>
                            <th>Zip</th>
                            <th>Country</th>
                        </tr>
                    </thead>
                </table>

            </div>

            <div id="customerpricelist" style="width:100%">
                <div class="title-section">
                    <h2 class="title">Customer Price List</h2>
                </div>
                <div>

                    <input type="checkbox" id="filterByCustomerGroup" /> Filter by Customer Group

                </div>
                <table id="customerpricelistTable" class="table table-striped table-bordered" style="width:100%">

                    <thead>
                        <tr>
                            <th>&nbsp;</th>
                            <th>List Code</th>
                            <th>Group Code</th>
                            <th>List Description</th>
                            <th>Ship To Num</th>
                            <th>Seq Num</th>
                            <th>Currency Code</th>
                            <th>StartDate</th>
                            <th>End Date</th>

                        </tr>
                    </thead>
                </table>

            </div>
            <div id="pricelistparts" style="width:100%">
                <div class="title-section">
                    <h2 class="title">Price List Part</h2>
                    <p id="list-details">
                        <strong>ListCode:</strong> <span id="listCode"></span> |
                        <strong>ShipToNum:</strong> <span id="shipToNum"></span>
                    </p>
                </div>

                <table id="pricelistpartsTable" class="table table-striped table-bordered" style="width:100%">

                    <thead>
                        <tr>
                            <th>Part Number</th>
                            <th>Base Price</th>
                            <th>UOM Code</th>

                        </tr>
                    </thead>
                </table>

            </div>




            <article class="col-sm-12 col-md-12 col-lg-12 sortable-grid ui-sortable">

                <!-- Widget ID (each widget will need unique ID)-->
                <!-- end widget -->

                <div class="jarviswidget jarviswidget-color-blueDark jarviswidget-sortable" id="wid-id-5" data-widget-colorbutton="false" data-widget-editbutton="false" data-widget-custombutton="false" style="" role="widget">


                    <!-- widget div-->
                    <div role="content">

                        <!-- widget edit box -->
                        <div class="jarviswidget-editbox">
                            <!-- This area used as dropdown edit box -->

                        </div>
                        <!-- end widget edit box -->
                        <!-- widget content -->
                        <div class="widget-body no-padding">
                            <footer id="btnSection">
                                <div class="form-group">

                                    <div class="col-md-2"></div>
                                    <div class="col-xs-12 col-sm-10 col-md-10 col-lg-10">

                                        @if (!@Model.readOnly)
                                        {
                                            <button id="update-customer" class="btn btn-sm btn-primary" data-value="update" type="button" style="@(Model.isEdit ? "" : "display: none")">
                                                <i class="fa fa-pencil"></i>
                                                @Html.GetGlobalResource("BTN_UPDATE")
                                            </button>
                                            if (!Model.isEdit)
                                            {
                                                <button id="save-customer" class="btn btn-sm btn-primary" data-value="save" type="button">
                                                    <i class="fa fa-save"></i>
                                                    @Html.GetGlobalResource("BTN_SAVE")
                                                </button>
                                            }
                                            <button class="btn btn-sm btn-primary" type="reset">
                                                <i class="fa fa-refresh"></i>
                                                @Html.GetGlobalResource("BTN_RESET")
                                            </button>
                                        }
                                        <button id="back-customer" class="btn btn-sm btn-primary" type="button" data-url="Customer/Index">
                                            <i class="fa fa-mail-reply"></i>
                                            @Html.GetGlobalResource("BTN_BACK")
                                        </button>
                                    </div>
                                </div>
                            </footer>
                        </div>
                        <!-- end widget content -->

                    </div>
                    <!-- end widget div -->

                </div>
            </article>

        }




        </div>

        <!-- END ROW -->
        <!-- NEW ROW -->
        <!-- END ROW-->

    </section>



</div>

<script type="text/javascript">
    $(document).ready(function () {
      /*  $('#shippingAddressTable').DataTable({
            paging: true,
            searching: true,
            ordering: true,
            info: true,
            pageLength: 10
        });

        */
        var tableShipTo = $('#shippingAddressTable').DataTable({
            "paging": true,
            "ordering": false,
            "info": false,
            "searching": true,  
            "responsive": true,
            "columns": [

                { "data": "shippingCode" },
                { "data": "storeName" },
                { "data": "address1" },
                { "data": "address2" },
                { "data": "address3" },
                { "data": "cityName" },
                { "data": "stateName" },
                { "data": "zip" },
                { "data": "countryName" },
            ]
        });
        

        var customId = $('#customId').val();
        var searchid = "code";
        $.ajax({
            url: '@Url.Action("GetShipToAddressesByCustomerId", "ShipToAddress")', // Replace with your actual API endpoint
            type: 'POST',
            data: { customerId: customId, searchby: 'code' },
            dataType: 'json',
            success: function (response) {

                if (response.success && response.ShipToAddresses) {
                    // Clear existing table data
                    tableShipTo.clear();

                    // Add new data to the table
                    tableShipTo.rows.add(response.ShipToAddresses).draw();

                    // Reset the "select all" checkbox
                    // $('#selectAll').prop('checked', false);
                } else {
                   // alert('No record found or an error occurred.');
                }
            },
            error: function () {
                alert('Failed to fetch ShipToAddress.');
            }
        });

        /*------------Customer Price List---------------*/
        var tablecustomerpricelist = $('#customerpricelistTable').DataTable({
            "paging": true,
            "ordering": false,
            "info": false,
            "searching": true,
            "responsive": true,
            "columns": [
                { // Add a column for the "View" button
                    "data": null,
                    // "defaultContent": "<button class='view-details btn btn-primary'>View</button>",
                    "defaultContent": "<button class='view-details btn btn-sm btn-success btn-edit'><i class='fa fa-edit'></i></button>",

                    "orderable": false
                },
                { "data": "ListCode" },
                { "data": "CustGroup" },
                { "data": "ListDescription" },
                { "data": "ShipToNum" },
                { "data": "SeqNum" },
                { "data": "CurrencyCode" },
                { "data": "StartDate" },
                { "data": "EndDate" },

            ]
        });

        var tablepricelistpart = $('#pricelistpartsTable').DataTable({
            "paging": true,
            "ordering": false,
            "info": false,
            "searching": true,
            "responsive": true,
            "columns": [

                { "data": "partNum" },
                { "data": "basePrice" },
                { "data": "uomCode" },

            ]
        });

        $('#customerpricelistTable tbody').on('click', '.view-details', function () {
            var $triggerRow = $(this).closest('tr');
            var rowData = tablecustomerpricelist.row($triggerRow).data();
            var listCode = rowData.ListCode;
            var ShipToNum = rowData.ShipToNum;
            $('#listCode').text(listCode);
            $('#shipToNum').text(ShipToNum);
              $.ajax({
                  url: '@Url.Action("GetPriceListParts", "PriceList")', // Replace with your actual API endpoint
                  type: 'POST',
                  data: { listCode: listCode },
                  dataType: 'json',
                 success: function (response) {

                  if (response.success && response.priceListPart) {
                      // Clear existing table data
                      tablepricelistpart.clear();

                      // Add new data to the table
                      tablepricelistpart.rows.add(response.priceListPart).draw();

                  } else {
                     // alert('No record found or an error occurred.');
                      tablepricelistpart.clear().draw();

                  }
              },
              error: function () {
                  alert('Failed to fetch Customer Price List.');
              }
  });
            return false;


        });
        $('#filterByCustomerGroup').click(function () {
            var groupCode = $('#groupCode').val()
            
            if ($(this).is(':checked')) {
                loadCustomerPriceList(groupCode)
            } else {
                loadCustomerPriceList(null)
            }
        });
        loadCustomerPriceList(null);
        function loadCustomerPriceList(groupCode) {
            $.ajax({
                url: '@Url.Action("GetCustomerPriceList", "PriceList")',
                type: 'POST',
                data: { CustNum: customId, groupCode: groupCode },  
                dataType: 'json',
                success: function (response) {

                    if (response.success && response.customerpriceList) {
                        // Clear existing table data
                        tablecustomerpricelist.clear();

                        // Add new data to the table
                        tablecustomerpricelist.rows.add(response.customerpriceList).draw();

                    } else {
                       // alert('No record found or an error occurred.');

                    }
                },
                error: function () {
                    alert('Failed to fetch Price List Part.');
                }
            });
        }

    });
</script>
<style>
    .dataTables_filter [type='search'] {
        width: auto !important;
    }
</style>
<!-- Protected Script -->
@Scripts.Render(bundles.scripts.common_add_edit)
@Scripts.Render("~/bundles/jqueryval")
<!-- /.page-content -->
