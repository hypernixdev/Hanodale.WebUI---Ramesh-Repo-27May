@model Hanodale.WebUI.Models.ProductCartonModel
@using Hanodale.Utility.Globalize
@using Hanodale.WebUI
@using System.Web.Optimization
@{
    ViewBag.Title = "Create";
    Layout = null;
}

<!-- Hidden Variable -->
<input type="hidden" id="MSG_CONFIRM_SAVE" value="@Html.GetGlobalResource("MSG_CONFIRM_SAVE")">
<input type="hidden" id="MSG_CONFIRM_UPDATE" value="@Html.GetGlobalResource("MSG_CONFIRM_UPDATE")">
<input type="hidden" id="form-congif" value="productcarton" data-readOnly="@Model.readOnly">
<!-- Hidden Variable -->

<div class="widget-body">
</div>

<div id="content" style="opacity: 1; border: none">
    <div class="row-flex">
        <div class="col-xs-12 col-sm-7 col-md-7 col-lg-4">
            <h1 class="page-title txt-color-blueDark">
                <i class="fa fa-edit fa-fw "></i>

                @if (Model.isEdit && !Model.readOnly)
                {
                    @Html.GetGlobalResource("PAGE_HEADER_EDIT_PRODUCTCARTON")
                }
                else if (!Model.isEdit && !Model.readOnly)
                {
                    @Html.GetGlobalResource("PAGE_HEADER_CREATE_PRODUCTCARTON")
                }
                else if (Model.readOnly)
                {
                    @Html.GetGlobalResource("PAGE_HEADER_VIEW_PRODUCTCARTON")
                }
            </h1>
        </div>
    </div>


    <div class="formSpliter"></div>
    <!-- widget grid -->
    <section id="widget-grid" class="">

        <div class="row">
            <div id="message" class="alert alert-success" style="display: none"></div>
            @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "validation-form", @class = "form-horizontal" }))
            {@Html.AntiForgeryToken()
            @Html.ValidationSummary(true)
            @Html.HiddenFor(model => model.id)

            <article class="col-sm-12 col-md-12 col-lg-12 sortable-grid ui-sortable">

                <!-- Widget ID (each widget will need unique ID)-->
                <!-- end widget -->

                <div class="jarviswidget jarviswidget-sortable" id="wid-id-1" data-widget-colorbutton="false" data-widget-editbutton="false" data-widget-custombutton="false" style="" role="widget">

                    <header role="heading">
                        <div class="jarviswidget-ctrls" role="menu"><a href="javascript:void(0);" class="button-icon jarviswidget-fullscreen-btn" rel="tooltip" title="" data-placement="bottom" data-original-title="Fullscreen"><i class="fa fa-expand "></i></a></div>

                        <span class="widget-icon"><i class="fa fa-edit"></i></span>
                        <h2>@Html.GetGlobalResource("PRODUCTCARTON_INFO")</h2>
                        <span class="jarviswidget-loader"><i class="fa fa-refresh fa-spin"></i></span>
                    </header>

                    <!-- widget div-->
                    <div role="content">

                        <!-- widget edit box -->
                        <div class="jarviswidget-editbox">
                            <!-- This area used as dropdown edit box -->

                        </div>
                        <!-- end widget edit box -->
                        <!-- widget content -->
                        <div class="widget-body no-padding">


                            <fieldset>
                                <div class="smart-form">


                                    @if (Model.epicorPartNo_Metadata.visibilityInCreate)
                                    {

                                        <div class="form-group">
                                            @Html.LabelFor(model => model.epicorPartNo, new { @class = "col-xs-12 col-sm-3 col-md-3 col-lg-2 control-label", })
                                            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-5">
                                                <div class="clearfix">
                                                    <label class="select">
                                                        @Html.EditorFor(model => model.epicorPartNo, new { @class = "form-control multipleSelect" + Model.epicorPartNo_Metadata.mandatoryClass, dataValue = Model.lstProduct })
                                                        @Html.ValidationMessageFor(m => m.epicorPartNo)
                                                    </label>
                                                </div>

                                            </div>
                                        </div>
                                    }
                                    @if (Model.productKey_Metadata.visibilityInCreate)
                                    {
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.productKey, new { @class = "col-xs-12 col-sm-3 col-md-3 col-lg-2 control-label", })

                                            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-5">
                                                <div class="clearfix">
                                                    <label class="input">
                                                        <i class="icon-append fa fa-pencil"></i>
                                                        @Html.EditorFor(model => model.productKey, new { @class = "form-control" + Model.productKey_Metadata.mandatoryClass, @placeholder = @Html.DisplayNameFor(m => m.productKey) })
                                                        @Html.ValidationMessageFor(m => m.productKey)
                                                    </label>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    @if (Model.barcode_Metadata.visibilityInCreate)
                                    {
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.barcode, new { @class = "col-xs-12 col-sm-3 col-md-3 col-lg-2 control-label", })

                                            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-5">
                                                <div class="clearfix">
                                                    <label class="input">
                                                        <i class="icon-append fa fa-pencil"></i>
                                                        @Html.EditorFor(model => model.barcode, new { id = "barcode", @class = "form-control" + Model.barcode_Metadata.mandatoryClass, @placeholder = @Html.DisplayNameFor(m => m.barcode) })
                                                        @Html.ValidationMessageFor(m => m.barcode)
                                                    </label>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    @if (Model.vendorProductCode_Metadata.visibilityInCreate)
                                    {
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.vendorProductCode, new { @class = "col-xs-12 col-sm-3 col-md-3 col-lg-2 control-label", })
                                            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-5">
                                                <div class="clearfix">
                                                    <label class="input">
                                                        <i class="icon-append fa fa-pencil"></i>
                                                        @Html.EditorFor(model => model.vendorProductCode, new { @class = "form-control" + Model.vendorProductCode_Metadata.mandatoryClass, @placeholder = @Html.DisplayNameFor(m => m.vendorProductCode) })
                                                        @Html.ValidationMessageFor(m => m.vendorProductCode)
                                                    </label>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    @if (Model.productBarcodeLength_Metadata.visibilityInCreate)
                                    {
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.productBarcodeLength, new { @class = "col-xs-12 col-sm-3 col-md-3 col-lg-2 control-label", })
                                            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-5">
                                                <div class="clearfix">
                                                    <label class="input">
                                                        <i class="icon-append fa fa-pencil"></i>
                                                        @Html.EditorFor(model => model.productBarcodeLength, new { id = "productBarcodeLength", @class = "form-control" + Model.productBarcodeLength_Metadata.mandatoryClass, @placeholder = @Html.DisplayNameFor(m => m.productBarcodeLength) })
                                                        @Html.ValidationMessageFor(m => m.productBarcodeLength)
                                                    </label>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    @if (Model.productCodeFromPosition_Metadata.visibilityInCreate)
                                    {
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.productCodeFromPosition, new { @class = "col-xs-12 col-sm-3 col-md-3 col-lg-2 control-label", })
                                            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-5">
                                                <div class="clearfix">
                                                    <label class="input">
                                                        <i class="icon-append fa fa-pencil"></i>
                                                        @Html.EditorFor(model => model.productCodeFromPosition, new { @class = "form-control" + Model.productCodeFromPosition_Metadata.mandatoryClass, @placeholder = @Html.DisplayNameFor(m => m.productCodeFromPosition) })
                                                        @Html.ValidationMessageFor(m => m.productCodeFromPosition)
                                                    </label>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    @if (Model.productCodeToPosition_Metadata.visibilityInCreate)
                                    {
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.productCodeToPosition, new { @class = "col-xs-12 col-sm-3 col-md-3 col-lg-2 control-label", })
                                            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-5">
                                                <div class="clearfix">
                                                    <label class="input">
                                                        <i class="icon-append fa fa-pencil"></i>
                                                        @Html.EditorFor(model => model.productCodeToPosition, new { id = "productCodeToPosition", @class = "form-control" + Model.productCodeToPosition_Metadata.mandatoryClass, @placeholder = @Html.DisplayNameFor(m => m.productCodeToPosition) })
                                                        @Html.ValidationMessageFor(m => m.productCodeToPosition)
                                                        <span id="error-message" style="color: red;"></span>

                                                    </label>
                                                </div>
                                            </div>
                                        </div>
                                    }


                                    @if (Model.weightFromPosition_Metadata.visibilityInCreate)
                                    {
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.weightFromPosition, new { @class = "col-xs-12 col-sm-3 col-md-3 col-lg-2 control-label", })
                                            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-5">
                                                <div class="clearfix">
                                                    <label class="input">
                                                        <i class="icon-append fa fa-pencil"></i>
                                                        @Html.EditorFor(model => model.weightFromPosition, new { id = "weightFromPosition", @class = "form-control" + Model.weightFromPosition_Metadata.mandatoryClass, @placeholder = @Html.DisplayNameFor(m => m.weightFromPosition) })
                                                        @Html.ValidationMessageFor(m => m.weightFromPosition)
                                                    </label>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    @if (Model.weightToPosition_Metadata.visibilityInCreate)
                                    {
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.weightToPosition, new { @class = "col-xs-12 col-sm-3 col-md-3 col-lg-2 control-label", })
                                            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-5">
                                                <div class="clearfix">
                                                    <label class="input">
                                                        <i class="icon-append fa fa-pencil"></i>
                                                        @Html.EditorFor(model => model.weightToPosition, new { id = "weightToPosition", @class = "form-control" + Model.weightToPosition_Metadata.mandatoryClass, @placeholder = @Html.DisplayNameFor(m => m.weightToPosition) })
                                                        @Html.ValidationMessageFor(m => m.weightToPosition)
                                                        <span id="error-message1" style="color: red;"></span>

                                                    </label>
                                                </div>
                                            </div>
                                        </div>
                                    }

                                    @if (Model.weightValue_Metadata.visibilityInCreate)
                                    {
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.weightValue, new { @class = "col-xs-12 col-sm-3 col-md-3 col-lg-2 control-label", })
                                            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-5">
                                                <div class="clearfix">
                                                    <label class="input">
                                                        <i class="icon-append fa fa-pencil"></i>
                                                        @Html.EditorFor(model => model.weightValue1, new { id = "weightValue1",@class = "form-control", @placeholder = @Html.DisplayNameFor(m => m.weightValue) })

                                                        @*@Html.EditorFor(model => model.weightValue, new { htmlAttributes = new { id = "weightValue", @class = "form-control" + Model.weightValue_Metadata.mandatoryClass, @placeholder = @Html.DisplayNameFor(m => m.weightValue) } })*@
                                                        @Html.HiddenFor(model => model.weightValue, new { id = "weightValue", @class = "form-control" + Model.weightValue_Metadata.mandatoryClass, @placeholder = @Html.DisplayNameFor(m => m.weightValue) })
                                                        @Html.ValidationMessageFor(m => m.weightValue)
                                                    </label>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                    @if (Model.weightMutiplier_Metadata.visibilityInCreate)
                                    {
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.weightMutiplier, new { @class = "col-xs-12 col-sm-3 col-md-3 col-lg-2 control-label", })
                                            <div class="col-xs-12 col-sm-6 col-md-6 col-lg-5">
                                                <div class="clearfix">
                                                    <label class="input">
                                                        <i class="icon-append fa fa-pencil"></i>
                                                        @Html.EditorFor(model => model.weightMutiplier1, new { id = "weightMutiplier1", @class = "form-control", @placeholder = @Html.DisplayNameFor(m => m.weightMutiplier) })

                                                        @Html.HiddenFor(model => model.weightMutiplier, new { id = "weightMutiplier", @class = "form-control" + Model.weightMutiplier_Metadata.mandatoryClass, @placeholder = @Html.DisplayNameFor(m => m.weightMutiplier) })
                                                        @Html.ValidationMessageFor(m => m.weightMutiplier)
                                                    </label>
                                                    <span id="weight-error-message" style="color: red;"></span>

                                                </div>
                                            </div>
                                        </div>
                                    }




                                </div>
                            </fieldset>

                        </div>
                        <!-- end widget content -->

                    </div>
                    <!-- end widget div -->

                </div>
            </article>


            <article class="col-sm-12 col-md-12 col-lg-12 sortable-grid ui-sortable">

                <!-- Widget ID (each widget will need unique ID)-->
                <!-- end widget -->

                <div class="jarviswidget jarviswidget-color-blueDark jarviswidget-sortable" id="wid-id-5" data-widget-colorbutton="false" data-widget-editbutton="false" data-widget-custombutton="false" style="" role="widget">


                    <!-- widget div-->
                    <div role="content">

                        <!-- widget edit box -->
                        <div class="jarviswidget-editbox">
                            <!-- This area used as dropdown edit box -->

                        </div>
                        <!-- end widget edit box -->
                        <!-- widget content -->
                        <div class="widget-body no-padding">
                            <footer id="btnSection">
                                <div class="form-group">

                                    <div class="col-md-2"></div>
                                    <div class="col-xs-12 col-sm-10 col-md-10 col-lg-10">

                                        @if (!@Model.readOnly)
                                        {
                                            <button id="update-productcarton" class="btn btn-sm btn-primary" data-value="update" type="button" style="@(Model.isEdit ? "" : "display: none")">
                                                <i class="fa fa-pencil"></i>
                                                @Html.GetGlobalResource("BTN_UPDATE")
                                            </button>
                                            if (!Model.isEdit)
                                            {
                                                <button id="save-productcarton" class="btn btn-sm btn-primary" data-value="save" type="button">
                                                    <i class="fa fa-save"></i>
                                                    @Html.GetGlobalResource("BTN_SAVE")
                                                </button>
                                            }
                                            <button class="btn btn-sm btn-primary" type="reset">
                                                <i class="fa fa-refresh"></i>
                                                @Html.GetGlobalResource("BTN_RESET")
                                            </button>
                                        }
                                        <button id="back-productcarton" class="btn btn-sm btn-primary" type="button" data-url="ProductCarton/Index">
                                            <i class="fa fa-mail-reply"></i>
                                            @Html.GetGlobalResource("BTN_BACK")
                                        </button>
                                    </div>
                                </div>
                            </footer>
                        </div>
                        <!-- end widget content -->

                    </div>
                    <!-- end widget div -->

                </div>
            </article>

        }




        </div>

        <!-- END ROW -->
        <!-- NEW ROW -->
        <!-- END ROW-->

    </section>



</div>

<script>
    $(document).ready(function () {
         @if (!Model.isEdit && !Model.readOnly)
          {
         <text>
        $('#weightMutiplier1').val('0.00');
        $('#productCodeFromPosition').val('0');
        $('#productCodeToPosition').val('0');
        $('#weightFromPosition').val('0');
        $('#weightToPosition').val('0');
        </text>
        }
        // Function to extract and log the substring
        function extractWeightFromBarcode() {
            var text = $('#barcode').val();

            // Check if the value is not undefined or empty
            if (text) {
                // Convert input values to integers for proper substring usage
                var startPos = parseInt($('#weightFromPosition').val(), 10);  // Convert to integer
                var endPos = parseInt($('#weightToPosition').val(), 10);  // Convert to integer

                // Check if startPos and endPos are valid numbers
                if (!isNaN(startPos) && !isNaN(endPos)) {
                    // Extracting the substring
                    var extractedText = text.substring(startPos, endPos);

                    $('#weightValue').val(extractedText);
                    $('#weightValue1').val(extractedText);
                    $('#weightValue1').prop('disabled', true);

                } else {
                    $('#weightValue').val('');
                    $('#weightValue1').val('');
                }
            } else {
                console.log("Barcode value is undefined or empty");
            }
        }

        // Call the function on change of the Barcode, WeightFromPosition, or WeightToPosition fields
        $('#barcode, #weightFromPosition, #weightToPosition').on('change', function () {
            extractWeightFromBarcode();
        });

        $("#productCodeToPosition").on('change', function () {
            var productCodeToPosition = parseInt($('#productCodeToPosition').val()); // Convert to integer
            var productBarcodeLen = parseInt($("#productBarcodeLength").val()); // Convert to integer

            // Check if the entered code is greater than or equal to the barcode length
            if (productCodeToPosition >= productBarcodeLen) {
                $('#productCodeToPosition').val(""); // Clear the input field
                $("#error-message").text("Product Code To Pos cannot be longer than the Product Barcode length.");
            } else {
                $("#error-message").text(""); // Clear error message if valid
            }
        });

        $("#weightToPosition").on('change', function () {
            var weightToPosition = parseInt($('#weightToPosition').val());
            var productBarcodeLen = parseInt($("#productBarcodeLength").val());

            // Check if the entered code is less than or equal to the barcode length
            if (weightToPosition >= productBarcodeLen) {
                $('#weightToPosition').val("");
                $("#error-message1").text("Weight To Pos cannot be longer than the Product Barcode length.");
            } else {

                $("#error-message1").text(""); // Clear error message if valid
            }

            // var weightMultiplierInput = $('#weightMultiplier'); // The Weight Multiplier input field

            // Check if Weight To Pos is 0
            if (weightToPosition === 0 || isNaN(weightToPosition)) {
                $('#weightMutiplier').val(0);
                $('#weightMutiplier1').val(0);
                $('#weightMutiplier1').prop('disabled', true); // Disable the Weight Multiplier field
                $("#weight-error-message").text("");
            } else {
                $('#weightMutiplier').val('');
                $('#weightMutiplier1').val('');
                $('#weightMutiplier1').prop('disabled', false); // Enable the Weight Multiplier field
                $('#weightMutiplier1').prop('required', true); // Set it as mandatory
            }
        });
        $("#weightMutiplier1").on('change', function () {
            var weightMutiplier1 = $('#weightMutiplier1').val();
            $('#weightMutiplier').val(weightMutiplier1);

        });
        $('#save-productcarton').on('click', function (e) {
            var weightMutiplier = parseInt($("#weightMutiplier1").val());


            if (isNaN(weightMutiplier) || weightMutiplier === '') {
                $('#weightMutiplier1').prop('required', true); // Set it as mandatory
                $("#weight-error-message").text("Please enter your Weight Mutiplier");
                return false;
            } else {

                $('#weightMutiplier1').prop('required', false);
                $("#weight-error-message").text("");

            }

            return false;
        });

    });


</script>

<!-- Protected Script -->
@Scripts.Render(bundles.scripts.common_add_edit)
@Scripts.Render("~/bundles/jqueryval")
<!-- /.page-content -->
