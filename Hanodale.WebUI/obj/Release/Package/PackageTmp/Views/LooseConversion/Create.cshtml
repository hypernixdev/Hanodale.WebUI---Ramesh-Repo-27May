@model Hanodale.WebUI.Models.LooseConversionModel
@using Hanodale.Utility.Globalize
@using Hanodale.WebUI
@using System.Web.Optimization
@{
    ViewBag.Title = "Create";
    Layout = null;
    bool isReadOnly = ViewBag.IsReadOnly ?? false;
}

<!-- Hidden Variable -->
<input type="hidden" id="MSG_CONFIRM_SAVE" value="@Html.GetGlobalResource("MSG_CONFIRM_SAVE")">
<input type="hidden" id="MSG_CONFIRM_UPDATE" value="@Html.GetGlobalResource("MSG_CONFIRM_UPDATE")">
<input type="hidden" id="form-congif" value="looseconversion" data-readOnly="@Model.readOnly">
<!-- Hidden Variable -->

<div class="widget-body">
</div>

<div id="content" style="opacity: 1; border: none">
    <div class="row-flex">
        <div class="col-xs-12 col-sm-7 col-md-7 col-lg-4">
            <h1 class="page-title txt-color-blueDark">
                <i class="fa fa-edit fa-fw "></i>

                @if (Model.isEdit && !Model.readOnly)
                {
                    @Html.GetGlobalResource("PAGE_HEADER_EDIT_LOOSECONVERSION")
                }
                else if (!Model.isEdit && !Model.readOnly)
                {
                    @Html.GetGlobalResource("PAGE_HEADER_CREATE_LOOSECONVERSION")
                }
                else if (Model.readOnly)
                {
                    @Html.GetGlobalResource("PAGE_HEADER_VIEW_LOOSECONVERSION")
                }
            </h1>
        </div>
    </div>


    <div class="formSpliter"></div>
    <!-- widget grid -->
    <section id="widget-grid" class="">

        <div class="row">
            <div id="message" class="alert alert-success" style="display: none"></div>
            @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "validation-form", @class = "form-horizontal" }))
            {@Html.AntiForgeryToken()
            @Html.ValidationSummary(true)
            @Html.HiddenFor(model => model.id)

            <article class="col-sm-12 col-md-12 col-lg-12 sortable-grid ui-sortable">

                <!-- Widget ID (each widget will need unique ID)-->
                <!-- end widget -->

                <div class="jarviswidget jarviswidget-sortable" id="wid-id-1" data-widget-colorbutton="false" data-widget-editbutton="false" data-widget-custombutton="false" style="" role="widget">

                    <header role="heading">
                        <div class="jarviswidget-ctrls" role="menu"><a href="javascript:void(0);" class="button-icon jarviswidget-fullscreen-btn" rel="tooltip" title="" data-placement="bottom" data-original-title="Fullscreen"><i class="fa fa-expand "></i></a></div>

                        <span class="widget-icon"><i class="fa fa-edit"></i></span>
                        <h2>@Html.GetGlobalResource("LOOSECONVERSION_INFO")</h2>
                        <span class="jarviswidget-loader"><i class="fa fa-refresh fa-spin"></i></span>
                    </header>

                    <!-- widget div-->
                    <div role="content">

                        <!-- widget edit box -->
                        <div class="jarviswidget-editbox">
                            <!-- This area used as dropdown edit box -->

                        </div>
                        <!-- end widget edit box -->
                        <!-- widget content -->
                        <div class="widget-body no-padding">
                            <fieldset>
                                <div class="smart-form">
                                    <div class="col-xs-12 col-sm-6 col-md-6 col-lg-5">
                                        @Html.Label("barcode", "Bulk Barcode", new { @class = "font-weight-bold" })
                                        @Html.TextBox("barcode", Model.barcode, new { @class = "form-control", @id = "barcode",  @onchange = "fetchProductDetails()", required = "required" })

                                        @Html.Hidden("productCarton_Id", null, new { @class = "form-control", @id = "productCarton_Id" })
                                        @*@Html.Hidden("weighScaleBarcode_Id", null, new { @class = "form-control", @id = "weighScaleBarcode_Id" })*@
                                        @Html.HiddenFor(model => model.LooseConv, new { @class = "form-control", @id = "LooseConv" })

                                        <small class="form-text text-muted">
                                            Scan the carton barcode here. The barcode must pre-exist in ProductCarton list to retrieve product information.
                                        </small>
                                    </div>
                                </div>
                                <br />
                                <div class="smart-form">
                                    <div class="col-xs-12 col-sm-6 col-md-6 col-lg-5">
                                        @Html.Label("PartNumber", "Part Number:", new { @class = "font-weight-bold" })
                                        <span id="PartNumber">N/A</span>
                                    </div>
                                </div>
                                <br />
                                <div class="smart-form">
                                    <div class="col-xs-12 col-sm-6 col-md-6 col-lg-5">
                                        @Html.Label("PartName", "Part Name:", new { @class = "font-weight-bold" })
                                        <span id="PartName">N/A</span>
                                    </div>
                                </div>
                                <br />
                                <div class="smart-form">
                                    <div class="col-xs-12 col-sm-6 col-md-6 col-lg-5">
                                        @Html.Label("BulkQty", "Bulk Qty:", new { @class = "font-weight-bold" })
                                        <span id="BulkQty">N/A</span>
                                    </div>
                                </div>
                            </fieldset>
                            <hr />

                            <fieldset>
                                <div class="smart-form">
                                    <div class="col-xs-12 col-sm-6 col-md-6 col-lg-5">
                                        @Html.Label("LooseBarcode", "Loose Barcode", new { @class = "font-weight-bold" })

                                        <div class="d-flex">
                                            @Html.TextBox("LooseBarcode", null, new { @class = "form-control mr-2", @id = "LooseBarcode", disabled = Model.readOnly ? "disabled" : null })

                                            <div class="col-xs-12 col-sm-2">
                                                <button type="button" id="addLooseBarcode" class="btn btn-success btn-lg" @(Model.readOnly ? "disabled=\"disabled\"" : "") onclick="addLooseItem(event)">Add</button>

                                            </div>
                                        </div>

                                        <small class="form-text text-muted">
                                            Scan or key in loose barcode here. Click [Add] to add to the list below.
                                        </small>
                                    </div>
                                </div>



                                <div class="widget-body no-padding">
                                    <input type="hidden" id="looseItems" name="looseItems" />

                                    <div class="table-responsive">
                                        <table class="table table-striped table-bordered" id="looseItemsTable">
                                            <thead>
                                                <tr>
                                                    <th>Action</th>
                                                    <th>Label (Barcode)</th>
                                                    <th>Loose Qty</th>
                                                    <th>Running Balance</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <!-- Rows will be dynamically added here -->
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </fieldset>
                        </div>
                        <!-- end widget content -->

                    </div>
                    <!-- end widget div -->

                </div>
            </article>


            <article class="col-sm-12 col-md-12 col-lg-12 sortable-grid ui-sortable">

                <!-- Widget ID (each widget will need unique ID)-->
                <!-- end widget -->

                <div class="jarviswidget jarviswidget-color-blueDark jarviswidget-sortable" id="wid-id-5" data-widget-colorbutton="false" data-widget-editbutton="false" data-widget-custombutton="false" style="" role="widget">


                    <!-- widget div-->
                    <div role="content">

                        <!-- widget edit box -->
                        <div class="jarviswidget-editbox">
                            <!-- This area used as dropdown edit box -->

                        </div>
                        <!-- end widget edit box -->
                        <!-- widget content -->
                        <div class="widget-body no-padding">
                            <footer id="btnSection">
                                <div class="form-group">

                                    <div class="col-md-2"></div>
                                    <div class="col-xs-12 col-sm-10 col-md-10 col-lg-10">

                                        <div class="form-group">
                                            <button id="saveForm" class="btn btn-sm btn-primary" type="button" @(Model.readOnly ? "disabled=\"disabled\"" : "")>
                                                <i class="fa fa-save"></i>
                                                @Html.GetGlobalResource("BTN_SUBMIT")
                                            </button>
                                            @*<button id="saveWeightBarcode" class="btn btn-sm btn-success" type="button"   @(Model.readOnly ? "disabled='disabled'" : "")>
            <i class="fa fa-submit"></i>
            @Html.GetGlobalResource("BTN_SUBMIT")
        </button>*@
                                            <button id="back-looseconversion" class="btn btn-sm btn-primary" type="button" data-url="LooseConversion/Index">
                                                <i class="fa fa-mail-reply"></i>
                                                @Html.GetGlobalResource("BTN_BACK")
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </footer>
                        </div>
                        <!-- end widget content -->

                    </div>
                    <!-- end widget div -->

                </div>
            </article>

        }




        </div>

        <!-- END ROW -->
        <!-- NEW ROW -->
        <!-- END ROW-->

    </section>



</div>

<script>

    $(document).ready(function () {

        $('#barcode').focus();
        $('#barcode').keypress(function (event) {
            if (event.which === 13) { // Enter key code
                event.preventDefault(); 
                $('#LooseBarcode').focus();
            }
        });
        $('#barcode').on('input change', function () {
            if ($(this).val().trim() !== '') {
                $('#LooseBarcode').focus();
            }
        });

        // Trigger Add button click when Enter key is pressed in Loose Barcode field
        $('#LooseBarcode').on('keyup', function (event) {
            
            if (event.key === 'Enter') {
                $('#addLooseBarcode').click();
            }
        });
         const isReadOnly = @(Model.readOnly ? "true" : "false");

        if (isReadOnly === "true") {
            $('#barcode').prop('disabled', true);
            $('#LooseBarcode').prop('disabled', true);
        } else {
            $('#barcode').prop('disabled', false);
            $('#LooseBarcode').prop('disabled', false);
        }

        const looseConversionData = @Html.Raw(ViewBag.LooseConversionItemsJson);
         const isEdit = @Html.Raw(ViewBag.isEdit);
        $('#saveForm').on('click', function () {
            saveLooseItems();
        });
        if (isEdit === true) {

            fetchProductDetails();
            $('#looseConversionItemTable').show();
            populateLooseConversionTable(looseConversionData);
        }
       

    });

    function populateLooseConversionTable(looseConversionData) {
        looseConversionData.forEach((item, index) => {

            const rowCounter = index + 1;
            const newRow = `
                <tr id="row-${rowCounter}">
                    <td>
                        <button type="button" class="btn btn-danger btn-sm remove-button" @(Model.readOnly ? "disabled=\"disabled\"" : "")>
                            <i class="fa fa-times"></i>
                        </button>
                    </td>
                    <td>${item.LooseBarcode}</td>
                    <td>
                        <input type="number" id="LooseQty-${rowCounter}" name="LooseQty" class="form-control loose-qty" min="0" value="${item.LooseQty}" @(isReadOnly ? "disabled=\"disabled\"" : "")  onchange="calculateRunningBalance(${rowCounter})" />
                    </td>
                    <td class="running-balance">
                        <span id="RunningBalance-${rowCounter}">${item.RunningBalance}</span>
                    </td>
                </tr>
            `;


            $('#looseItemsTable tbody').append(newRow);
        });
    }
    $(document).on('change', '.loose-qty', function () {

        calculateRunningBalance();
    });



 function addLooseItem() {
    const looseBarcode = $('#LooseBarcode').val()?.trim() || '';
    const BulkQty = parseFloat($('#BulkQty').text()?.trim()) || 0;
    const LooseConv = parseFloat($('#LooseConv').val()) || 0;
    let rowCounter = $('#looseItemsTable tbody tr').length;

    // Validate LooseBarcode
    if (!looseBarcode) {
        alert("Please enter a Loose Barcode.");
        return;
     }

     if (looseBarcode.length <16) {
         alert("Barcode length should be equal or more than 16");
         return;
     }

    // Check if the barcode exists in the database
    checkBarcodeExists(looseBarcode, function (existsInDatabase, invalidBarcode) {
        if (existsInDatabase) {
            alert("This Loose Barcode already exists in the database.");
            $('#LooseBarcode').val("");
            return; // Exit the function if barcode exists
        }

        // Check if the barcode already exists in the table
        let barcodeExists = false;
        $('#looseItemsTable tbody tr').each(function () {
            const existingBarcode = $(this).find('td:nth-child(2)').text()?.trim();
            if (existingBarcode === looseBarcode) {
                barcodeExists = true;
                return false; // Exit loop once a match is found
            }
        });

        if (barcodeExists) {
            alert("This Loose Barcode is already added to the list.");
            $('#LooseBarcode').val('');
            return;
        }

        fetchLooseQty(looseBarcode, function (looseQty) {
            // Validate Running Balance against Loose Conversion limit
            let lastRunningBalance = BulkQty;
            const lastRow = $('#looseItemsTable tbody tr').last();
            if (lastRow.length) {
                lastRunningBalance = parseFloat(lastRow.find('.running-balance span').text()) || BulkQty;
            }

            // Clear the LooseBarcode input field
            $('#LooseBarcode').val('');

            // Increment the row counter for unique row IDs
            rowCounter++;

            // Create a new row for the table with calculated LooseQty
            const newRow = `
            <tr id="row-${rowCounter}">
                <td>
                    <button type="button" class="btn btn-danger btn-sm remove-button" onclick="removeLooseItem(${rowCounter})">
                        <i class="fa fa-times"></i>
                    </button>
                </td>
                <td>${looseBarcode}</td>
                <td>
                    <input type="number" id="LooseQty-${rowCounter}" name="LooseQty" required="required" class="form-control loose-qty" min="0" value="${looseQty}" onchange="validateAndCalculateRunningBalance(${rowCounter})" />
                </td>
                <td class="running-balance">
                    <span id="RunningBalance-${rowCounter}">${(lastRunningBalance - looseQty).toFixed(4)}</span>
                </td>
            </tr>`;

            // Append the new row to the table
            $('#looseItemsTable tbody').append(newRow);

            // Recalculate the running balance after adding the new row
            calculateRunningBalance();
        });
    });
}




   function fetchLooseQty(looseBarcode, callback) {
    $.ajax({
        url: '@Url.Action("fetchLooseQty", "LooseConversion")',
        type: 'POST',
        data: { barcode: looseBarcode },
        success: function (response) {
            const looseQty = response.looseQty || 0;
            if (response.error.length > 0) {
                alert(response.error);
                return;
            }
            callback(looseQty);
        },
        error: function () {
            alert("Error calculating Loose Qty. Please try again.");
            callback(0);
        }
    });
}
function isBarcodeInTable(barcode) {
    let exists = false;
    $('#looseItemsTable tbody tr').each(function () {
        const existingBarcode = $(this).find('td:nth-child(2)').text()?.trim();
        if (existingBarcode === barcode) {
            exists = true;
            return false;
        }
    });
    return exists;
}

    function checkBarcodeExists(barcode, callback) {
        let partNo = $('#PartNumber').text()?.trim();
    $.ajax({
        url: '@Url.Action("CheckBarcodeExists", "LooseConversion")',
        type: 'POST',
        data: { barcode: barcode, partNo: partNo },
        success: function (response) {
            callback(response.exists);
        },
        error: function (xhr, status, error) {
            console.error('Error checking barcode:', error);
            callback(false);
        }
    });
}
    function validateAndCalculateRunningBalance(rowCounter) {
        const LooseQty = parseFloat($(`#LooseQty-${rowCounter}`).val()) || 0;
        const accumulatedBalance = calculateRunningBalance();

        if ((accumulatedBalance) < 0) {
            alert("Insufficient Running Balance!");
            $(`#LooseQty-${rowCounter}`).val(0);
        } else {
            calculateRunningBalance();
        }
    }


    function calculateRunningBalance() {
    let runningBalance = parseFloat($('#BulkQty').text()?.trim()) || 0;

    $('#looseItemsTable tbody tr').each(function (index) {
        const rowId = index + 1;
        const LooseQty = parseFloat($(`#LooseQty-${rowId}`).val()) || 0;
        runningBalance -= LooseQty;

        $(`#RunningBalance-${rowId}`).text(runningBalance.toFixed(4));
    });

    return runningBalance;
    }

    function recalculateRunningBalance() {
        let accumulatedBalance = 0;

        $('#looseItemsTable tbody tr').each(function (index) {
            const looseQty = parseFloat($(this).find('input.loose-qty').val()) || 0;
            accumulatedBalance += looseQty;

            $(this).find('span.running-balance').text(accumulatedBalance.toFixed(4));
        });
    }
    function updateRunningBalance() {
        const BulkQty = parseFloat($('#BulkQty').text()?.trim()) || 0;
        let runningTotal = BulkQty;

        $('#looseItemsTable tbody tr').each(function () {
            const looseQty = parseFloat($(this).find('input.loose-qty').val()) || 0;
            const balanceCell = $(this).find('.running-balance span');

            runningTotal -= looseQty;
            balanceCell.text(runningTotal.toFixed(4));
        });
    }

    function removeLooseItem(button) {
        // Remove the selected row
        const row = $(button).closest("tr");
        row.remove();

        // Reorder rows and update IDs and names
        $('#looseItemsTable tbody tr').each(function (index) {
            const newRowCounter = index + 1;

            // Update row ID and attributes for proper ordering
            $(this).attr('id', `row-${newRowCounter}`);
            $(this).find('.remove-button').attr('onclick', `removeLooseItem(this)`);
            $(this).find('input.loose-qty').attr('id', `LooseQty-${newRowCounter}`);
            $(this).find('input.loose-qty').attr('name', `LooseQty-${newRowCounter}`);
            $(this).find('span.running-balance').attr('id', `RunningBalance-${newRowCounter}`);
        });

        // Recalculate the running balance after deletion
        updateRunningBalance();
    }

    $(document).on("click", ".remove-button", function () {
        removeLooseItem(this);
    });
function saveLooseItems() {
    if ($('#looseItemsTable tbody tr').length === 0) {
        alert('No loose items to save. Please add items before saving.');
        return;
    }

    const looseItems = [];
    let isValid = true;
    let accumulatedRunningBalance = 0;
    let bulkQty = parseFloat($('#BulkQty').text()?.trim()) || 0;
    const LooseConv = parseFloat($('#LooseConv').val()) || 0;

    $('#looseItemsTable tbody tr').each(function () {
        const looseBarcode = $(this).find('td:nth-child(2)').text()?.trim() || '';
        const looseQty = parseFloat($(this).find('.loose-qty').val()) || 0;
        const runningBalance = parseFloat($(this).find('.running-balance span').text()?.trim()) || 0;


        if (looseQty <= 0) {
            isValid = false;
            alert(`Loose Quantity for barcode ${looseBarcode} must be greater than 0.`);
            return false;
        }

        // Add to the accumulated running balance
        accumulatedRunningBalance = runningBalance;

        looseItems.push({
            LooseBarcode: looseBarcode,
            LooseQty: looseQty,
            RunningBalance: runningBalance,
        });
    });


    if (!isValid) {
        return;
    }

    // Additional validation for BulkQty and accumulatedRunningBalance
    if ((accumulatedRunningBalance) > 2) {
        alert("Running Balance is more than tolerance level (" + LooseConv.toString() + ")");
        return;
    }


    // Additional validation for BulkQty and accumulatedRunningBalance
    if ((accumulatedRunningBalance) < 0) {
        alert("Running Balance is Less than 0!");
        return;
    }

    // Gather the rest of the data
    const data = {
        bulkBarcode: $('#barcode').val()?.trim() || '',
        partNumber: $('#PartNumber').text()?.trim() || '',
        partName: $('#PartName').text()?.trim() || '',
        bulkQty: bulkQty,
        productCarton_Id: $('#productCarton_Id').val(),
        looseItems: looseItems
    };

    // Store loose items as JSON in a hidden field for submission
    $('#looseItems').val(JSON.stringify(looseItems));

    const token = $('input[name="__RequestVerificationToken"]').val();
    $.ajax({
        url: "@Url.Action("SaveLooseConversion", "LooseConversion")",
        type: 'POST',
        contentType: 'application/json',
        headers: {
            'RequestVerificationToken': token
        },
        data: JSON.stringify(data),
        success: function (response) {
            if (response.success) {
                //alert('Loose Conversion added successfully.');
                userMessage.show("Success", "Loose Conversion saved successfully.!");
                
               // $("#back-looseconversion").trigger("click");
                $('#saveForm').attr("disabled");
                $('#back-looseconversion').click();
                
            } else {
                alert(response.message);
            }
        },
        error: function (xhr, status, error) {
            console.error('Error:', error);
            alert('An error occurred while saving.');
        }
    });
}

    function fetchProductDetails() {

        $('#looseItemsTable tbody').html('');

        var barcode = $('#barcode').val();
        if (!barcode) {
            alert("Please enter a Bulk Barcode.");
            return;
        }
        $.ajax({
            url: '@Url.Action("GetProductCartonValue", "ProductCarton")',
            type: 'POST',
            data: { barcode: barcode },
            success: function (response) {
                if (response.success && response.product && response.product.id) {
                    let product = response.product;


                    $("#PartNumber").text(product.epicorPartNo);
                    $("#PartName").text(product.partName);
                    $("#BulkQty").text(product.weightValue);
                    $("#productCarton_Id").val(product.id);

                } else {
                    $("#PartNumber").text("N/A");
                    $("#PartName").text("N/A");
                    $("#BulkQty").text("N/A");
                }
            },

        });



    }
    @*function GetProductWeightBarcodeValue() {
        var epicorePartNo = $('#PartNumber').text();
                $.ajax({
    url: '@Url.Action("GetProductWeightBarcodeValue", "ProductWeightBarcode")',
    type: 'POST',
            data: { epicorePartNo: epicorePartNo },
    success: function (response) {
        if (response.success && response.product && response.product.id) {
            let product = response.product;

            $("#weighScaleBarcode_Id").val(product.id);

        } else {
            $("#weighScaleBarcode_Id").val("");

            //alert(response.message || "Product details not found.");
        }
    },

});
    }*@

    $(document).ready(function () {
        $('#saveWeightBarcode').on('click', function () {
             saveLooseItems();
            var productCarton_Id = $('#productCarton_Id').val();

           $.ajax({
              url: "@Url.Action("SaveWeightBarcode", "LooseConversion")",

               type: 'POST',

               data: { productCarton_Id: productCarton_Id },
                 contentType: 'application/json',
                 headers: {
                     'RequestVerificationToken': token // Include the token in headers
                 },
                 data: JSON.stringify(data),

                 success: function (response) {
                     if (response.success) {
                         alert('Weigh Scale Mapping saved successfully.');

                     } else {
                         alert(response.message);
                     }
                 },
                 error: function (xhr, status, error) {
                     console.error('Error:', error);
                     alert('An error occurred while saving.');
                 }
 });
        });
    });
</script>



<!-- Protected Script -->
@Scripts.Render(bundles.scripts.common_add_edit)
@Scripts.Render("~/bundles/jqueryval")
<!-- /.page-content -->