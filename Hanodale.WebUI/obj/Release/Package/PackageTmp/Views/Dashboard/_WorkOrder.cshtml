@model Hanodale.WebUI.Models.DashboardModel
@using Hanodale.Utility.Globalize
@using Hanodale.WebUI
@using System.Web.Optimization

<!-- Hidden Variable -->
<input type="hidden" class="mainPart" value="workorderdashboard">
<input type="hidden" class="table-congif" value="workorderdashboard" data-columncount="5" data-conditionid="4" data-button="false" data-condition="false" data-extended-event-btn="true" data-hidebtn="false" data-export-btn="true">
<input type="hidden" class="table-congif" value="assetbreakdowndashboard" data-columncount="5" data-conditionid="4" data-button="false" data-condition="false" data-extended-event-btn="true" data-hidebtn="false" data-export-btn="true" data-record-id="@Model.element_Id">
<!-- Hidden Variable -->

<div class="formSpliter"></div>
<div id="message" class="alert alert-success" style="display: none"></div>
<!-- widget grid -->
<style>
    div.dataTables_wrapper {
        margin: 10px;
        border: 1px solid #ddd;
        padding: 10px;
    }

    div.dt-toolbar {
        padding: 0px;
        padding-bottom: 5px;
    }

        div.dt-toolbar div {
            padding: 0px;
        }

    td.legendColorBox {
        padding-left: 10px;
        vertical-align: top;
        padding-top: 3px;
        padding-right: 5px;
    }

    .download {
        float: right;
        cursor: pointer;
        color: #ccc;
        /*padding:3px;*/
    }

        .download:hover {
            color: #3276b1;
        }

    .chartPieTitle {
        text-align: center;
        margin-bottom: 10px;
        border-bottom: 2px solid black;
        padding-bottom: 5px;
    }
</style>
<section id="widget-grid" class="">
    <!-- row -->

    <div class="row">

        <article class="col-sm-12 col-md-12 col-lg-6 sortable-grid ui-sortable">
            <div class="jarviswidget jarviswidget-color-darken" id="wid-id-3356"
                data-widget-editbutton="false"
                data-widget-colorbutton="false"
                @*data-widget-deletebutton="false"
                
                data-widget-fullscreenbutton="true"
				data-widget-custombutton="false"
                data-widget-togglebutton="true"
				data-widget-collapsed="false"
                data-widget-sortable="true"*@
                >
                <header>
                    <span class="widget-icon"><i class="fa fa-table"></i></span>
                    <h2>@Resources.DASHBOARD_WORK_ORDER_STATUS_TITLE</h2>

                </header>

                <!-- widget div-->
                <div>
                    <!-- widget edit box -->
                    <div class="jarviswidget-editbox">
                        <!-- This area used as dropdown edit box -->
                    </div>
                    <!-- end widget edit box -->

                    <!-- widget content -->
                    <div class="widget-body no-padding ">
                        <div style="padding: 20px; border: 1px solid #ddd;">

                            <div id="statusPlaceholder">
                                <div class="chartPieTitle">@Resources.DASHBOARD_WORK_ORDER_STATUS_TITLE</div>
                                <div id="statusPlaceholderBody"></div>
                            </div>
                            <a class="download" data-id="statusPlaceholder" data-name="@Resources.DASHBOARD_WORK_ORDER_STATUS_TITLE" style="cursor:pointer">Download as PDF</a>
                        </div>

                    </div>
                </div>
            </div>

        </article>

        <article class="col-sm-12 col-md-12 col-lg-6 sortable-grid ui-sortable">
            <div class="jarviswidget jarviswidget-color-darken" id="wid-id-3357"
                data-widget-editbutton="false"
                data-widget-colorbutton="false">
                <header>
                    <span class="widget-icon"><i class="fa fa-table"></i></span>
                    <h2>@Resources.DASHBOARD_WORK_ORDER_CATEGORY_TITLE</h2>

                </header>

                <!-- widget div-->
                <div>
                    <!-- widget edit box -->
                    <div class="jarviswidget-editbox">
                    </div>
                    <div class="widget-body no-padding ">
                        <div style="padding: 20px; border: 1px solid #ddd;">
                            <div id="categoryPlaceholder">
                                <div class="chartPieTitle">@Resources.DASHBOARD_WORK_ORDER_CATEGORY_TITLE</div>
                                <div id="categoryPlaceholderBody"></div>
                            </div>
                            <a class="download" data-id="categoryPlaceholder" data-name="@Resources.DASHBOARD_WORK_ORDER_CATEGORY_TITLE" style="cursor:pointer">Download as PDF</a>
                        </div>
                    </div>
                </div>
            </div>

        </article>

    </div>


    <div class="row">
        <!-- NEW WIDGET START -->
        <article class="col-sm-12">

            <!-- Widget ID (each widget will need unique ID)-->
            <div class="jarviswidget jarviswidget-color-darken" id="wid-id-3358"
                data-widget-editbutton="false"
                data-widget-colorbutton="false"
                @*data-widget-deletebutton="false"
                
                data-widget-fullscreenbutton="true"
				data-widget-custombutton="false"
                data-widget-togglebutton="true"
				data-widget-collapsed="false"
                data-widget-sortable="true"*@
                >
                <header>
                    <span class="widget-icon"><i class="fa fa-table"></i></span>
                    <h2>@Resources.WORKORDER_GRID_TITLE</h2>

                </header>

                <!-- widget div-->
                <div>
                    <!-- widget edit box -->
                    <div class="jarviswidget-editbox">
                        <!-- This area used as dropdown edit box -->
                    </div>
                    <!-- end widget edit box -->

                    <!-- widget content -->
                    <div class="widget-body no-padding ">
                        <table id="dt_workorderdashboard" class="table table-striped table-bordered table-hover" width="100%">
                            <div class="smart-form" id="dt_workorderdashboard-search-panel">

                                <div class="row" style="margin: 20px 10px 5px 10px">
                                    <div class="col-xs-6 col-sm-6">
                                        <div class="col-xs-12 col-sm-8 col-md-6 col-lg-6" style="text-align: left; margin-bottom: 0">
                                            <div class="col-sm-11">
                                                @Html.LabelFor(model => model.estimatedStartDateFrom, new { @class = "col-md-12 control-label", style = "font-weight:bold" })
                                            </div>
                                        </div>

                                        <div class="col-xs-12 col-sm-8 col-md-6 col-lg-6" style="text-align: left; margin-bottom: 0">
                                            <div class="col-sm-11">
                                                @Html.LabelFor(model => model.estimatedEndDateTo, new { @class = "col-md-12 control-label", style = "font-weight:bold" })
                                            </div>
                                        </div>

                                    </div>
                                </div>
                                <div class="row" style="margin: 0px 10px">
                                    <div class="col-xs-6 col-sm-6">
                                        <div class="form-group col-xs-12 col-sm-6 col-md-6 col-lg-6">
                                            <div class="col-xs-12 col-sm-8 col-md-8 col-lg-8">
                                                <div class="clearfix">
                                                    <label class="input">
                                                        <i class="icon-append fa fa-qrcode"></i>
                                                        @Html.EditorFor(model => model.estimatedStartDateFrom, new { @class = "datepicker form-control date-picker" })
                                                        @Html.ValidationMessageFor(m => m.estimatedStartDateFrom)
                                                        <i></i>
                                                    </label>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="form-group col-xs-12 col-sm-6 col-md-6 col-lg-6">
                                            <div class="col-xs-12 col-sm-8 col-md-8 col-lg-8">
                                                <div class="clearfix">
                                                    <label class="input">
                                                        <i class="icon-append fa fa-qrcode"></i>
                                                        @Html.EditorFor(model => model.estimatedEndDateTo, new { @class = "datepicker form-control date-picker" })
                                                        @Html.ValidationMessageFor(m => m.estimatedEndDateTo)
                                                    </label>
                                                </div>
                                            </div>
                                        </div>

                                    </div>


                                </div>
                            </div>
                            <thead>
                                <tr>
                                    <th data-hide="expand" style="text-align: center">@*<i class="fa fa-fw   fa-pencil text-muted hidden-md hidden-sm hidden-xs tableIcon"></i>*@@Resources.WORKORDER_CODE</th>
                                    <th data-class="phone,tablet" style="text-align: center">@*<i class="fa fa-fw   fa-pencil text-muted hidden-md hidden-sm hidden-xs tableIcon"></i>*@@Resources.WORKORDER_NAME</th>
                                    <th data-class="phone,tablet" style="text-align: center">@*<i class="fa fa-fw   fa-pencil text-muted hidden-md hidden-sm hidden-xs tableIcon"></i>*@@Resources.WORKORDER_REQUESTER_ID</th>
                                    <th data-hide="phone,tablet" style="text-align: center">@*<i class="fa fa-fw   fa-calendar text-muted hidden-md hidden-sm hidden-xs tableIcon"></i>*@@Resources.WORKORDER_REQUIREDDATE</th>
                                    <th data-hide="phone,tablet" style="text-align: center">@*<i class="fa fa-fw   fa-pencil text-muted hidden-md hidden-sm hidden-xs tableIcon"></i>*@@Resources.WORKORDER_RESPONSIBLEBUSINESS</th>
                                </tr>
                            </thead>
                            <tbody>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </article>
    </div>

    <div class="row">
        <!-- NEW WIDGET START -->
        <article class="col-sm-12">

            <!-- Widget ID (each widget will need unique ID)-->
            <div class="jarviswidget jarviswidget-color-darken" id="@(Model.isMytask ? "wid-id-133253" : "wid-id-33253")"
                data-widget-editbutton="false"
                data-widget-colorbutton="false"
                @*data-widget-deletebutton="false"
                
                data-widget-fullscreenbutton="true"
				data-widget-custombutton="false"
                data-widget-togglebutton="true"
				data-widget-collapsed="false"
                data-widget-sortable="true"*@
                >
                <header>
                    <span class="widget-icon"><i class="fa fa-table"></i></span>
                    @if (Model.isMytask)
                    {
                        <h2>@Resources.MY_ACTIVE_WORK_ORDER_GRID__TITLE</h2>
                    }
                    else
                    {
                        <h2>@Resources.ASSET_BREAKDOWN_WORK_ORDER_GRID__TITLE</h2>
                    }

                </header>

                <!-- widget div-->
                <div>
                    <!-- widget edit box -->
                    <div class="jarviswidget-editbox">
                        <!-- This area used as dropdown edit box -->
                    </div>
                    <!-- end widget edit box -->

                    <!-- widget content -->
                    <div class="widget-body no-padding ">
                        <table id="dt_assetbreakdowndashboard" class="table table-striped table-bordered table-hover" width="100%">
                            <div class="smart-form" id="dt_assetbreakdowndashboard-search-panel">

                                <div class="row" style="margin: 20px 10px 5px 10px">
                                    <div class="col-xs-12 col-sm-6">
                                        <div class="col-xs-12 col-sm-8 col-md-6 col-lg-6" style="text-align: left; margin-bottom: 0">
                                            <div class="col-sm-11">
                                                @Html.LabelFor(model => model.estimatedStartDateFrom, new { @class = "col-md-12 control-label", style = "font-weight:bold" })
                                            </div>
                                        </div>

                                        <div class="col-xs-12 col-sm-8 col-md-6 col-lg-6" style="text-align: left; margin-bottom: 0">
                                            <div class="col-sm-11">
                                                @Html.LabelFor(model => model.estimatedEndDateTo, new { @class = "col-md-12 control-label", style = "font-weight:bold" })
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="row" style="margin: 0px 10px">
                                    <div class="col-xs-6 col-sm-6">
                                        <div class="form-group col-xs-12 col-sm-6 col-md-6 col-lg-6">
                                            <div class="col-xs-12 col-sm-8 col-md-8 col-lg-8">
                                                <div class="clearfix">
                                                    <label class="input">
                                                        <i class="icon-append fa fa-qrcode"></i>
                                                        @Html.EditorFor(model => model.estimatedStartDateFrom, new { @class = "datepicker form-control date-picker date" })
                                                        @Html.ValidationMessageFor(m => m.estimatedStartDateFrom)
                                                        <i></i>
                                                    </label>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="form-group col-xs-12 col-sm-6 col-md-6 col-lg-6">
                                            <div class="col-xs-12 col-sm-8 col-md-8 col-lg-8">
                                                <div class="clearfix">
                                                    <label class="input">
                                                        <i class="icon-append fa fa-qrcode"></i>
                                                        @Html.EditorFor(model => model.estimatedEndDateTo, new { @class = "datepicker form-control date-picker" })
                                                        @Html.ValidationMessageFor(m => m.estimatedEndDateTo)
                                                    </label>
                                                </div>
                                            </div>
                                        </div>

                                    </div>


                                </div>
                                @if (!Model.isMytask)
                                {
                                    <div class="row" style="margin: 20px 10px 5px 10px">
                                        <div class="col-xs-6 col-sm-6">

                                            <div class="col-xs-12 col-sm-8 col-md-6 col-lg-6" style="text-align: left; margin-bottom: 0">
                                                <div class="col-sm-11">
                                                    @Html.LabelFor(model => model.maintenanceType_Id, new { @class = "col-md-12 control-label", style = "font-weight:bold" })
                                                </div>
                                            </div>


                                        </div>
                                    </div>
                                }
                                @if (!Model.isMytask)
                                {
                                    <div class="row" style="margin: 0px 10px">
                                        <div class="col-xs-6 col-sm-6">

                                            <div class="form-group col-xs-12 col-sm-6 col-md-6 col-lg-6">
                                                <div class="col-xs-12 col-sm-8 col-md-8 col-lg-8">
                                                    <div class="clearfix">
                                                        <label class="select">
                                                            @Html.EditorFor(model => model.maintenanceType_Id, new { @class = "form-control multipleSelect", dataValue = Model.lstMaintananceType })
                                                            @Html.ValidationMessageFor(m => m.maintenanceType_Id)
                                                        </label>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }

                            </div>
                            <thead>
                                <tr>
                                    <th data-hide="phone,tablet" style="text-align: center">@*<i class="fa fa-fw   fa-pencil text-muted hidden-md hidden-sm hidden-xs tableIcon"></i>*@@Resources.WORKORDER_CODE</th>
                                    <th data-class="expand" style="text-align: center">@*<i class="fa fa-fw   fa-pencil text-muted hidden-md hidden-sm hidden-xs tableIcon"></i>*@@Resources.WORKORDER_NAME</th>
                                    <th data-hide="phone,tablet" style="text-align: center">@*<i class="fa fa-fw   fa-pencil text-muted hidden-md hidden-sm hidden-xs tableIcon"></i>*@@Resources.WORKORDER_REQUESTER_ID</th>
                                    <th data-class="expand" style="text-align: center">@*<i class="fa fa-fw   fa-calendar text-muted hidden-md hidden-sm hidden-xs tableIcon"></i>*@@Resources.WORKORDER_REQUIREDDATE</th>
                                    <th data-hide="phone,tablet" style="text-align: center">@*<i class="fa fa-fw   fa-calendar text-muted hidden-md hidden-sm hidden-xs tableIcon"></i>*@@Resources.WORKORDER_RESPONSIBLEBUSINESS</th>
                                </tr>
                            </thead>
                            <tbody>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </article>
    </div>



</section>
@Scripts.Render(bundles.scripts.common_add_edit)
@Scripts.Render(bundles.scripts.common_index)
<script src="~/Scripts/plugin/flot/jquery.flot.tooltip.min.js"></script>
@*<script src="http://mrrio.github.io/jsPDF/dist/jspdf.min.js"></script>
<script src="http://cdnjs.cloudflare.com/ajax/libs/html2canvas/0.4.1/html2canvas.js"></script>*@
<script src="~/Scripts/flot/jspdf.min.js"></script>
<script src="~/Scripts/flot/html2canvas.js"></script>
@*@Scripts.Render(bundles.scripts.workorder_index)*@
<!-- Protected Script -->
<style>
    #statusPlaceholderBody, #categoryPlaceholderBody {
        width: 450px;
        height: 250px;
    }
</style>
<script>
    var plotStatus = null;
    _initActionExtended = function (partName, readOnly) {
        $('.linkToGrid').on("click", function () {

            var recordId = $(this).attr("data-value")
            if (recordId) {
                var parent = $(this).closest('table').attr('id');
                if (parent == 'dt_assetbreakdowndashboard') {
                    var actionUrl = "WorkOrder/Index/";
                    var param = { recordId: recordId }
                    navigate.viewByParameter(actionUrl, param);
                } else {
                    var actionUrl = "WorkOrder/Index/";
                    var param = { recordId: recordId }
                    navigate.viewByParameter(actionUrl, param);
                }
            }
        })

        setCheckBox($('#d'));
        function setCheckBox($this) {
            if ($this.attr("checked") == "checked") {
                $('#d').val(true);
            }
            else {
                $('#d').val(false);
            }
        }

        $('#d').on("click", function () {
            setCheckBox($(this));
        })
    }

    ExtendedFilterMethod();
    $(".download").on("click", function (e) {
        e.preventDefault();
        var canvasName = $(this).attr('data-id');
        var fileName = $(this).attr('data-name');
        html2canvas($("#" + canvasName).get(0), {
            onrendered: function (canvas) {

                var imgData = canvas.toDataURL('image/png');
                //console.log('Report Image URL: ' + imgData);
                var doc = new jsPDF('landscape');

                doc.addImage(imgData, 'PNG', 10, 10, 190, 95);
                doc.save(fileName.replace(/ /g, "_") + '.pdf');
            }
        });
    });
    //function downloadCanvas(link, canvasId, filename) {
    //    var ctx = plotStatus.getCanvas();
    //    //var image = ctx.toDataURL("image/png").replace("image/png", "image/octet-stream");  // here is the most important part because if you dont replace you will get a DOM 18 exception.
    //    link.href = ctx.toDataURL("image/png");
    //    link.download = filename;
    //}
    //$('#download').on('click', function () {
    //    downloadCanvas(this, 'statusPlaceholder', 'WorkOrderStatus.png');
    //});
    function ExtendedFilterMethod() {
        //var data = [
        //{ label: "Read", data: 50, color: '#614E43' },
        //{ label: "Unread jhbhj", data: 150, color: '#F5912D' }
        //];
        var color = ["#3A15E8", "#CA0000", "#13A515", "#F0F522", "#F5912D", "#228DF5", "#F522CB", "#22D5F5", "#B822F5", "#B8F522", "#614E43"];
        var from = new Date();
        var to = new Date();
        var fromCurrentDate = "01" + "/" + ((from.getMonth() + 1) > 9 ? "" : "0") + (from.getMonth() + 1) + "/" + from.getFullYear()
        var toCurrentDate = "01" + "/" + ((to.getMonth() + 1) > 9 ? "" : "0") + (to.getMonth() + 1) + "/" + to.getFullYear()

        var fromDate = $('#estimatedStartDateFrom').val();
        var toDate = $('#estimatedEndDateTo').val();

        var currentDate = new Date();
        if (fromDate == '') {
            $('#estimatedStartDateFrom').val(fromCurrentDate)
        }

        if (toDate == '') {
            $('#estimatedEndDateTo').val(toCurrentDate)
        }


        $.ajax({
            type: "POST",
            url: "WorkOrderDashboard/GetOrderStatus",
            data: JSON.stringify({ startDate: fromDate, endDate: toDate }),
            cache: false,
            contentType: "application/json; charset=utf-8",
            success: function (data) {
                var status = [];
                var totalStatus = 0;

                $.each(data.status, function () {
                    totalStatus += this.Value;
                });

                if (totalStatus == 0)
                    totalStatus = 1;

                for (var i = 0; i < data.status.length; i++) {
                    status.push({ label: data.status[i].Key + " [" + Math.round((data.status[i].Value / totalStatus) * 100) + "%] (" + data.status[i].Value + ")", data: data.status[i].Value, color: color[i] });
                }

                var category = [];
                var totalCategory = 0;

                $.each(data.category, function () {
                    totalCategory += this.Value;
                });

                if (totalCategory == 0)
                    totalCategory = 1;

                for (var i = 0; i < data.category.length; i++) {
                    //category.push({ label: data.category[i].Key, data: data.category[i].Value, color: color[i] });
                    category.push({ label: data.category[i].Key + " [" + Math.round((data.category[i].Value / totalCategory) * 100) + "%] (" + data.category[i].Value + ")", data: data.category[i].Value, color: color[i] });
                }

                //alert(fromDate + "  --  " + toDate + "   --   " + totalStatus + "   --   " + totalCategory);
                console.log(status)
                console.log($("#statusPlaceholderBody"))
                plotStatus = $.plot($("#statusPlaceholderBody"), status,
                           {
                               series: {
                                   pie: {
                                       show: true,
                                       radius: 1,
                                       label: {
                                           show: true,
                                           radius: 2 / 3,
                                           //formatter: function (label, series) {
                                           //    return '<div style="font-size:8pt;text-align:center;padding:2px;color:white;">' + label + '<br/>' + Math.round(series.percent) + '% (' + series.data[0][1] + ')</div>';

                                           //},
                                           formatter: function (label, series) {
                                               return '<div style="font-size:8pt;text-align:center;padding:2px;color:black;max-width: 60px;">' + label + '</div>';

                                           },
                                           //threshold: 0.1
                                       }
                                   }
                               },
                               legend: {
                                   show: true,
                                   //labelBoxBorderColor: "none"
                               },
                               grid: {
                                   hoverable: true
                               },
                               tooltip: true,
                               tooltipOpts: {
                                   //content: "%y.0, %s", // show percentages, rounding to 2 decimal places
                                   //content: "%p.0%, %s", // show percentages, rounding to 2 decimal places
                                   content: "%s (%p.0%)", // show percentages, rounding to 2 decimal places
                                   //obj.series.label, " (", percent, "%)
                                   shifts: {
                                       x: 20,
                                       y: 0
                                   },
                                   defaultTheme: false
                               }
                           });


                $.plot($("#categoryPlaceholderBody"), category,
                           {
                               series: {
                                   pie: {
                                       show: true,
                                       radius: 1,
                                       label: {
                                           show: true,
                                           radius: 2 / 3,
                                           //formatter: function (label, series) {
                                           //    return '<div style="font-size:8pt;text-align:center;padding:2px;color:white;">' + label + '<br/>' + Math.round(series.percent) + '% (' + series.data[0][1] + ')</div>';

                                           //},
                                           formatter: function (label, series) {
                                               return '<div style="font-size:8pt;text-align:center;padding:2px;color:black;max-width: 60px;">' + label + '</div>';

                                           },
                                           //threshold: 0.1
                                       }
                                   }
                               },
                               legend: {
                                   show: true,
                                   //labelBoxBorderColor: "none"
                               },
                               grid: {
                                   hoverable: true
                               },
                               tooltip: true,
                               tooltipOpts: {
                                   //content: "%y.0, %s", // show percentages, rounding to 2 decimal places
                                   //content: "%p.0%, %s", // show percentages, rounding to 2 decimal places
                                   content: "%s (%p.0%)", // show percentages, rounding to 2 decimal places
                                   //obj.series.label, " (", percent, "%)
                                   shifts: {
                                       x: 20,
                                       y: 0
                                   },
                                   defaultTheme: false
                               }
                           });
            },


            error: function (xhr, ajaxOptions, thrownError) {
                //log error
                _showErrorMessage();
            }
        });
    }
</script>
